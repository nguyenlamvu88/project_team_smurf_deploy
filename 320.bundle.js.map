{"version":3,"file":"320.bundle.js","mappings":"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","sources":["webpack://project_team_smurf_deploy/./src/components/graphs/005_WeaponTypeChoroplethMap.js","webpack://project_team_smurf_deploy/./src/components/graphs/005_WeaponTypeZCP.js","webpack://project_team_smurf_deploy/./src/components/005_emergingThreats.js","webpack://project_team_smurf_deploy/./node_modules/topojson-client/src/identity.js","webpack://project_team_smurf_deploy/./node_modules/topojson-client/src/feature.js","webpack://project_team_smurf_deploy/./node_modules/topojson-client/src/transform.js","webpack://project_team_smurf_deploy/./node_modules/topojson-client/src/reverse.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as topojson from 'topojson-client';\r\n\r\nconst ChoroplethMap = () => {\r\n  const svgRef = useRef();\r\n  const pieChartRef = useRef();\r\n\r\n\r\n  // State Variables\r\n  const [tooltip, setTooltip] = useState({ visible: false, x: 0, y: 0, content: null });\r\n  const [modalData, setModalData] = useState(null); // For storing data to display in the modal\r\n  const [countryData, setCountryData] = useState({});\r\n  const [countries, setCountries] = useState([]); // Store GeoJSON features\r\n  const [selectedYear, setSelectedYear] = useState(null); // Initialize to null\r\n  const [selectedWeaponType, setSelectedWeaponType] = useState(null); // Initialize to null\r\n  const [weaponTypes, setWeaponTypes] = useState([]);\r\n  const [maxQuantities, setMaxQuantities] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [minYear, setMinYear] = useState(1950); // Fixed minimum year\r\n  const [maxYear, setMaxYear] = useState(2023); // Fixed maximum year\r\n  const [totalArmsTrade, setTotalArmsTrade] = useState(0);\r\n\r\n  // Data URL\r\n  const dataUrl = \"/data/processed/processed_arms_transfer_by_weapon_types.csv\";\r\n  const pieChartUrl = \"/data/processed/processed_regional_transfers.csv\";\r\n\r\n  /**\r\n   * Country Name Mapping\r\n   * Map dataset country names to GeoJSON country names if they differ.\r\n   */\r\n  const countryNameMapping = {\r\n    \"Cote d'Ivoire\": \"Ivory Coast\",\r\n    \"Congo\": \"Republic of the Congo\", // Adjust based on GeoJSON data\r\n    // Add more mappings as necessary\r\n  };\r\n\r\n  /**\r\n   * Data Loading Effect\r\n   * Fetches and processes the world map and arms transfer data once when the component mounts.\r\n   */\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    Promise.all([\r\n      d3.json('/countries-110m.json'),\r\n      d3.csv(dataUrl, d => {\r\n        const year = +d['year'];\r\n        const quantity = +d['quantity'];\r\n        // Validate year range\r\n        if (isNaN(year) || isNaN(quantity) || year < minYear || year > maxYear) {\r\n          return null; // Skip invalid or out-of-range rows\r\n        }\r\n        return {\r\n          recipients: d['recipients'],\r\n          suppliers: d['suppliers'],\r\n          year: Math.round(year), // Ensure year is an integer\r\n          quantity: quantity,\r\n          weaponDescription: d['weapon description'],\r\n          status: d['status'],\r\n        };\r\n      })\r\n    ])\r\n    .then(([worldDataRaw, armsDataRaw]) => {\r\n      // Filter out null entries\r\n      armsDataRaw = armsDataRaw.filter(row => row !== null);\r\n\r\n      // Convert TopoJSON to GeoJSON Features\r\n      const countriesData = topojson.feature(worldDataRaw, worldDataRaw.objects.countries).features;\r\n      setCountries(countriesData); // Store countries data in state\r\n\r\n      // Process arms transfer data\r\n      const processedData = {};\r\n      const uniqueWeaponTypes = new Set();\r\n      const tempMaxQuantities = {};\r\n\r\n      armsDataRaw.forEach(row => {\r\n        let country = row.recipients;\r\n        country = countryNameMapping[country] || country; // Apply mapping\r\n\r\n        const year = row.year;\r\n        const weaponType = row.weaponDescription ? row.weaponDescription.trim() : \"\"; // Trim whitespace\r\n        const quantity = row.quantity;\r\n        const suppliers = row.suppliers;\r\n        const status = row.status;\r\n\r\n        // Only add non-empty weapon types\r\n        if (weaponType !== \"\") {\r\n          uniqueWeaponTypes.add(weaponType);\r\n        }\r\n\r\n        if (!processedData[country]) {\r\n          processedData[country] = {};\r\n        }\r\n        if (!processedData[country][year]) {\r\n          processedData[country][year] = {};\r\n        }\r\n\r\n        // Assuming one entry per country-year-weaponType\r\n        processedData[country][year][weaponType] = {\r\n          quantity,\r\n          suppliers,\r\n          status\r\n        };\r\n\r\n        // Update max quantities for scales\r\n        if (!tempMaxQuantities[weaponType]) {\r\n          tempMaxQuantities[weaponType] = {};\r\n        }\r\n        if (!tempMaxQuantities[weaponType][year] || quantity > tempMaxQuantities[weaponType][year]) {\r\n          tempMaxQuantities[weaponType][year] = quantity;\r\n        }\r\n      });\r\n\r\n      // Construct weaponTypesArray with \"All\" and filter out any empty entries\r\n      const weaponTypesArray = [\"All\", ...Array.from(uniqueWeaponTypes).filter(wt => wt !== \"\" && wt !== undefined).sort()];\r\n      setWeaponTypes(weaponTypesArray);\r\n      setCountryData(processedData);\r\n      setMaxQuantities(tempMaxQuantities);\r\n      setLoading(false);\r\n\r\n      // Set default selectedYear and selectedWeaponType based on available data\r\n      const availableYears = Array.from(new Set(armsDataRaw.map(d => d.year))).sort((a, b) => a - b);\r\n      if (availableYears.length > 0) {\r\n        setSelectedYear(2019);\r\n      }\r\n\r\n      if (weaponTypesArray.includes('All')) {\r\n        setSelectedWeaponType('All');\r\n      } else if (weaponTypesArray.length > 0) {\r\n        setSelectedWeaponType(weaponTypesArray[0]);\r\n      }\r\n\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error loading data:\", error);\r\n      setError(\"Failed to load data. Please try again later.\");\r\n      setLoading(false);\r\n    });\r\n  }, []); // Empty dependency array ensures this runs once on mount\r\n\r\n  /**\r\n   * Rendering Effect\r\n   * Draws the map whenever selectedYear, selectedWeaponType, or countryData changes.\r\n   */\r\n  useEffect(() => {\r\n    if (\r\n      countries.length === 0 ||\r\n      Object.keys(countryData).length === 0 ||\r\n      selectedYear === null ||\r\n      isNaN(selectedYear) ||\r\n      !selectedWeaponType\r\n    ) return;\r\n\r\n    drawMap(countries, countryData, selectedYear, selectedWeaponType);\r\n  }, [selectedYear, selectedWeaponType, countryData, countries]);\r\n\r\n  useEffect(() => {\r\n    const width = 200; // Adjust as needed\r\n    const height = 200; // Match the container's height\r\n    const radius = Math.min(width, height) * 0.3;\r\n\r\n    const svg = d3.select(pieChartRef.current).attr('width', width).attr('height', height);\r\n    svg.selectAll('*').remove();\r\n\r\n    d3.csv(pieChartUrl).then(data => {\r\n      data.forEach(d => {\r\n        for (let year = 1950; year <= 2023; year++) {\r\n          d[year] = +d[year] / 1000 || 0;\r\n        }\r\n      });\r\n\r\n      const customOrder = [\"Asia and Oceania\", \"Europe\", \"Middle East\", \"Americas\", \"Africa\"]; // Define the custom order\r\n\r\n      const filteredData = data.filter(d => \r\n        d['Imports by Regions'] !== 'World total' && d['Imports by Regions'] !== 'International organizations'\r\n      );\r\n\r\n      const regionArmsData = Array.from(\r\n        d3.group(filteredData, d => d['Imports by Regions']),\r\n        ([region, values]) => ({\r\n          region,\r\n          armsTrade: values[0][selectedYear] || 0\r\n        })\r\n      ).sort((a, b) => {\r\n        // Sort based on the custom order\r\n        return customOrder.indexOf(a.region) - customOrder.indexOf(b.region);\r\n      });\r\n\r\n      const totalArmsTrade = d3.sum(regionArmsData, d => d.armsTrade);\r\n      setTotalArmsTrade(totalArmsTrade);\r\n\r\n      if (totalArmsTrade === 0) {\r\n        svg.append('text')\r\n          .attr('x', width / 2)\r\n          .attr('y', height / 2)\r\n          .attr('text-anchor', 'middle')\r\n          .text('No data available for this year');\r\n        return;\r\n      }\r\n\r\n      const colorMap = {\r\n        \"Asia and Oceania\": \"#F44336\",  // Soft red/orange\r\n        \"Europe\": \"#0D47A1\",           // Bright red\r\n        \"Middle East\": \"#388E3C\",      // Dark red\r\n        \"Americas\": \"#FF9800\",         // Vibrant red\r\n        \"Africa\": \"#6D4C41\",           // Darker red\r\n      };\r\n  \r\n      // Custom color scale using the dictionary\r\n      const colorScale = d3.scaleOrdinal()\r\n        .domain(regionArmsData.map(d => d.region))\r\n        .range(regionArmsData.map(d => colorMap[d.region]));\r\n\r\n\r\n      const pie = d3.pie().sort(null) // Do not automatically sort the data\r\n      .startAngle(0) // Start angle at 0 (APEC starts from 0 degrees)\r\n      .endAngle(2 * Math.PI).value(d => d.armsTrade);\r\n      const arc = d3.arc().outerRadius(radius - 10).innerRadius(0); \r\n      const labelArc = d3.arc().outerRadius(radius + 20).innerRadius(radius + 20);\r\n\r\n\r\n      svg.append('g')\r\n        .attr('transform', `translate(${width * 0.6}, ${height / 2})`)\r\n        .selectAll('path')\r\n        .data(pie(regionArmsData))\r\n        .enter()\r\n        .append('path')\r\n        .attr('d', arc)\r\n        .attr('fill', d => colorScale(d.data.region))\r\n        .attr('stroke', '#e0e0e0')\r\n        .attr('stroke-width', '1.5px')\r\n        .attr('opacity', 0.8)\r\n        .on('mouseenter', (event, d) => {\r\n          const regionPercentage = ((d.data.armsTrade / totalArmsTrade) * 100).toFixed(2);\r\n          const container = svgRef.current.getBoundingClientRect();\r\n          const offsetX = event.clientX - container.left;\r\n          const offsetY = event.clientY - container.top;\r\n          setTooltip({\r\n            visible: true,\r\n            x: offsetX + 10,\r\n            y: offsetY - 10,\r\n            content: (<div><strong>{d.data.region}:</strong> ${d.data.armsTrade.toLocaleString()}B ({regionPercentage}%)</div>),\r\n          });\r\n        })\r\n        .on('mousemove', (event) => {\r\n          const container = svgRef.current.getBoundingClientRect();\r\n          const offsetX = event.clientX - container.left;\r\n          const offsetY = event.clientY - container.top;\r\n          setTooltip(prev => ({\r\n            ...prev,\r\n            x: offsetX + 10,\r\n            y: offsetY - 10,\r\n          }));\r\n        })\r\n        .on('mouseleave', (event) => {\r\n          setTooltip({ visible: false, x: 0, y: 0, content: '' });\r\n\r\n          d3.select(event.currentTarget)\r\n            .transition()\r\n            .duration(200)\r\n            .attr('d', arc)\r\n            .attr('opacity', 0.85);\r\n        });\r\n\r\n        svg.append('g')\r\n        .attr('transform', `translate(${width * 0.6}, ${height / 2})`)\r\n          .selectAll('text')\r\n          .data(pie(regionArmsData))\r\n          .enter()\r\n          .append('text')\r\n          .attr('transform', d => {\r\n            const [x, y] = labelArc.centroid(d);\r\n            const angle = (d.startAngle + d.endAngle) / 2;  // Calculate the angle of the arc midpoint\r\n            let rotation = (angle * 180 / Math.PI) - 90;  // Rotate to make text vertical\r\n            const arcLength = d.endAngle - d.startAngle;\r\n            const arcLengthDeg = arcLength * 180 / Math.PI;\r\n            // Flip text if it's between 180 and 360 degrees\r\n            if (arcLengthDeg < 30) {\r\n              // Flip text if it's between 180 and 360 degrees\r\n              if (rotation > 90) {\r\n                rotation -= 180;\r\n              }\r\n            } else {\r\n              rotation = 0;  // No rotation if the arc is wide enough\r\n            }\r\n\r\n            return `translate(${x}, ${y}) rotate(${rotation})`;\r\n          }) // Position labels and rotate them to be vertical to the arc\r\n          .style('text-anchor', 'middle')\r\n          .style('font-size', '14px') // Increase font size\r\n          .style('font-weight', 'bold') // Optional: make the text bold\r\n          .style('fill', '#e0e0e0') // Set text color\r\n          .style('pointer-events', 'none')\r\n          .text(d => {\r\n            // Set custom labels for specific regions\r\n            if (d.data.region === 'Asia and Oceania') {\r\n              return 'APAC';\r\n            } else if (d.data.region === 'Middle East') {\r\n              return 'ME';\r\n            } else if (d.data.region === 'Americas') {\r\n              return 'AMS';\r\n            } else {\r\n              return d.data.region;  // Default label\r\n            }\r\n          });\r\n    }).catch(error => {\r\n      console.error(\"Error loading data:\", error);\r\n    });\r\n  }, [dataUrl, selectedYear]);\r\n  /**\r\n   * Function to Draw the Map\r\n   */\r\n  const drawMap = (countries, armsData, year, weaponType) => {\r\n    const width = 800;\r\n    const height = 400;\r\n\r\n    // Define Projection and Path\r\n    const projection = d3.geoMercator()\r\n      .center([0, 20])\r\n      .scale(130)\r\n      .translate([width / 2, height / 2]);\r\n\r\n    const path = d3.geoPath().projection(projection);\r\n\r\n    // Define Color and Size Scales\r\n    let maxQuantity;\r\n    let colorScale;\r\n    let sizeScale;\r\n\r\n    if (weaponType === \"All\") {\r\n      // Calculate the sum of quantities across all weapon types for each country\r\n      maxQuantity = d3.max(countries, d => {\r\n        const country = d.properties.name;\r\n        const yearData = armsData[country]?.[year];\r\n        if (yearData) {\r\n          return Object.values(yearData).reduce((acc, curr) => acc + curr.quantity, 0);\r\n        }\r\n        return 0;\r\n      }) || 0;\r\n\r\n      colorScale = d3.scaleSequential(d3.interpolateReds)\r\n          .domain([Math.log(1), Math.log(maxQuantity)]); // Using Math.log to handle logarithmic scaling\r\n\r\n      sizeScale = d3.scaleSqrt()\r\n        .domain([0, maxQuantity])\r\n        .range([0, 50]); // Adjust circle size range as necessary\r\n    } else {\r\n      // Specific weapon type\r\n      maxQuantity = d3.max(countries, d => armsData[d.properties.name]?.[year]?.[weaponType]?.quantity || 0) || 0;\r\n\r\n      colorScale = d3.scaleSequential(d3.interpolateReds)\r\n          .domain([Math.log(1), Math.log(maxQuantity)]); // Using Math.log to handle logarithmic scaling\r\n\r\n\r\n      sizeScale = d3.scaleSqrt()\r\n        .domain([0, maxQuantity])\r\n        .range([0, 50]); // Adjust circle size range as necessary\r\n    }\r\n\r\n    // Select and Setup SVG\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('viewBox', `0 0 ${width} ${height}`)\r\n      .attr('preserveAspectRatio', 'xMidYMid meet')\r\n      .style('width', '100%')\r\n      .style('height', 'auto')\r\n      .style('background-color', '')\r\n      .call(d3.zoom() // Implement Zooming and Panning\r\n        .scaleExtent([1, 8]) // Zoom scale limits\r\n        .on('zoom', (event) => {\r\n          g.attr('transform', event.transform);\r\n        })\r\n      );\r\n\r\n    // Create a group for map elements\r\n    let g = svg.select('g.map-group');\r\n    if (g.empty()) {\r\n      g = svg.append('g').attr('class', 'map-group');\r\n    }\r\n\r\n    // Clear previous drawings within the group\r\n    g.selectAll('*').remove();\r\n\r\n    // Function to Handle Tooltip Content\r\n    const handleTooltipContent = (country, year, weaponType, data) => {\r\n      if (weaponType === \"All\") {\r\n        const totalQuantity = Object.values(data).reduce((acc, curr) => acc + curr.quantity, 0);\r\n        return (\r\n          <div style={{ lineHeight: '1.6', fontSize: '16px' }}>\r\n            <strong>{country}</strong><br/>\r\n            Total Quantity: {totalQuantity} units<br/>\r\n            <span style={{ fontWeight: 'bold', color: '#e74c3c' }}>\r\n              Click for Details\r\n            </span>\r\n          </div>\r\n        );\r\n      } else {\r\n        // Handle other weapon types if necessary\r\n        return (\r\n          <div style={{ lineHeight: '1.6', fontSize: '16px' }}>\r\n            <strong>{country}</strong><br/>\r\n            Weapon: {weaponType}<br/>\r\n            Quantity: {data.quantity} units<br/>\r\n            Status: {data.status}<br/>\r\n            <span style={{ fontWeight: 'bold', color: '#e74c3c' }}>\r\n              Click for Details\r\n            </span>\r\n          </div>\r\n        );\r\n      }\r\n    };\r\n\r\n    const logColorScale = (value) => colorScale(Math.log(value));\r\n\r\n    // Draw Country Paths with Color Based on Quantity\r\n    g.selectAll('path')\r\n      .data(countries)\r\n      .enter()\r\n      .append('path')\r\n      .attr('d', path)\r\n      .attr('fill', d => {\r\n        const country = d.properties.name;\r\n        if (weaponType === \"All\") {\r\n          const yearData = armsData[country]?.[year];\r\n          if (yearData) {\r\n            const totalQuantity = Object.values(yearData).reduce((acc, curr) => acc + curr.quantity, 0);\r\n            return totalQuantity > 0 ? logColorScale(totalQuantity) : '#ccc';\r\n          }\r\n          return '#ccc';\r\n        } else {\r\n          const quantity = armsData[country]?.[year]?.[weaponType]?.quantity || 0;\r\n          return quantity > 0 ? logColorScale(quantity) : '#ccc';\r\n        }\r\n      })\r\n      .attr('stroke', '#333')\r\n      .on('mouseenter', (event, d) => {\r\n        const country = d.properties.name;\r\n\r\n        let content = null;\r\n\r\n        if (weaponType === \"All\") {\r\n          const yearData = armsData[country]?.[year];\r\n          if (!yearData) return; // No data to show\r\n\r\n          content = handleTooltipContent(country, year, weaponType, yearData);\r\n        } else {\r\n          const data = armsData[country]?.[year]?.[weaponType];\r\n          if (!data) return; // No data to show\r\n\r\n          content = handleTooltipContent(country, year, weaponType, data);\r\n        }\r\n\r\n        const container = svgRef.current.getBoundingClientRect();\r\n        const offsetX = event.clientX - container.left;\r\n        const offsetY = event.clientY - container.top;\r\n\r\n        setTooltip({\r\n          visible: true,\r\n          x: offsetX + 10,\r\n          y: offsetY - 10,\r\n          content: content\r\n        });\r\n      })\r\n      .on('mousemove', (event) => {\r\n        const container = svgRef.current.getBoundingClientRect();\r\n        const offsetX = event.clientX - container.left;\r\n        const offsetY = event.clientY - container.top;\r\n\r\n        setTooltip(prev => ({\r\n          ...prev,\r\n          x: offsetX + 10,\r\n          y: offsetY - 10,\r\n        }));\r\n\r\n      })\r\n      .on('mouseleave', () => {\r\n        setTooltip({ visible: false, x: 0, y: 0, content: null });\r\n      })\r\n      .on('click', (event, d) => {\r\n        const country = d.properties.name;\r\n        if (weaponType === \"All\") {\r\n          const yearData = armsData[country]?.[year];\r\n          if (!yearData) return; // No data to show\r\n\r\n          setModalData({\r\n            country,\r\n            year,\r\n            data: yearData\r\n          });\r\n        } else {\r\n          const data = armsData[country]?.[year]?.[weaponType];\r\n          if (!data) return; // No data to show\r\n\r\n          setModalData({\r\n            country,\r\n            year,\r\n            weaponType,\r\n            data\r\n          });\r\n        }\r\n      });\r\n\r\n    // Draw Circles Over Each Country Based on Quantity\r\n    g.selectAll('circle')\r\n      .data(countries)\r\n      .enter()\r\n      .append('circle')\r\n      .attr('cx', d => projection(d3.geoCentroid(d))[0])\r\n      .attr('cy', d => projection(d3.geoCentroid(d))[1])\r\n      .attr('r', d => {\r\n        const country = d.properties.name;\r\n        if (weaponType === \"All\") {\r\n          const yearData = armsData[country]?.[year];\r\n          if (yearData) {\r\n            return sizeScale(Object.values(yearData).reduce((acc, curr) => acc + curr.quantity, 0));\r\n          }\r\n          return 0;\r\n        } else {\r\n          const quantity = armsData[country]?.[year]?.[weaponType]?.quantity || 0;\r\n          return quantity > 0 ? sizeScale(quantity) : 0;\r\n        }\r\n      })\r\n      .attr('fill', 'rgba(255, 69, 0, 0.5)') // Semi-transparent orange color for the circles\r\n      .attr('stroke', 'orange')\r\n      .attr('stroke-width', 0.5)\r\n      .on('mouseenter', (event, d) => {\r\n        const country = d.properties.name;\r\n\r\n        let content = null;\r\n\r\n        if (weaponType === \"All\") {\r\n          const yearData = armsData[country]?.[year];\r\n          if (!yearData) return; // No data to show\r\n\r\n          content = handleTooltipContent(country, year, weaponType, yearData);\r\n        } else {\r\n          const data = armsData[country]?.[year]?.[weaponType];\r\n          if (!data) return; // No data to show\r\n\r\n          content = handleTooltipContent(country, year, weaponType, data);\r\n        }\r\n\r\n        // Use d3.pointer to get mouse position relative to the SVG\r\n\r\n        const container = svgRef.current.getBoundingClientRect();\r\n        const offsetX = event.clientX - container.left;\r\n        const offsetY = event.clientY - container.top;\r\n        setTooltip({\r\n          visible: true,\r\n          x: offsetX + 10,\r\n          y: offsetY - 10,\r\n          content: content\r\n        });\r\n      })\r\n      .on('mousemove', (event) => {\r\n        const container = svgRef.current.getBoundingClientRect();\r\n        const offsetX = event.clientX - container.left;\r\n        const offsetY = event.clientY - container.top;\r\n        setTooltip(prev => ({\r\n          ...prev,\r\n          x: offsetX + 10,\r\n          y: offsetY - 10,\r\n        }));\r\n      })\r\n      .on('mouseleave', () => {\r\n        setTooltip({ visible: false, x: 0, y: 0, content: null });\r\n      })\r\n      .on('click', (event, d) => {\r\n        const country = d.properties.name;\r\n        if (weaponType === \"All\") {\r\n          const yearData = armsData[country]?.[year];\r\n          if (!yearData) return; // No data to show\r\n\r\n          setModalData({\r\n            country,\r\n            year,\r\n            data: yearData\r\n          });\r\n        } else {\r\n          const data = armsData[country]?.[year]?.[weaponType];\r\n          if (!data) return; // No data to show\r\n\r\n          setModalData({\r\n            country,\r\n            year,\r\n            weaponType,\r\n            data\r\n          });\r\n        }\r\n      });\r\n\r\n  };\r\n\r\n  /**\r\n   * Function to Close Modal\r\n   */\r\n  const closeModal = () => {\r\n    setModalData(null);\r\n  };\r\n\r\n  return (\r\n    <div style={{ position: 'relative', width: '100%', height: 'auto'}}>\r\n      <h3 style={{\r\n          textAlign: 'center',\r\n          fontSize: '24px',\r\n          color: '#e74c3c',\r\n          paddingTop: '20px',\r\n        }}>\r\n          Arms Imports by Weapon Type {selectedYear}\r\n        </h3>\r\n\r\n      {loading && <div className=\"loading\">Loading data...</div>}\r\n      {error && <div className=\"error\" style={{ color: 'red' }}>{error}</div>}\r\n\r\n      {!loading && !error && (\r\n        <>\r\n          <input\r\n              type=\"range\"\r\n              id=\"yearSlider\"\r\n              min={minYear} // Fixed earliest year\r\n              max={maxYear} // Fixed latest year\r\n              step={1} // Ensure only whole numbers\r\n              value={selectedYear} // Use selectedYear directly\r\n              onChange={(e) => setSelectedYear(parseInt(e.target.value, 10))} // Ensure integer\r\n              style={{\r\n                width: '80%',\r\n                appearance: 'none',\r\n                height: '8px',\r\n                backgroundColor: 'gray',\r\n                borderRadius: '5px',\r\n                outline: 'none',\r\n                margin: '20px auto 10px',\r\n                display: 'block',\r\n                accentColor: '#e74c3c',\r\n              }}\r\n              disabled={!selectedWeaponType} // Disable until weapon type is selected\r\n            />\r\n          {/* Weapon Type Selection */}\r\n\r\n          \r\n          <div style={{width: '100%', height: '100%', border: '3px solid #e74c3c', borderRadius: '8px'}}>\r\n            <svg ref={svgRef}></svg>\r\n            <div style={{\r\n              position: 'absolute',\r\n              height: '80px',\r\n              width: '200px',\r\n              top: '100px',\r\n              left: '20px',\r\n              background: 'rgba(0, 0, 0, 0.9)',\r\n              padding: '10px',\r\n              borderRadius: '8px',\r\n              fontSize: '16px',\r\n              color: '#e0e0e0',\r\n              display: 'flex', flexDirection: 'column',\r\n            }}>\r\n              <label htmlFor=\"weaponTypeSelect\" style={{ display: 'block', marginBottom: '10px',}}>Select Weapon Type</label>\r\n              <select\r\n                id=\"weaponTypeSelect\"\r\n                onChange={e => setSelectedWeaponType(e.target.value)}\r\n                value={selectedWeaponType}\r\n                aria-label=\"Select Weapon Type\"\r\n                style={{\r\n                  padding: '6px 10px',\r\n                  width: '180px',\r\n                  color: '#e0e0e0',\r\n                  backgroundColor: 'black',\r\n                  borderRadius: '8px',\r\n                  fontSize: '16px',\r\n                }}\r\n              >\r\n                {weaponTypes.map(type => (\r\n                  <option key={type} value={type}>{type}</option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          </div>\r\n          \r\n          <div style={{\r\n          position: 'absolute', // Change to absolute to position it within the map container\r\n          bottom: '10px', // Adjust as needed to create space from the bottom border\r\n          left: '10px',\r\n          backgroundColor: '',\r\n          width: '225px',\r\n          height: '200px',\r\n          overflow: 'hidden',\r\n        }}>\r\n          <svg ref={pieChartRef} style={{ width: '100%', height: '100%'}}></svg>\r\n        </div>\r\n          \r\n          {/* Tooltip */}\r\n          {tooltip.visible && (\r\n            <div\r\n              style={{\r\n                position: 'absolute',\r\n                top: tooltip.y,\r\n                left: tooltip.x,\r\n                backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n                color: '#e0e0e0',\r\n                padding: '12px',\r\n                borderRadius: '8px',\r\n                boxShadow: '0 4px 12px rgba(0, 0, 0, 0.3)',\r\n                fontSize: '16px',\r\n                pointerEvents: 'none',\r\n                transition: 'opacity 0.3s ease',\r\n                opacity: tooltip.visible ? 1 : 0,\r\n                zIndex: 10,\r\n                whiteSpace: 'nowrap',\r\n                width: 'auto',\r\n                height: 'auto',\r\n              }}\r\n            >\r\n              {tooltip.content}\r\n            </div>\r\n          )}\r\n\r\n          {/* Modal */}\r\n          {modalData && (\r\n            <div\r\n              className=\"modal\"\r\n              style={{\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100vw',\r\n                height: '100vh',\r\n                backgroundColor: 'rgba(0,0,0,0.5)',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                zIndex: 1000,\r\n              }}\r\n              onClick={closeModal}\r\n            >\r\n              <div\r\n                style={{\r\n                  backgroundColor: '#fff',\r\n                  padding: '20px',\r\n                  borderRadius: '8px',\r\n                  maxWidth: '600px',\r\n                  width: '90%',\r\n                  maxHeight: '80%',\r\n                  overflowY: 'auto',\r\n                  position: 'relative',\r\n                }}\r\n                onClick={(e) => e.stopPropagation()} // Prevent click from closing modal when clicking inside\r\n              >\r\n                <button\r\n                  onClick={closeModal}\r\n                  style={{\r\n                    position: 'absolute',\r\n                    top: '10px',\r\n                    right: '10px',\r\n                    background: 'none',\r\n                    border: 'none',\r\n                    fontSize: '18px',\r\n                    cursor: 'pointer',\r\n                    color: 'black', // Ensure close button text is black\r\n                  }}\r\n                  aria-label=\"Close modal\"\r\n                >\r\n                  &times;\r\n                </button>\r\n                \r\n                <p style={{ color: 'black' }}><strong>Country:</strong> {modalData.country}</p>\r\n                <p style={{ color: 'black' }}><strong>Year:</strong> {modalData.year}</p>\r\n                {selectedWeaponType === \"All\" ? (\r\n                  <>                    \r\n                    <table style={{ width: '100%', borderCollapse: 'collapse', color: 'black' }}>\r\n                      <thead>\r\n                        <tr>\r\n                          <th style={{ border: '1px solid #ddd', padding: '8px', color: 'black' }}>Weapon Type</th>\r\n                          <th style={{ border: '1px solid #ddd', padding: '8px', color: 'black' }}>Supplier</th>\r\n                          <th style={{ border: '1px solid #ddd', padding: '8px', color: 'black' }}>Quantity</th>\r\n                          <th style={{ border: '1px solid #ddd', padding: '8px', color: 'black' }}>Status</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {Object.entries(modalData.data).map(([wt, data]) => (\r\n                          <tr key={wt}>\r\n                            <td style={{ border: '1px solid #ddd', padding: '8px', color: 'black' }}>{wt}</td>\r\n                            <td style={{ border: '1px solid #ddd', padding: '8px', color: 'black' }}>{data.suppliers}</td>\r\n                            <td style={{ border: '1px solid #ddd', padding: '8px', color: 'black' }}>{data.quantity}</td>\r\n                            <td style={{ border: '1px solid #ddd', padding: '8px', color: 'black' }}>{data.status}</td>\r\n                          </tr>\r\n                        ))}\r\n                      </tbody>\r\n                    </table>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <p style={{ color: 'black' }}><strong>Weapon Type:</strong> {modalData.weaponType}</p>\r\n                    <p style={{ color: 'black' }}><strong>Supplier:</strong> {modalData.data.suppliers}</p>\r\n                    <p style={{ color: 'black' }}><strong>Quantity:</strong> {modalData.data.quantity} units</p>\r\n                    <p style={{ color: 'black' }}><strong>Status:</strong> {modalData.data.status}</p>\r\n                  </>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n\r\n      {/* Error Handling: If no data for default selections */}\r\n      {error && !loading && (\r\n        <div style={{ textAlign: 'center', marginTop: '50px', color: 'red' }}>\r\n          <p>{error}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChoroplethMap;\r\n","import React, { useRef, useEffect, useState, useMemo } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst ZoomableCirclePacking = () => {\r\n  const svgRef = useRef();\r\n  const [tooltip, setTooltip] = useState({ visible: false, x: 0, y: 0, content: null });\r\n  const [data, setData] = useState(null);\r\n  const [selectedYearIndex, setSelectedYearIndex] = useState(0);\r\n  const [availableYears, setAvailableYears] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  const width = 1000;\r\n  const height = 600;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(\r\n          '/data/processed/processed_weapon_transfer_by_category.json'\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n        const jsonData = await response.json();\r\n        setData(jsonData);\r\n\r\n        // Extract unique years and set availableYears state\r\n        const years = Array.from(\r\n          new Set(\r\n            Object.values(jsonData.Exports).flatMap((countryData) =>\r\n              countryData.flatMap((category) => Object.keys(category).filter(key => !isNaN(key)))\r\n            )\r\n          )\r\n        ).sort((a, b) => a - b);\r\n        setAvailableYears(years); // Ensure available years are set for the slider\r\n        setSelectedYearIndex(0);  // Reset selectedYearIndex to 0\r\n        \r\n        // Set default year to the latest year\r\n        const defaultYearIndex = years.length - 1; // Assuming the latest year\r\n        setSelectedYearIndex(defaultYearIndex);\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setError('Failed to load data. Please try again later.');\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Color scale for countries\r\n  const countryColorScale = useMemo(() => {\r\n  return data\r\n    ? d3\r\n        .scaleOrdinal()\r\n        .domain(['United States', 'Russia', 'China'])\r\n        .range(['#4682B4', '#DC143C', '#FFDB58'])\r\n        .unknown('#CCCCCC') // Fallback color for other countries\r\n    : null;\r\n}, [data]);\r\n\r\n  // Separate color scale for weapon categories\r\n  const categoryColorScale = useMemo(() => {\r\n    const allCategories = data\r\n      ? Object.values(data.Exports).flatMap((countryData) =>\r\n          countryData.map((category) => category['Unnamed: 1'])\r\n        )\r\n      : [];\r\n    return d3.scaleOrdinal(d3.schemePaired).domain(allCategories);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (!data || availableYears.length === 0 || !countryColorScale || !categoryColorScale) return;\r\n\r\n    const selectedYear = availableYears[selectedYearIndex];\r\n\r\n    const yearData = {\r\n      name: 'Weapon Transfers by Country',\r\n      children: Object.entries(data.Exports).map(([country, categories]) => ({\r\n        name: country,\r\n        children: categories\r\n          .map((category) => ({\r\n            name: category['Unnamed: 1'],\r\n            value: category[selectedYear] || 0,\r\n          }))\r\n          .filter((category) => category.value > 0),\r\n      })).filter(country => country.children.length > 0),\r\n    };\r\n\r\n    const svg = d3\r\n      .select(svgRef.current)\r\n      .attr('viewBox', `0 0 ${width} ${height}`)\r\n      .style('background', 'transparent')\r\n      .style('cursor', 'pointer');\r\n\r\n    svg.selectAll('*').remove();\r\n\r\n    const root = d3\r\n      .hierarchy(yearData)\r\n      .sum((d) => d.value || 0)\r\n      .sort((a, b) => b.value - a.value);\r\n\r\n    const pack = d3.pack().size([width - 10, height - 10]).padding(10);\r\n    pack(root);\r\n\r\n    let focus = root;\r\n    let view;\r\n\r\n    const zoomTo = (v) => {\r\n      const k = width / v[2];\r\n      view = v;\r\n      node.attr(\r\n        'transform',\r\n        (d) =>\r\n          `translate(${(d.x - v[0]) * k + width / 2}, ${\r\n            (d.y - v[1]) * k + height / 2\r\n          })`\r\n      );\r\n      node.select('circle').attr('r', (d) => d.r * k);\r\n      node.selectAll('text')\r\n        .attr('fontSize', (d) => Math.max(10, (d.r * k) / 4));\r\n    };\r\n\r\n    const zoom = (event, d) => {\r\n      if (!d) return;\r\n      focus = d;\r\n      const transition = svg\r\n        .transition()\r\n        .duration(750)\r\n        .tween('zoom', () => {\r\n          const i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2.75]);\r\n          return (t) => zoomTo(i(t));\r\n        });\r\n    };\r\n\r\n    const node = svg\r\n      .append('g')\r\n      .attr(\"transform\", \"translate(0, -20)\")\r\n      .selectAll('g')\r\n      .data(root.descendants())\r\n      .join('g')\r\n      .attr('transform', (d) => `translate(${d.x},${d.y})`);\r\n\r\n      node\r\n      .append('circle')\r\n      .attr('fill', (d) => {\r\n        if (d.depth === 1) return countryColorScale(d.data.name);\r\n        if (d.depth === 2) return categoryColorScale(d.data.name);\r\n        return '#ccc';\r\n      })\r\n      .attr('fill-opacity', (d) => (d.depth === 1 || d.depth === 2 ? 1 : 0.0))\r\n      .attr('stroke', 'none')\r\n      .attr('stroke-width', (d) => (d.depth === 1 || d.depth === 2 ? 2 : 0.2))\r\n      .attr('r', (d) => d.r)\r\n      .style('transition', 'all 0.2s ease')\r\n      .on('mouseover', (event, d) => {\r\n        if (!d || !d.data || d.depth === 0) return;  // Ignore background hover\r\n      \r\n        const country = d.depth === 1 ? d.data.name : d.parent && d.parent.data ? d.parent.data.name : 'N/A';\r\n        const weaponType = d.depth === 2 ? d.data.name : 'N/A';  // Show weapon type only when depth = 2\r\n        const quantity = d.value ? d.value.toLocaleString() : 'N/A';\r\n      \r\n        setTooltip({\r\n          visible: true,\r\n          x: event.clientX + 10,\r\n          y: event.clientY - 10,\r\n          content: (\r\n            <div>\r\n              <strong>{country}</strong>\r\n              {d.depth === 2 && <br />}  {/* Add a line break only if depth = 2 */}\r\n              {d.depth === 2 && `Type: ${weaponType}`}\r\n              <br />\r\n              Quantity: {quantity}\r\n            </div>\r\n          )\r\n        });\r\n      })      \r\n      .on('mousemove', (event) => {\r\n        setTooltip(prev => ({ ...prev, x: event.clientX + 10, y: event.clientY - 10 }));\r\n      })\r\n      .on('mouseout', () => setTooltip({ visible: false, x: 0, y: 0, content: null }))\r\n      .on('click', (event, d) => {\r\n        if (focus !== d) {\r\n          zoom(event, d);\r\n          event.stopPropagation();\r\n        }\r\n      });\r\n\r\n      node\r\n  .append('g')  // Create a group to hold both rect and text\r\n  .each(function(d) {\r\n    const g = d3.select(this);\r\n\r\n    // Only proceed if the text is not empty\r\n    const textContent = d.depth === 2 ? d.data.name : '';\r\n\r\n    if (textContent) {  // Check if textContent is non-empty\r\n      // Add the text first so we can get its size\r\n      const textElement = g.append('text')\r\n        .attr('textAnchor', 'middle')\r\n        .attr('dy', '.3em')\r\n        .style('pointer-events', 'none')\r\n        .style('fill', '#e0e0e0')  // Change the text fill to e0e0e0\r\n        .style('font-weight', 'bold')\r\n        .style('font-size', (d) => `${Math.max(12, d.r / 4)}px`)\r\n        .text(textContent);\r\n\r\n      // Get the bounding box of the text to calculate the required rect size\r\n      const bbox = textElement.node().getBBox();\r\n\r\n      // Add a background rectangle with rounded corners\r\n      g.insert('rect', 'text')  // Insert the rect below the text\r\n        .attr('x', bbox.x - 5)  // Add some padding around the text\r\n        .attr('y', bbox.y - 5)\r\n        .attr('width', bbox.width + 10)  // Add padding to the width and height\r\n        .attr('height', bbox.height + 10)\r\n        .attr('rx', 5)  // Rounded corners\r\n        .attr('ry', 5)\r\n        .style('fill', 'rgba(0, 0, 0, 0.7)')  // Opaque black background\r\n        .style('stroke', 'none')  // No border\r\n        .style('pointer-events', 'none');  // Prevent the rect from interacting with mouse events\r\n    }\r\n  });\r\n\r\n    zoomTo([root.x, root.y, root.r * 2.75]);\r\n\r\n    svg.on('click', () => zoom(null, root));\r\n\r\n    return () => {\r\n\r\n    };\r\n  }, [data, selectedYearIndex, availableYears, countryColorScale, categoryColorScale]);\r\n\r\n  const handleSliderChange = (e) => {\r\n    setSelectedYearIndex(Number(e.target.value));\r\n  };\r\n\r\n\r\n  return (\r\n    <div style={{ position: 'relative', width: '100%', height: 'auto'}}>\r\n      <h3 style={{\r\n          textAlign: 'center',\r\n          fontSize: '24px',\r\n          color: '#e74c3c',\r\n          paddingTop: '20px',\r\n        }}>\r\n          Weapon Transfers by Category {availableYears[selectedYearIndex]}\r\n        </h3>\r\n      {error && <p style={{color: '#e74c3c', textAlign: 'center',}}>{error}</p>}\r\n      {!error && !data && <p style={{textAlign: 'center', color: '#e0e0e0',}}>Loading...</p>}\r\n      {!error && data && availableYears.length > 0 && (\r\n        <>\r\n          <input\r\n              type=\"range\"\r\n              id=\"year-slider\"\r\n              min=\"0\"\r\n              max={availableYears.length - 1}\r\n              value={selectedYearIndex}\r\n              onChange={handleSliderChange}\r\n              style={{\r\n                width: '80%',\r\n                appearance: 'none',\r\n                height: '8px',\r\n                backgroundColor: 'gray',\r\n                borderRadius: '5px',\r\n                outline: 'none',\r\n                margin: '20px auto 10px',\r\n                display: 'block',\r\n                accentColor: '#e74c3c',\r\n              }}\r\n            />\r\n\r\n          <div style={{width: '100%', border: '3px solid #e74c3c', borderRadius: '8px'}}>\r\n            <svg ref={svgRef}></svg>\r\n            {tooltip.visible && (\r\n              <div style={{\r\n                position: 'fixed',\r\n                top: tooltip.y,\r\n                left: tooltip.x,\r\n                backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n                color: '#e0e0e0',\r\n                padding: '12px',\r\n                borderRadius: '8px',\r\n                pointerEvents: 'none',\r\n                transform: 'translate(-50%, -100%)',\r\n                whiteSpace: 'nowrap',\r\n                lineHeight: '1.6',\r\n                fontSize: '16px',\r\n                zIndex: 1000\r\n              }}>\r\n                {tooltip.content}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ZoomableCirclePacking;\r\n","import React, { useState } from 'react';\r\nimport ChoroplethMap from './graphs/005_WeaponTypeChoroplethMap';\r\nimport ZoomableCirclePacking from './graphs/005_WeaponTypeZCP';\r\n\r\nconst emergingThreats = () => {\r\n  return (\r\n    <section id=\"005\">\r\n      <p className=\"custom-title\" style={{ cssText: 'margin-top: 0' }}>\r\n        Preparing Allies for Emerging Threats\r\n      </p>\r\n\r\n      <p className=\"custom-paragraph\">\r\n        <span style={{ color: '#4682B4', fontWeight: 'bold' }}>The United States</span> strengthens regional defense by empowering allies, reducing the need for an extensive US military presence. Equipped with advanced weaponry from the US, allies like <span style={{ color: '#D2B48C', fontWeight: 'bold' }}>Taiwan</span>, <span style={{ color: '#D2B48C', fontWeight: 'bold' }}>Japan</span>, <span style={{ color: '#D2B48C', fontWeight: 'bold' }}>South Korea</span>, and the <span style={{ color: '#D2B48C', fontWeight: 'bold' }}>Philippines</span> bolster their capabilities to counter regional threats independently. This <em style={{ color: 'orange', fontWeight: 'bold' }}>Building Partner Capacity</em> strategy has become even more significant amid rising South China Sea tensions, where US support to countries like the <span style={{ color: '#D2B48C', fontWeight: 'bold' }}>Philippines</span>, <span style={{ color: '#D2B48C', fontWeight: 'bold' }}>Malaysia</span>, <span style={{ color: '#D2B48C', fontWeight: 'bold' }}>Brunei</span>, and <span style={{ color: '#D2B48C', fontWeight: 'bold' }}>Indonesia</span> is crucial in deterring China's territorial ambitions.\r\n      </p>\r\n\r\n      <p className=\"custom-title\">\r\n        Exploring the Arms Trade Dynamic\r\n      </p>\r\n\r\n      <p className=\"custom-paragraph\">\r\n        To explore this dynamic, use the Choropleth Map and Pie Chart to examine key years when South China Sea tensions escalated. By selecting years like <em style={{ color: 'orange', fontWeight: 'bold' }}>2010-2020</em>, you can observe a noticeable rise in US arms imports by Asian allies and an increase in total arms trade in the Asia-Oceania region. This interactive view reveals the correlation between heightened regional disputes and the strategic arms support provided by the <span style={{ color: '#4682B4', fontWeight: 'bold' }}>US</span>\r\n      </p>\r\n\r\n      <div className=\"chart-container\" style={{ width: '80%' }}>\r\n        <ChoroplethMap />\r\n      </div>\r\n\r\n      <p className=\"custom-title\">\r\n        Breakdown of Weapon Transfers by Category \r\n      </p>\r\n\r\n      <p className=\"custom-paragraph\">\r\n        Missiles, aircraft, and other advanced weaponry dominate US exports, reflecting regional priorities and threats. This breakdown shows how arms transfers align with geopolitical objectives.\r\n      </p>\r\n      \r\n      <ul>\r\n        <li>The <span style={{ color: \"#4682B4\" }}>United States</span> supports countries in <span style={{ fontStyle: \"italic\" }}>Europe, the Middle East, and Asia-Pacific</span>, reinforcing a defense line against rivals.</li><br/>\r\n        <li><span style={{ color: \"#DC143C\" }}>Russia </span> supplies nations in <span style={{ fontStyle: \"italic\" }}>Eastern Europe and Central Asia</span> to counter NATO's reach.</li><br/>\r\n        <li><span style={{ color: \"#FFD700\" }}>China</span> arms countries in <span style={{ fontStyle: \"italic\" }}>Southeast Asia, Africa, and South Asia</span>, expanding its foothold in resource-rich areas.</li><br/>\r\n        <li>Countries like <span style={{ color: \"#D2B48C\" }}>India</span> illustrate a multilateral approach, balancing relationships with the US, Russia, and others.</li><br/>\r\n      </ul> \r\n\r\n      <p className=\"custom-paragraph\">\r\n        Through this network, arms transfers reveal interdependent alliances, bolstered influence, and efforts to contain rivals.\r\n      </p>\r\n\r\n      <div className=\"chart-container\" style={{ width: '80%' }}>\r\n        <ZoomableCirclePacking />\r\n      </div>\r\n\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default emergingThreats;\r\n","export default function(x) {\n  return x;\n}\n","import reverse from \"./reverse.js\";\nimport transform from \"./transform.js\";\n\nexport default function(topology, o) {\n  if (typeof o === \"string\") o = topology.objects[o];\n  return o.type === \"GeometryCollection\"\n      ? {type: \"FeatureCollection\", features: o.geometries.map(function(o) { return feature(topology, o); })}\n      : feature(topology, o);\n}\n\nfunction feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: \"Feature\", properties: properties, geometry: geometry}\n      : bbox == null ? {type: \"Feature\", id: id, properties: properties, geometry: geometry}\n      : {type: \"Feature\", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nexport function object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case \"GeometryCollection\": return {type: type, geometries: o.geometries.map(geometry)};\n      case \"Point\": coordinates = point(o.coordinates); break;\n      case \"MultiPoint\": coordinates = o.coordinates.map(point); break;\n      case \"LineString\": coordinates = line(o.arcs); break;\n      case \"MultiLineString\": coordinates = o.arcs.map(line); break;\n      case \"Polygon\": coordinates = polygon(o.arcs); break;\n      case \"MultiPolygon\": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n","import identity from \"./identity.js\";\n\nexport default function(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n","export default function(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n"],"names":["svgRef","useRef","pieChartRef","_useState2","_slicedToArray","useState","visible","x","y","content","tooltip","setTooltip","_useState4","modalData","setModalData","_useState6","countryData","setCountryData","_useState8","countries","setCountries","_useState10","selectedYear","setSelectedYear","_useState12","selectedWeaponType","setSelectedWeaponType","_useState14","weaponTypes","setWeaponTypes","_useState16","setMaxQuantities","_useState18","loading","setLoading","_useState20","error","setError","_useState22","minYear","_useState24","maxYear","_useState26","setTotalArmsTrade","dataUrl","countryNameMapping","useEffect","Promise","all","d3","d","year","quantity","isNaN","recipients","suppliers","Math","round","weaponDescription","status","then","_ref","_ref2","worldDataRaw","armsDataRaw","filter","row","countriesData","topojson","objects","features","processedData","uniqueWeaponTypes","Set","tempMaxQuantities","forEach","country","weaponType","trim","add","weaponTypesArray","concat","Array","from","wt","undefined","sort","map","a","b","length","includes","console","Object","keys","drawMap","radius","min","svg","current","attr","selectAll","remove","data","customOrder","filteredData","regionArmsData","_ref3","_ref4","region","armsTrade","indexOf","totalArmsTrade","colorMap","colorScale","domain","range","pie","startAngle","endAngle","PI","value","arc","outerRadius","innerRadius","labelArc","append","width","height","enter","on","event","regionPercentage","toFixed","container","getBoundingClientRect","offsetX","clientX","left","offsetY","clientY","top","React","toLocaleString","prev","_objectSpread","currentTarget","transition","duration","_labelArc$centroid2","centroid","rotation","style","text","armsData","maxQuantity","sizeScale","projection","center","scale","translate","path","_armsData$country","properties","name","yearData","values","reduce","acc","curr","log","_armsData$d$propertie","call","scaleExtent","g","transform","select","empty","handleTooltipContent","totalQuantity","lineHeight","fontSize","fontWeight","color","logColorScale","_armsData$country2","_armsData$country3","_armsData$country4","_armsData$country5","_armsData$country6","_armsData$country7","_armsData$country8","_armsData$country9","_armsData$country10","_armsData$country11","_armsData$country12","_armsData$country13","closeModal","position","textAlign","paddingTop","className","type","id","max","step","onChange","e","parseInt","target","appearance","backgroundColor","borderRadius","outline","margin","display","accentColor","disabled","border","ref","background","padding","flexDirection","htmlFor","marginBottom","key","bottom","overflow","boxShadow","pointerEvents","opacity","zIndex","whiteSpace","alignItems","justifyContent","onClick","maxWidth","maxHeight","overflowY","stopPropagation","right","cursor","borderCollapse","entries","_ref5","_ref6","marginTop","_regeneratorRuntime","t","r","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","h","l","f","s","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","v","defineIteratorMethods","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","reverse","pop","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","isArray","_arrayWithHoles","_iterableToArrayLimit","_arrayLikeToArray","toString","test","_unsupportedIterableToArray","_nonIterableRest","setData","selectedYearIndex","setSelectedYearIndex","availableYears","setAvailableYears","fetchData","_callee","response","jsonData","years","defaultYearIndex","_context","fetch","ok","json","Exports","flatMap","category","t0","arguments","apply","_next","_throw","countryColorScale","useMemo","unknown","categoryColorScale","allCategories","children","root","sum","size","pack","view","focus","zoomTo","k","node","zoom","tween","descendants","join","depth","parent","each","this","textContent","textElement","bbox","getBBox","insert","Number","cssText","ChoroplethMap","fontStyle","ZoomableCirclePacking","topology","geometries","geometry","transformPoint","identity","x0","y0","kx","ky","dx","dy","input","j","output","arcs","points","array","point","line","ring","polygon","coordinates","object"],"sourceRoot":""}