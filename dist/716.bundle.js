"use strict";(self.webpackChunkfinal_project=self.webpackChunkfinal_project||[]).push([[716],{5716:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _002_competition)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 266 modules\nvar src = __webpack_require__(6496);\n// EXTERNAL MODULE: ./node_modules/react-range-slider-input/dist/index.js\nvar dist = __webpack_require__(2136);\n// EXTERNAL MODULE: ./node_modules/react-range-slider-input/dist/style.css\nvar style = __webpack_require__(4579);\n;// ./src/components/graphs/002_ImportExportLinechart.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\n// Update paths to use `process.env.PUBLIC_URL` for compatibility with deployment\nvar armsSuppliersDataUrl = "".concat(process.env.PUBLIC_URL, "/data/processed/processed_arms_suppliers.csv");\nvar armsRecipientsDataUrl = "".concat(process.env.PUBLIC_URL, "/data/processed/processed_arms_recipients.csv");\nvar ImportExportLinechart = function ImportExportLinechart() {\n  var svgRef = (0,react.useRef)();\n  var width = 800;\n  var height = 400;\n  var margin = {\n    top: 60,\n    right: 100,\n    bottom: 30,\n    left: 60\n  };\n  var _useState = (0,react.useState)([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = (0,react.useState)([\'India\', \'China\']),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedCountries = _useState4[0],\n    setSelectedCountries = _useState4[1];\n  var _useState5 = (0,react.useState)([1950, 2023]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    yearRange = _useState6[0],\n    setYearRange = _useState6[1];\n  var _useState7 = (0,react.useState)(\'export\'),\n    _useState8 = _slicedToArray(_useState7, 2),\n    tradeType = _useState8[0],\n    setTradeType = _useState8[1];\n  var _useState9 = (0,react.useState)(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    loading = _useState10[0],\n    setLoading = _useState10[1];\n  (0,react.useEffect)(function () {\n    var dataUrl = tradeType === \'import\' ? armsRecipientsDataUrl : armsSuppliersDataUrl;\n    var countryKey = tradeType === \'import\' ? \'Recipient\' : \'supplier\';\n    setLoading(true);\n    src/* csv */.fu7(dataUrl).then(function (rawData) {\n      var yearColumns = Object.keys(rawData[0]).filter(function (col) {\n        return !isNaN(col);\n      });\n      var countryTotals = rawData.map(function (row) {\n        return {\n          country: row[countryKey],\n          total: yearColumns.reduce(function (sum, year) {\n            return sum + (+row[year] || 0);\n          }, 0)\n        };\n      });\n      var top10Countries = countryTotals.sort(function (a, b) {\n        return b.total - a.total;\n      }).slice(0, 10).map(function (d) {\n        return d.country;\n      });\n      var processedData = rawData.filter(function (row) {\n        return top10Countries.includes(row[countryKey]);\n      }).map(function (row) {\n        return {\n          country: row[countryKey],\n          values: yearColumns.map(function (year) {\n            return {\n              year: +year,\n              value: (+row[year] || 0) / 1000\n            };\n          })\n        };\n      });\n      setData(processedData);\n\n      // Set `selectedCountries` based on `tradeType`\n      if (tradeType === \'export\') {\n        setSelectedCountries([\'United States\', \'China\', \'Russia\'].filter(function (c) {\n          return top10Countries.includes(c);\n        }));\n      } else if (tradeType === \'import\') {\n        setSelectedCountries([\'China\', \'India\'].filter(function (c) {\n          return top10Countries.includes(c);\n        }));\n      }\n      setLoading(false);\n    })["catch"](function (error) {\n      console.error(\'Error loading or processing data:\', error);\n      setLoading(false);\n    });\n  }, [tradeType]);\n  (0,react.useEffect)(function () {\n    if (data.length === 0) return;\n    var svg = src/* select */.Ltv(svgRef.current).attr(\'viewBox\', "0 0 ".concat(width, " ").concat(height)).style(\'border-radius\', \'8px\');\n    svg.selectAll(\'*\').remove();\n\n    // Title\n    svg.append(\'text\').attr(\'x\', width / 2).attr(\'y\', 20).attr(\'text-anchor\', \'middle\').style(\'font-size\', \'20px\').style(\'font-weight\', \'bold\').style(\'fill\', \'#e0e0e0\').text("Arms ".concat(tradeType === \'import\' ? \'Imports\' : \'Exports\', " by Country"));\n\n    // Y-axis Label\n    svg.append(\'text\').attr(\'transform\', \'rotate(-90)\').attr(\'x\', -height / 2).attr(\'y\', 0).attr(\'dy\', \'1em\').style(\'text-anchor\', \'middle\').style(\'font-size\', \'16px\').style(\'fill\', \'#e0e0e0\').style(\'font-weight\', \'bold\').text("Value (Billion USD)");\n\n    // Tooltip and vertical line\n    var tooltip = src/* select */.Ltv(\'body\').append(\'div\').attr(\'class\', \'tooltip\').style(\'position\', \'absolute\').style(\'padding\', \'12px\').style(\'background\', \'rgba(0, 0, 0, 0.8)\').style(\'color\', \'#e0e0e0\').style(\'border-radius\', \'8px\').style(\'font-size\', \'16px\').style(\'display\', \'none\');\n    var verticalLine = svg.append(\'line\').attr(\'y1\', margin.top).attr(\'y2\', height - margin.bottom).attr(\'stroke\', \'#aaa\').attr(\'stroke-width\', 1).attr(\'stroke-dasharray\', \'4 4\').style(\'display\', \'none\');\n\n    // Filter data based on selected countries and year range\n    var filteredData = data.filter(function (d) {\n      return selectedCountries.includes(d.country);\n    }).map(function (d) {\n      return _objectSpread(_objectSpread({}, d), {}, {\n        values: d.values.filter(function (v) {\n          return v.year >= yearRange[0] && v.year <= yearRange[1];\n        })\n      });\n    });\n\n    // Define scales\n    var xScale = src/* scaleLinear */.m4Y().domain(yearRange).range([margin.left, width - margin.right - 20]);\n    var yMax = src/* max */.T9B(filteredData, function (d) {\n      return src/* max */.T9B(d.values, function (v) {\n        return v.value;\n      });\n    }) || 0;\n    var yScale = src/* scaleLinear */.m4Y().domain([0, yMax]).range([height - margin.bottom, margin.top]);\n    var color = src/* scaleOrdinal */.UMr(src/* schemeCategory10 */.t55).domain(selectedCountries);\n    var line = src/* line */.n8j().x(function (d) {\n      return xScale(d.year);\n    }).y(function (d) {\n      return yScale(d.value);\n    });\n\n    // X and Y Axes\n    svg.append(\'g\').attr(\'transform\', "translate(0, ".concat(height - margin.bottom, ")")).call(src/* axisBottom */.l78(xScale).tickFormat(src/* format */.GPZ(\'d\'))).style(\'font-size\', \'15px\').style(\'fill\', \'#e0e0e0\');\n    svg.append(\'g\').attr(\'transform\', "translate(".concat(margin.left, ", 0)")).call(src/* axisLeft */.V4s(yScale).tickFormat(function (d) {\n      return "".concat(d, "B");\n    })).style(\'font-size\', \'15px\').style(\'fill\', \'#e0e0e0\');\n\n    // Draw lines\n    svg.selectAll(\'.line\').data(filteredData).join(\'path\').attr(\'class\', \'line\').attr(\'fill\', \'none\').attr(\'stroke\', function (d) {\n      if (d.country === \'United States\') return \'#4682B4\'; // Color for United States\n      if (d.country === \'China\') return \'#FFDB58\'; // Color for China\n      if (d.country === \'Russia\') return \'#DC143C\'; // Color for Russia\n      return color(d.country); // Default color scale for other countries\n    }).attr(\'stroke-width\', 3.25).attr(\'d\', function (d) {\n      return line(d.values);\n    });\n\n    // Draw dots\n    svg.selectAll(\'.dot\').data(filteredData.flatMap(function (d) {\n      return d.values.map(function (v) {\n        return _objectSpread(_objectSpread({}, v), {}, {\n          country: d.country\n        });\n      });\n    })).join(\'circle\').attr(\'class\', \'dot\').attr(\'cx\', function (d) {\n      return xScale(d.year);\n    }).attr(\'cy\', function (d) {\n      return yScale(d.value);\n    }).attr(\'r\', 5.5).attr(\'fill\', function (d) {\n      if (d.country === \'United States\') return \'#4682B4\'; // Color for United States\n      if (d.country === \'China\') return \'#FFDB58\'; // Color for China\n      if (d.country === \'Russia\') return \'#DC143C\'; // Color for Russia\n      return color(d.country); // Default color scale for other countries\n    });\n\n    // Cleanup on unmount\n    return function () {\n      tooltip.remove();\n      verticalLine.remove();\n    };\n  }, [data, selectedCountries, yearRange, tradeType]);\n  var handleCountryToggle = function handleCountryToggle(country) {\n    setSelectedCountries(function (prev) {\n      return prev.includes(country) ? prev.filter(function (c) {\n        return c !== country;\n      }) : [].concat(_toConsumableArray(prev), [country]);\n    });\n  };\n  var handleTradeTypeChange = function handleTradeTypeChange(event) {\n    var newTradeType = event.target.value;\n    setTradeType(newTradeType);\n    if (newTradeType === \'export\') {\n      setSelectedCountries([\'United States\', \'China\', \'Russia\']);\n    } else if (newTradeType === \'import\') {\n      setSelectedCountries([\'China\', \'India\']);\n    }\n  };\n  var resetSelections = function resetSelections() {\n    setTradeType(\'export\');\n    setYearRange([1950, 2023]);\n    setSelectedCountries([\'United States\', \'China\', \'Russia\']);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      display: \'flex\',\n      alignItems: \'flex-start\',\n      padding: \'20px\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    style: {\n      flex: \'1\'\n    }\n  }, /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef,\n    width: width,\n    height: height\n  })), /*#__PURE__*/react.createElement("div", {\n    style: {\n      marginLeft: \'20px\',\n      width: \'250px\',\n      display: \'flex\',\n      flexDirection: \'column\',\n      color: \'#e6e6e6\'\n    }\n  }));\n};\n/* harmony default export */ const _002_ImportExportLinechart = (ImportExportLinechart);\n;// ./src/components/002_competition.js\n\n\nvar competition = function competition() {\n  return /*#__PURE__*/react.createElement("section", {\n    id: "002"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Competition in Strategic Regions"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "The global arms trade has shifted from a US-Soviet rivalry to a multipolar competition, with ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), " joining the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " as key players. Each nation\\u2019s influence is shaped by historical events, alliances, and economic factors, impacting global security dynamics.", /*#__PURE__*/react.createElement("br", null)), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#e74c3c"\n    }\n  }, "Cold War Era (1947-1991)"), " The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Soviet Union"), " dominated arms exports, each supporting allies to extend ideological influence."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#e74c3c"\n    }\n  }, "Post-Cold War Shift (1991-2000)"), " With the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Soviet Union\\u2019s"), " collapse, the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " emerged as the top arms exporter, backed by a strong economy and stable alliances."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#e74c3c"\n    }\n  }, "Russia\\u2019s Resurgence (Early 2000s)"), " Under Putin, ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " rebuilt its defense industry, regaining clients with affordable options like the S-400."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#e74c3c"\n    }\n  }, "China\\u2019s Rise (2000s-Present)"), " ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), " entered the market, offering affordable alternatives to Western and Russian arms, appealing to regions like Africa and Southeast Asia. The Belt and Road initiative and a non-interference policy further bolstered ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China\\u2019s"), " appeal."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#e74c3c"\n    }\n  }, "China Surpasses Russia (2022)"), " In 2022, ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), " became the second-largest arms exporter as ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " faced challenges due to the Ukraine conflict and Western sanctions."), /*#__PURE__*/react.createElement("br", null)), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_002_ImportExportLinechart, null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Global Implications"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "The arms trade now includes three key exporters with distinct strategies:"), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, "The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " leads in high-tech systems for wealthy allies."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " faces limitations due to sanctions and internal demands."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFDB58"\n    }\n  }, "China"), " offers affordable, flexible options to budget-conscious nations. Its rapid rise signals ambitions to reshape global power dynamics economically and militarily, adding complexity to global security."), /*#__PURE__*/react.createElement("br", null)));\n};\n/* harmony default export */ const _002_competition = (competition);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5716\n')}}]);