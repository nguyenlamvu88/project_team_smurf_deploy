"use strict";(self.webpackChunkfinal_project=self.webpackChunkfinal_project||[]).push([[640],{6640:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _001_intro)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 266 modules\nvar src = __webpack_require__(6496);\n// EXTERNAL MODULE: ./node_modules/topojson-client/src/feature.js + 3 modules\nvar feature = __webpack_require__(1796);\n;// ./src/components/graphs/001_DefenseExpenditureMap.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n// Update file paths to use `process.env.PUBLIC_URL` for compatibility\nvar countriesJsonPath = "".concat(process.env.PUBLIC_URL, "/countries-110m.json");\nvar defenseDataPath = "".concat(process.env.PUBLIC_URL, "/data/processed/processed_defense_expenditure_by_country.csv");\nvar DefenseExpenditureMap = function DefenseExpenditureMap() {\n  var svgRef = (0,react.useRef)();\n  var lineChartRef = (0,react.useRef)();\n  var _useState = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: null\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    tooltip = _useState2[0],\n    setTooltip = _useState2[1];\n  var _useState3 = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: null\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    lineTooltip = _useState4[0],\n    setLineTooltip = _useState4[1];\n  var _useState5 = (0,react.useState)({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    countryData = _useState6[0],\n    setCountryData = _useState6[1];\n  var _useState7 = (0,react.useState)([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    countries = _useState8[0],\n    setCountries = _useState8[1];\n  var _useState9 = (0,react.useState)(1960),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedYear = _useState10[0],\n    setSelectedYear = _useState10[1];\n  var _useState11 = (0,react.useState)(true),\n    _useState12 = _slicedToArray(_useState11, 2),\n    loading = _useState12[0],\n    setLoading = _useState12[1];\n  var _useState13 = (0,react.useState)(undefined),\n    _useState14 = _slicedToArray(_useState13, 2),\n    error = _useState14[0],\n    setError = _useState14[1];\n  var minYear = 1960;\n  var maxYear = 2022;\n  var targetCountries = ["United States", "China", "Russia"];\n  var countryNameMapping = {\n    "Bahamas, The": "Bahamas",\n    "Congo, Dem. Rep.": "Democratic Republic of the Congo",\n    "Congo, Rep.": "Republic of the Congo",\n    "Côte d\'Ivoire": "Ivory Coast",\n    "Egypt, Arab Rep.": "Egypt",\n    "Gambia, The": "Gambia",\n    "Hong Kong SAR, China": "Hong Kong",\n    "Iran, Islamic Rep.": "Iran",\n    "Korea, Dem. People\'s Rep.": "North Korea",\n    "Korea, Rep.": "South Korea",\n    "Kyrgyz Republic": "Kyrgyzstan",\n    "Lao PDR": "Laos",\n    "Micronesia, Fed. Sts.": "Federated States of Micronesia",\n    "Russian Federation": "Russia",\n    "Sint Maarten (Dutch part)": "Sint Maarten",\n    "Slovak Republic": "Slovakia",\n    "Syrian Arab Republic": "Syria",\n    "Venezuela, RB": "Venezuela",\n    "Yemen, Rep.": "Yemen",\n    "United States": "United States of America",\n    "Viet Nam": "Vietnam",\n    "Vietnam": "Vietnam",\n    "Turkiye": "Turkey",\n    "West Bank and Gaza": "Palestine",\n    "Brunei Darussalam": "Brunei",\n    "Bolivia": "Bolivia",\n    "Cape Verde": "Cabo Verde",\n    "Czechia": "Czech Republic",\n    "Faroe Islands": "Faroe Islands",\n    "Faeroe Islands": "Faroe Islands",\n    "Macao SAR, China": "Macau",\n    "North Macedonia": "North Macedonia",\n    "Palestinian Territories": "Palestine",\n    "Timor-Leste": "Timor-Leste",\n    "East Timor": "Timor-Leste",\n    "Myanmar": "Myanmar",\n    "Burma": "Myanmar",\n    "Ivory Coast": "Côte d\'Ivoire",\n    "South Sudan": "South Sudan",\n    "Sao Tome and Principe": "São Tomé and Principe",\n    "Eswatini": "Eswatini",\n    "Taiwan": "Taiwan",\n    "Republic of the Congo": "Republic of the Congo",\n    "Democratic Republic of the Congo": "Democratic Republic of the Congo",\n    "Cabo Verde": "Cabo Verde",\n    "North Korea": "North Korea",\n    "South Korea": "South Korea",\n    "Russia": "Russia",\n    "Laos": "Laos",\n    "Macedonia": "North Macedonia"\n  };\n  var parseValue = function parseValue(value) {\n    if (value === "$-") return 0;\n    return parseFloat(value.replace(/[$,]/g, \'\')) || 0;\n  };\n  (0,react.useEffect)(function () {\n    setLoading(true);\n\n    // Update file paths for compatibility\n    Promise.all([src/* json */.Pq9(countriesJsonPath), src/* csv */.fu7(defenseDataPath, function (d) {\n      var parsedData = {\n        Country: d.Country\n      };\n      for (var year = minYear; year <= maxYear; year++) {\n        parsedData[year] = parseValue(d[year]);\n      }\n      return parsedData;\n    })]).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        worldData = _ref2[0],\n        defenseData = _ref2[1];\n      var countriesData = feature/* default */.A(worldData, worldData.objects.countries).features;\n      setCountries(countriesData);\n      var processedData = {};\n      defenseData.forEach(function (row) {\n        var countryName = countryNameMapping[row.Country] || row.Country;\n        processedData[countryName] = row;\n      });\n      setCountryData(processedData);\n      setLoading(false);\n    })["catch"](function (error) {\n      console.error("Error loading data:", error);\n      setError("Failed to load data.");\n      setLoading(false);\n    });\n  }, []);\n  (0,react.useEffect)(function () {\n    if (loading || error || !countries.length || !Object.keys(countryData).length) return;\n    var width = 800;\n    var height = 400;\n    var svg = src/* select */.Ltv(svgRef.current).attr("viewBox", "0 0 ".concat(width, " ").concat(height)).style("width", "100%").style("height", "auto");\n    var projection = src/* geoMercator */.bAh().center([0, 20]).scale(130).translate([width / 2, height / 2]);\n    var path = src/* geoPath */.zFW().projection(projection);\n    var thresholds = [5, 25, 55, 85];\n    var colors = ["#f0d8d8", "#e3a6a6", "#b26464", "#8e2a2a", "#730f0f"];\n    var colorScale = src/* scaleThreshold */.c3b().domain(thresholds).range(colors);\n    svg.selectAll("g.map-group").remove();\n    var g = svg.append("g").attr("class", "map-group");\n    svg.call(src/* zoom */.s_O().scaleExtent([1, 8]).on("zoom", function (event) {\n      g.attr("transform", event.transform);\n    }));\n    g.selectAll("path").data(countries).enter().append("path").attr("d", path).attr("fill", function (d) {\n      var _countryData$country;\n      var country = d.properties.name;\n      var value = (_countryData$country = countryData[country]) === null || _countryData$country === void 0 ? void 0 : _countryData$country[selectedYear];\n      return value > 0 ? colorScale(value) : "#ccc";\n    }).attr("stroke", "#333").on("mouseenter", function (event, d) {\n      var _countryData$country2;\n      var country = d.properties.name;\n      var value = ((_countryData$country2 = countryData[country]) === null || _countryData$country2 === void 0 ? void 0 : _countryData$country2[selectedYear]) || 0;\n      setTooltip({\n        visible: true,\n        x: event.clientX + 10,\n        y: event.clientY + 10,\n        content: "".concat(country, ": $").concat(value.toFixed(2), "B")\n      });\n    }).on("mousemove", function (event) {\n      setTooltip(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          x: event.clientX + 10,\n          y: event.clientY + 10\n        });\n      });\n    }).on("mouseleave", function () {\n      return setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: null\n      });\n    });\n    svg.selectAll("g.legend").remove();\n    var legendX = width - 65;\n    var legendY = height - 110;\n    var legendGroup = svg.append("g").attr("class", "legend").attr("transform", "translate(".concat(legendX, ",").concat(legendY, ")"));\n    legendGroup.append("rect").attr("x", -20).attr("y", -40).attr("rx", 5).attr("ry", 5).attr("width", 80).attr("height", thresholds.length * 20 + 60).style("fill", "black").style("opacity", 0.9).lower();\n    legendGroup.append("text").attr("x", -15).attr("y", -20).text("Billion USD").style("font-size", "10px").style("fill", "#e0e0e0");\n    thresholds.slice().reverse().forEach(function (threshold, i) {\n      legendGroup.append("rect").attr("x", -15).attr("y", i * 20 - 10).attr("width", 20).attr("height", 20).style("fill", colors[thresholds.length - 1 - i]);\n      legendGroup.append("text").attr("x", 15).attr("y", i * 20).text(i === 0 ? "> ".concat(threshold) : "".concat(threshold, " - ").concat(thresholds[thresholds.length - i - 1])).style("font-size", "10px").style("fill", "#e0e0e0");\n    });\n    legendGroup.append("rect").attr("x", -15).attr("y", thresholds.length * 20 - 10).attr("width", 20).attr("height", 20).style("fill", colors[0]);\n    legendGroup.append("text").attr("x", 15).attr("y", thresholds.length * 20).text("< ".concat(thresholds[0])).style("font-size", "9px").style("fill", "white");\n  }, [countries, countryData, selectedYear, loading, error]);\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: "relative",\n      width: "100%"\n    }\n  });\n};\n/* harmony default export */ const _001_DefenseExpenditureMap = (DefenseExpenditureMap);\n;// ./src/components/graphs/001_animatedExportBarChart.js\n\n\n\n// Use `process.env.PUBLIC_URL` for paths to ensure compatibility with GitHub Pages\nvar iconPath = "".concat(process.env.PUBLIC_URL, "/ar15.svg");\nvar armsExportDataPath = "".concat(process.env.PUBLIC_URL, "/data/processed/us_export.csv");\nvar iconValue = 2500;\nvar GunBarChart = function GunBarChart() {\n  var svgRef = (0,react.useRef)();\n  (0,react.useEffect)(function () {\n    var width = 1000;\n    var height = 410;\n    var margin = {\n      top: 40,\n      right: 20,\n      bottom: 50,\n      left: 40\n    };\n    src/* select */.Ltv(svgRef.current).selectAll("*").remove();\n\n    // Load data from the correct path\n    src/* csv */.fu7(armsExportDataPath, src/* autoType */.cGt).then(function (data) {\n      // Ensure data is sorted by year\n      data.sort(function (a, b) {\n        return a.year - b.year;\n      });\n\n      // X and Y scales\n      var xScale = src/* scaleBand */.WH().domain(data.map(function (d) {\n        return d.year;\n      })).range([margin.left, width - margin.right]).padding(0.2);\n      var yScale = src/* scaleLinear */.m4Y().domain([0, 18000]).nice().range([height - margin.bottom, margin.top]);\n\n      // Create SVG container\n      var svg = src/* select */.Ltv(svgRef.current).attr("width", width).attr("height", height).style("background", "").style("border-radius", "8px");\n\n      // X Axis\n      svg.append("g").attr("transform", "translate(0, ".concat(height - margin.bottom, ")")).call(src/* axisBottom */.l78(xScale).tickValues(data.map(function (d) {\n        return d.year;\n      }).filter(function (year) {\n        return year % 10 === 0;\n      })) // Filter years divisible by 10\n      .tickFormat(src/* format */.GPZ("d")) // Format the year as a number\n      ).style("font-size", "15px").style("fill", "#e0e0e0");\n\n      // Y Axis\n      svg.append("g").attr("transform", "translate(".concat(margin.left, ", 0)")).call(src/* axisLeft */.V4s(yScale).ticks(5).tickFormat(function (d) {\n        return "".concat(d / 1000, "B");\n      })).style("font-size", "15px").style("fill", "#e0e0e0");\n\n      // Bars with gun icons\n      data.forEach(function (d, i) {\n        var barGroup = svg.append("g").attr("transform", "translate(".concat(xScale(d.year), ", ").concat(height - margin.bottom, ")"));\n        var iconsCount = Math.floor(d["export"] / iconValue); // Full icons\n        var partialIconValue = d["export"] % iconValue / iconValue; // Fractional part for chopped gun\n        var iconSpacing = 10; // Space between icons\n        var iconSize = 34.5; // Icon size (width and height)\n\n        // Sequential animation delay for each year\n        var yearDelay = i * 40;\n\n        // Append full icons\n        for (var j = 0; j < iconsCount; j++) {\n          barGroup.append("image").attr("xlink:href", iconPath).attr("width", iconSize).attr("height", iconSize).attr("x", xScale.bandwidth() / 2 - iconSize / 2) // Center icon within the bar\n          .attr("y", 0) // Start icon from the top\n          .style("filter", "invert(100%)").style("opacity", 0).transition().delay(yearDelay + j * 20) // Sequentially drop each icon\n          .duration(50).ease(src/* easeBounce */.r_F).attr("y", -(j * (iconSize + iconSpacing)) - iconSize) // Adjust spacing\n          .style("opacity", 1);\n        }\n\n        // Append chopped icon for partial value\n        if (partialIconValue > 0.3) {\n          var partialClipPathId = "clip-".concat(i);\n\n          // Define a clipping path for the chopped icon, crop from the bottom\n          svg.append("clipPath").attr("id", partialClipPathId).append("rect").attr("width", iconSize).attr("height", iconSize * partialIconValue) // Clip height based on the fraction\n          .attr("x", xScale.bandwidth() / 2 - iconSize / 2).attr("y", -(iconsCount * (iconSize + iconSpacing)) - iconSize * partialIconValue); // Adjust y to crop from the bottom\n\n          // Append the chopped icon with clipping\n          barGroup.append("image").attr("xlink:href", iconPath).attr("width", iconSize).attr("height", iconSize).attr("clip-path", "url(#".concat(partialClipPathId, ")")).attr("x", xScale.bandwidth() / 2 - iconSize / 2).attr("y", -(iconsCount * (iconSize + iconSpacing)) - iconSize) // Adjust position to match clip path\n          .style("filter", "invert(100%)").style("opacity", 0).transition().delay(yearDelay + iconsCount * 20) // Add delay after the full icons\n          .duration(50).ease(src/* easeBounce */.r_F).style("opacity", 1);\n        }\n      });\n\n      // Add legend\n      svg.append("g").attr("transform", "translate(".concat(width - margin.right - 120, ", ").concat(margin.top, ")")) // Position of the legend\n      .call(function (g) {\n        g.append("image").attr("xlink:href", iconPath).attr("width", 34.5).attr("height", 50).attr("x", 0).attr("y", 0).style("filter", "invert(100%)").attr("transform", "rotate(90)"); // Rotate 90 degrees clockwise\n\n        g.append("text").attr("x", 16) // Position text next to the icon\n        .attr("y", 16).attr("dy", "0.35em").style("font-size", "16px").style("fill", "#e0e0e0").text(" = $ 2.5B");\n      });\n    });\n  }, []);\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      display: \'relative\',\n      alignItems: \'flex-start\',\n      padding: \'40px\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingBottom: \'20px\'\n    }\n  }, "US Arms Exports By Year"), /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef,\n    style: {\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }));\n};\n/* harmony default export */ const _001_animatedExportBarChart = (GunBarChart);\n;// ./src/components/001_intro.js\n\n\n\nvar intro = function intro() {\n  return /*#__PURE__*/react.createElement("section", {\n    id: "001"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Introduction"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#4682B4\'\n    }\n  }, "United States"), " has strategically leveraged arms exports as a tool to strengthen alliances, deter adversaries, and advance its geopolitical goals. Spanning decades, U.S. arms exports surged during key moments such as the ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\'\n    }\n  }, "Cold War"), ", the ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\'\n    }\n  }, "War on Terror"), ", and recent conflicts like the ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\'\n    }\n  }, "Russia-Ukraine War"), ", shaping global power dynamics. The chart below, illustrating U.S. arms exports in billions, demonstrates how these trades align with major geopolitical events, reflecting their role as an integral part of broader ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\'\n    }\n  }, "geopolitical strategy"), ". More than economic transactions, arms exports function as extensions of diplomacy within the ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\'\n    }\n  }, "Diplomatic, Informational, Military, and Economic (DIME)"), " framework to promote stability, counter adversaries, and serve national interests."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_001_animatedExportBarChart, null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Illustrative Case: The Indo-Pacific as a New Geopolitical Center of Gravity"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "As you slide through the year selector, it becomes clear that ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#FFDB58\'\n    }\n  }, "China "), "has steadily increased its defense budget since the late 1990s and early 2000s, surpassing ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#DC143C\'\n    }\n  }, "Russia "), "and signaling its ambitions for military modernization and expanded influence, particularly in the Indo-Pacific region. In response, Indo-Pacific nations have also significantly increased their defense spending, bolstering military capabilities to address regional security concerns and counterbalance", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#FFDB58\'\n    }\n  }, " China\'s "), " growing presence."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_001_DefenseExpenditureMap, null)));\n};\n/* harmony default export */ const _001_intro = (intro);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6640\n')},1796:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ feature)\n});\n\n// UNUSED EXPORTS: object\n\n;// ./node_modules/topojson-client/src/reverse.js\n/* harmony default export */ function reverse(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n\n;// ./node_modules/topojson-client/src/identity.js\n/* harmony default export */ function identity(x) {\n  return x;\n}\n\n;// ./node_modules/topojson-client/src/transform.js\n\n\n/* harmony default export */ function transform(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n\n;// ./node_modules/topojson-client/src/feature.js\n\n\n\n/* harmony default export */ function feature(topology, o) {\n  if (typeof o === "string") o = topology.objects[o];\n  return o.type === "GeometryCollection"\n      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature_feature(topology, o); })}\n      : feature_feature(topology, o);\n}\n\nfunction feature_feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}\n      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}\n      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nfunction object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};\n      case "Point": coordinates = point(o.coordinates); break;\n      case "MultiPoint": coordinates = o.coordinates.map(point); break;\n      case "LineString": coordinates = line(o.arcs); break;\n      case "MultiLineString": coordinates = o.arcs.map(line); break;\n      case "Polygon": coordinates = polygon(o.arcs); break;\n      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw2QkFBZSxpQkFBUztBQUN4QjtBQUNBO0FBQ0E7OztBQ0hBLDZCQUFlLGtCQUFTO0FBQ3hCO0FBQ0E7OztBQ0ZxQzs7QUFFckMsNkJBQWUsbUJBQVM7QUFDeEIsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNsQm1DO0FBQ0k7O0FBRXZDLDZCQUFlLGlCQUFTO0FBQ3hCO0FBQ0E7QUFDQSxTQUFTLG9FQUFvRSxPQUFPLGVBQU8sZ0JBQWdCO0FBQzNHLFFBQVEsZUFBTztBQUNmOztBQUVBLFNBQVMsZUFBTztBQUNoQjtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsdUNBQXVDO0FBQ3ZDLHdCQUF3QjtBQUN4QixTQUFTO0FBQ1Q7O0FBRU87QUFDUCx1QkFBdUIsU0FBUztBQUNoQzs7QUFFQTtBQUNBO0FBQ0EsNERBQTRELE9BQU87QUFDbkU7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFDQUFxQyxPQUFPO0FBQzVDLG1EQUFtRDtBQUNuRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLHdEQUF3RDtBQUN4RCxpRUFBaUU7QUFDakUscURBQXFEO0FBQ3JELDhEQUE4RDtBQUM5RCxxREFBcUQ7QUFDckQsOERBQThEO0FBQzlEO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9yZXZlcnNlLmpzPzYwYTciLCJ3ZWJwYWNrOi8vZmluYWxfcHJvamVjdC8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL2lkZW50aXR5LmpzPzM5OTUiLCJ3ZWJwYWNrOi8vZmluYWxfcHJvamVjdC8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL3RyYW5zZm9ybS5qcz83ZmQ0Iiwid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9mZWF0dXJlLmpzP2ZiMTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIG4pIHtcbiAgdmFyIHQsIGogPSBhcnJheS5sZW5ndGgsIGkgPSBqIC0gbjtcbiAgd2hpbGUgKGkgPCAtLWopIHQgPSBhcnJheVtpXSwgYXJyYXlbaSsrXSA9IGFycmF5W2pdLCBhcnJheVtqXSA9IHQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zZm9ybSkge1xuICBpZiAodHJhbnNmb3JtID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgdmFyIHgwLFxuICAgICAgeTAsXG4gICAgICBreCA9IHRyYW5zZm9ybS5zY2FsZVswXSxcbiAgICAgIGt5ID0gdHJhbnNmb3JtLnNjYWxlWzFdLFxuICAgICAgZHggPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzBdLFxuICAgICAgZHkgPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzFdO1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGkpIHtcbiAgICBpZiAoIWkpIHgwID0geTAgPSAwO1xuICAgIHZhciBqID0gMiwgbiA9IGlucHV0Lmxlbmd0aCwgb3V0cHV0ID0gbmV3IEFycmF5KG4pO1xuICAgIG91dHB1dFswXSA9ICh4MCArPSBpbnB1dFswXSkgKiBreCArIGR4O1xuICAgIG91dHB1dFsxXSA9ICh5MCArPSBpbnB1dFsxXSkgKiBreSArIGR5O1xuICAgIHdoaWxlIChqIDwgbikgb3V0cHV0W2pdID0gaW5wdXRbal0sICsrajtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xufVxuIiwiaW1wb3J0IHJldmVyc2UgZnJvbSBcIi4vcmV2ZXJzZS5qc1wiO1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odG9wb2xvZ3ksIG8pIHtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSBvID0gdG9wb2xvZ3kub2JqZWN0c1tvXTtcbiAgcmV0dXJuIG8udHlwZSA9PT0gXCJHZW9tZXRyeUNvbGxlY3Rpb25cIlxuICAgICAgPyB7dHlwZTogXCJGZWF0dXJlQ29sbGVjdGlvblwiLCBmZWF0dXJlczogby5nZW9tZXRyaWVzLm1hcChmdW5jdGlvbihvKSB7IHJldHVybiBmZWF0dXJlKHRvcG9sb2d5LCBvKTsgfSl9XG4gICAgICA6IGZlYXR1cmUodG9wb2xvZ3ksIG8pO1xufVxuXG5mdW5jdGlvbiBmZWF0dXJlKHRvcG9sb2d5LCBvKSB7XG4gIHZhciBpZCA9IG8uaWQsXG4gICAgICBiYm94ID0gby5iYm94LFxuICAgICAgcHJvcGVydGllcyA9IG8ucHJvcGVydGllcyA9PSBudWxsID8ge30gOiBvLnByb3BlcnRpZXMsXG4gICAgICBnZW9tZXRyeSA9IG9iamVjdCh0b3BvbG9neSwgbyk7XG4gIHJldHVybiBpZCA9PSBudWxsICYmIGJib3ggPT0gbnVsbCA/IHt0eXBlOiBcIkZlYXR1cmVcIiwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiBiYm94ID09IG51bGwgPyB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgYmJveDogYmJveCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9iamVjdCh0b3BvbG9neSwgbykge1xuICB2YXIgdHJhbnNmb3JtUG9pbnQgPSB0cmFuc2Zvcm0odG9wb2xvZ3kudHJhbnNmb3JtKSxcbiAgICAgIGFyY3MgPSB0b3BvbG9neS5hcmNzO1xuXG4gIGZ1bmN0aW9uIGFyYyhpLCBwb2ludHMpIHtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCkgcG9pbnRzLnBvcCgpO1xuICAgIGZvciAodmFyIGEgPSBhcmNzW2kgPCAwID8gfmkgOiBpXSwgayA9IDAsIG4gPSBhLmxlbmd0aDsgayA8IG47ICsraykge1xuICAgICAgcG9pbnRzLnB1c2godHJhbnNmb3JtUG9pbnQoYVtrXSwgaykpO1xuICAgIH1cbiAgICBpZiAoaSA8IDApIHJldmVyc2UocG9pbnRzLCBuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50KHApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUG9pbnQocCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmNzLmxlbmd0aDsgaSA8IG47ICsraSkgYXJjKGFyY3NbaV0sIHBvaW50cyk7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAyKSBwb2ludHMucHVzaChwb2ludHNbMF0pOyAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gcGVyIHRoZSBzcGVjaWZpY2F0aW9uLlxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICBmdW5jdGlvbiByaW5nKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gbGluZShhcmNzKTtcbiAgICB3aGlsZSAocG9pbnRzLmxlbmd0aCA8IDQpIHBvaW50cy5wdXNoKHBvaW50c1swXSk7IC8vIFRoaXMgbWF5IGhhcHBlbiBpZiBhbiBhcmMgaGFzIG9ubHkgdHdvIHBvaW50cy5cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seWdvbihhcmNzKSB7XG4gICAgcmV0dXJuIGFyY3MubWFwKHJpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VvbWV0cnkobykge1xuICAgIHZhciB0eXBlID0gby50eXBlLCBjb29yZGluYXRlcztcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJHZW9tZXRyeUNvbGxlY3Rpb25cIjogcmV0dXJuIHt0eXBlOiB0eXBlLCBnZW9tZXRyaWVzOiBvLmdlb21ldHJpZXMubWFwKGdlb21ldHJ5KX07XG4gICAgICBjYXNlIFwiUG9pbnRcIjogY29vcmRpbmF0ZXMgPSBwb2ludChvLmNvb3JkaW5hdGVzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2ludFwiOiBjb29yZGluYXRlcyA9IG8uY29vcmRpbmF0ZXMubWFwKHBvaW50KTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTGluZVN0cmluZ1wiOiBjb29yZGluYXRlcyA9IGxpbmUoby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlMaW5lU3RyaW5nXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChsaW5lKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiUG9seWdvblwiOiBjb29yZGluYXRlcyA9IHBvbHlnb24oby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChwb2x5Z29uKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xuICB9XG5cbiAgcmV0dXJuIGdlb21ldHJ5KG8pO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1796\n')}}]);