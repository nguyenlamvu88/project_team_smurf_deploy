"use strict";(self.webpackChunkfinal_project=self.webpackChunkfinal_project||[]).push([[320],{3320:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _005_emergingThreats)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 266 modules\nvar src = __webpack_require__(6496);\n// EXTERNAL MODULE: ./node_modules/topojson-client/src/feature.js + 3 modules\nvar feature = __webpack_require__(1796);\n;// ./src/components/graphs/005_WeaponTypeChoroplethMap.js\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar ChoroplethMap = function ChoroplethMap() {\n  var svgRef = (0,react.useRef)();\n  var pieChartRef = (0,react.useRef)();\n\n  // State Variables\n  var _useState = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: null\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    tooltip = _useState2[0],\n    setTooltip = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    modalData = _useState4[0],\n    setModalData = _useState4[1];\n  var _useState5 = (0,react.useState)({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    countryData = _useState6[0],\n    setCountryData = _useState6[1];\n  var _useState7 = (0,react.useState)([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    countries = _useState8[0],\n    setCountries = _useState8[1];\n  var _useState9 = (0,react.useState)(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedYear = _useState10[0],\n    setSelectedYear = _useState10[1];\n  var _useState11 = (0,react.useState)(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    selectedWeaponType = _useState12[0],\n    setSelectedWeaponType = _useState12[1];\n  var _useState13 = (0,react.useState)([]),\n    _useState14 = _slicedToArray(_useState13, 2),\n    weaponTypes = _useState14[0],\n    setWeaponTypes = _useState14[1];\n  var _useState15 = (0,react.useState)({}),\n    _useState16 = _slicedToArray(_useState15, 2),\n    maxQuantities = _useState16[0],\n    setMaxQuantities = _useState16[1];\n  var _useState17 = (0,react.useState)(true),\n    _useState18 = _slicedToArray(_useState17, 2),\n    loading = _useState18[0],\n    setLoading = _useState18[1];\n  var _useState19 = (0,react.useState)(null),\n    _useState20 = _slicedToArray(_useState19, 2),\n    error = _useState20[0],\n    setError = _useState20[1];\n  var _useState21 = (0,react.useState)(1950),\n    _useState22 = _slicedToArray(_useState21, 2),\n    minYear = _useState22[0],\n    setMinYear = _useState22[1];\n  var _useState23 = (0,react.useState)(2023),\n    _useState24 = _slicedToArray(_useState23, 2),\n    maxYear = _useState24[0],\n    setMaxYear = _useState24[1];\n  var _useState25 = (0,react.useState)(0),\n    _useState26 = _slicedToArray(_useState25, 2),\n    totalArmsTrade = _useState26[0],\n    setTotalArmsTrade = _useState26[1];\n\n  // Data URLs with deployment compatibility\n  var dataUrl = "".concat(process.env.PUBLIC_URL, "/data/processed/processed_arms_transfer_by_weapon_types.csv");\n  var pieChartUrl = "".concat(process.env.PUBLIC_URL, "/data/processed/processed_regional_transfers.csv");\n  var geoJSONUrl = "".concat(process.env.PUBLIC_URL, "/countries-110m.json");\n\n  // Country Name Mapping\n  var countryNameMapping = {\n    "Cote d\'Ivoire": "Ivory Coast",\n    "Congo": "Republic of the Congo"\n  };\n\n  // Data Loading Effect\n  (0,react.useEffect)(function () {\n    setLoading(true);\n    Promise.all([src/* json */.Pq9(geoJSONUrl), src/* csv */.fu7(dataUrl, function (d) {\n      var year = +d[\'year\'];\n      var quantity = +d[\'quantity\'];\n      if (isNaN(year) || isNaN(quantity) || year < minYear || year > maxYear) {\n        return null;\n      }\n      return {\n        recipients: d[\'recipients\'],\n        suppliers: d[\'suppliers\'],\n        year: Math.round(year),\n        quantity: quantity,\n        weaponDescription: d[\'weapon description\'],\n        status: d[\'status\']\n      };\n    })]).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        worldDataRaw = _ref2[0],\n        armsDataRaw = _ref2[1];\n      armsDataRaw = armsDataRaw.filter(function (row) {\n        return row !== null;\n      });\n      var countriesData = feature/* default */.A(worldDataRaw, worldDataRaw.objects.countries).features;\n      setCountries(countriesData);\n      var processedData = {};\n      var uniqueWeaponTypes = new Set();\n      var tempMaxQuantities = {};\n      armsDataRaw.forEach(function (row) {\n        var country = row.recipients;\n        country = countryNameMapping[country] || country;\n        var year = row.year;\n        var weaponType = row.weaponDescription ? row.weaponDescription.trim() : "";\n        var quantity = row.quantity;\n        if (weaponType !== "") {\n          uniqueWeaponTypes.add(weaponType);\n        }\n        if (!processedData[country]) {\n          processedData[country] = {};\n        }\n        if (!processedData[country][year]) {\n          processedData[country][year] = {};\n        }\n        processedData[country][year][weaponType] = {\n          quantity: quantity,\n          suppliers: row.suppliers,\n          status: row.status\n        };\n        if (!tempMaxQuantities[weaponType]) {\n          tempMaxQuantities[weaponType] = {};\n        }\n        if (!tempMaxQuantities[weaponType][year] || quantity > tempMaxQuantities[weaponType][year]) {\n          tempMaxQuantities[weaponType][year] = quantity;\n        }\n      });\n      var weaponTypesArray = ["All"].concat(_toConsumableArray(Array.from(uniqueWeaponTypes).filter(function (wt) {\n        return wt !== "";\n      }).sort()));\n      setWeaponTypes(weaponTypesArray);\n      setCountryData(processedData);\n      setMaxQuantities(tempMaxQuantities);\n      setLoading(false);\n      var availableYears = Array.from(new Set(armsDataRaw.map(function (d) {\n        return d.year;\n      }))).sort(function (a, b) {\n        return a - b;\n      });\n      if (availableYears.length > 0) {\n        setSelectedYear(2019);\n      }\n      if (weaponTypesArray.includes("All")) {\n        setSelectedWeaponType("All");\n      } else if (weaponTypesArray.length > 0) {\n        setSelectedWeaponType(weaponTypesArray[0]);\n      }\n    })["catch"](function (error) {\n      console.error("Error loading data:", error);\n      setError("Failed to load data. Please try again later.");\n      setLoading(false);\n    });\n  }, []);\n\n  // Rendering Effect\n  (0,react.useEffect)(function () {\n    if (countries.length === 0 || Object.keys(countryData).length === 0 || selectedYear === null || isNaN(selectedYear) || !selectedWeaponType) return;\n    drawMap(countries, countryData, selectedYear, selectedWeaponType);\n  }, [selectedYear, selectedWeaponType, countryData, countries]);\n  var drawMap = function drawMap(countries, armsData, year, weaponType) {\n    var width = 800;\n    var height = 400;\n    var projection = src/* geoMercator */.bAh().center([0, 20]).scale(130).translate([width / 2, height / 2]);\n    var path = src/* geoPath */.zFW().projection(projection);\n    var maxQuantity;\n    var colorScale;\n    if (weaponType === "All") {\n      maxQuantity = src/* max */.T9B(countries, function (d) {\n        var _armsData$country;\n        var country = d.properties.name;\n        var yearData = (_armsData$country = armsData[country]) === null || _armsData$country === void 0 ? void 0 : _armsData$country[year];\n        if (yearData) {\n          return Object.values(yearData).reduce(function (acc, curr) {\n            return acc + curr.quantity;\n          }, 0);\n        }\n        return 0;\n      }) || 0;\n      colorScale = src/* scaleSequential */.exT(src/* interpolateReds */.Q3).domain([Math.log(1), Math.log(maxQuantity)]);\n    } else {\n      maxQuantity = src/* max */.T9B(countries, function (d) {\n        var _armsData$d$propertie;\n        return ((_armsData$d$propertie = armsData[d.properties.name]) === null || _armsData$d$propertie === void 0 || (_armsData$d$propertie = _armsData$d$propertie[year]) === null || _armsData$d$propertie === void 0 || (_armsData$d$propertie = _armsData$d$propertie[weaponType]) === null || _armsData$d$propertie === void 0 ? void 0 : _armsData$d$propertie.quantity) || 0;\n      }) || 0;\n      colorScale = src/* scaleSequential */.exT(src/* interpolateReds */.Q3).domain([Math.log(1), Math.log(maxQuantity)]);\n    }\n    var svg = src/* select */.Ltv(svgRef.current).attr(\'viewBox\', "0 0 ".concat(width, " ").concat(height)).attr(\'preserveAspectRatio\', \'xMidYMid meet\').style(\'width\', \'100%\').style(\'height\', \'auto\');\n    svg.selectAll(\'*\').remove();\n    var g = svg.append(\'g\').attr(\'class\', \'map-group\');\n    var logColorScale = function logColorScale(value) {\n      return colorScale(Math.log(value));\n    };\n    g.selectAll(\'path\').data(countries).enter().append(\'path\').attr(\'d\', path).attr(\'fill\', function (d) {\n      var country = d.properties.name;\n      if (weaponType === "All") {\n        var _armsData$country2;\n        var yearData = (_armsData$country2 = armsData[country]) === null || _armsData$country2 === void 0 ? void 0 : _armsData$country2[year];\n        if (yearData) {\n          var totalQuantity = Object.values(yearData).reduce(function (acc, curr) {\n            return acc + curr.quantity;\n          }, 0);\n          return totalQuantity > 0 ? logColorScale(totalQuantity) : \'#ccc\';\n        }\n        return \'#ccc\';\n      } else {\n        var _armsData$country3;\n        var quantity = ((_armsData$country3 = armsData[country]) === null || _armsData$country3 === void 0 || (_armsData$country3 = _armsData$country3[year]) === null || _armsData$country3 === void 0 || (_armsData$country3 = _armsData$country3[weaponType]) === null || _armsData$country3 === void 0 ? void 0 : _armsData$country3.quantity) || 0;\n        return quantity > 0 ? logColorScale(quantity) : \'#ccc\';\n      }\n    }).attr(\'stroke\', \'#333\').on(\'mouseenter\', function (event, d) {\n      var _armsData$country4, _yearData$weaponType;\n      var country = d.properties.name;\n      var yearData = (_armsData$country4 = armsData[country]) === null || _armsData$country4 === void 0 ? void 0 : _armsData$country4[year];\n      if (!yearData) return;\n      var content = weaponType === "All" ? "<strong>".concat(country, "</strong><br>Total: ").concat(Object.values(yearData).reduce(function (acc, curr) {\n        return acc + curr.quantity;\n      }, 0)) : "<strong>".concat(country, "</strong><br>Quantity: ").concat(((_yearData$weaponType = yearData[weaponType]) === null || _yearData$weaponType === void 0 ? void 0 : _yearData$weaponType.quantity) || 0);\n      setTooltip({\n        visible: true,\n        x: event.pageX,\n        y: event.pageY,\n        content: content\n      });\n    }).on(\'mouseleave\', function () {\n      setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: null\n      });\n    });\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Arms Imports by Weapon Type ", selectedYear), tooltip.visible && /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      top: tooltip.y,\n      left: tooltip.x,\n      backgroundColor: \'rgba(0, 0, 0, 0.8)\',\n      color: \'#e0e0e0\',\n      padding: \'12px\',\n      borderRadius: \'8px\',\n      zIndex: 10,\n      pointerEvents: \'none\'\n    }\n  }, tooltip.content), /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef,\n    style: {\n      width: \'100%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }));\n};\n/* harmony default export */ const _005_WeaponTypeChoroplethMap = (ChoroplethMap);\n;// ./src/components/graphs/005_WeaponTypeZCP.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction _005_WeaponTypeZCP_slicedToArray(r, e) { return _005_WeaponTypeZCP_arrayWithHoles(r) || _005_WeaponTypeZCP_iterableToArrayLimit(r, e) || _005_WeaponTypeZCP_unsupportedIterableToArray(r, e) || _005_WeaponTypeZCP_nonIterableRest(); }\nfunction _005_WeaponTypeZCP_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _005_WeaponTypeZCP_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _005_WeaponTypeZCP_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _005_WeaponTypeZCP_arrayLikeToArray(r, a) : void 0; } }\nfunction _005_WeaponTypeZCP_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _005_WeaponTypeZCP_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _005_WeaponTypeZCP_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\nvar ZoomableCirclePacking = function ZoomableCirclePacking() {\n  var svgRef = (0,react.useRef)();\n  var _useState = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: null\n    }),\n    _useState2 = _005_WeaponTypeZCP_slicedToArray(_useState, 2),\n    tooltip = _useState2[0],\n    setTooltip = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = _005_WeaponTypeZCP_slicedToArray(_useState3, 2),\n    data = _useState4[0],\n    setData = _useState4[1];\n  var _useState5 = (0,react.useState)(0),\n    _useState6 = _005_WeaponTypeZCP_slicedToArray(_useState5, 2),\n    selectedYearIndex = _useState6[0],\n    setSelectedYearIndex = _useState6[1];\n  var _useState7 = (0,react.useState)([]),\n    _useState8 = _005_WeaponTypeZCP_slicedToArray(_useState7, 2),\n    availableYears = _useState8[0],\n    setAvailableYears = _useState8[1];\n  var _useState9 = (0,react.useState)(null),\n    _useState10 = _005_WeaponTypeZCP_slicedToArray(_useState9, 2),\n    error = _useState10[0],\n    setError = _useState10[1];\n  var width = 1000;\n  var height = 600;\n  var dataUrl = "".concat(process.env.PUBLIC_URL, "/data/processed/processed_weapon_transfer_by_category.json");\n  (0,react.useEffect)(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, jsonData, years;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(dataUrl);\n            case 3:\n              response = _context.sent;\n              if (response.ok) {\n                _context.next = 6;\n                break;\n              }\n              throw new Error("HTTP error! Status: ".concat(response.status));\n            case 6:\n              _context.next = 8;\n              return response.json();\n            case 8:\n              jsonData = _context.sent;\n              setData(jsonData);\n\n              // Extract unique years and set availableYears state\n              years = Array.from(new Set(Object.values(jsonData.Exports).flatMap(function (countryData) {\n                return countryData.flatMap(function (category) {\n                  return Object.keys(category).filter(function (key) {\n                    return !isNaN(key);\n                  });\n                });\n              }))).sort(function (a, b) {\n                return a - b;\n              });\n              setAvailableYears(years);\n              setSelectedYearIndex(years.length - 1); // Set default to the latest year\n              _context.next = 19;\n              break;\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context["catch"](0);\n              console.error(\'Error fetching data:\', _context.t0);\n              setError(\'Failed to load data. Please try again later.\');\n            case 19:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 15]]);\n      }));\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchData();\n  }, [dataUrl]);\n  var countryColorScale = (0,react.useMemo)(function () {\n    return data ? src/* scaleOrdinal */.UMr().domain([\'United States\', \'Russia\', \'China\']).range([\'#4682B4\', \'#DC143C\', \'#FFDB58\']).unknown(\'#CCCCCC\') // Fallback color for other countries\n    : null;\n  }, [data]);\n  var categoryColorScale = (0,react.useMemo)(function () {\n    var allCategories = data ? Object.values(data.Exports).flatMap(function (countryData) {\n      return countryData.map(function (category) {\n        return category[\'Unnamed: 1\'];\n      });\n    }) : [];\n    return src/* scaleOrdinal */.UMr(src/* schemePaired */.vU7).domain(allCategories);\n  }, [data]);\n  (0,react.useEffect)(function () {\n    if (!data || availableYears.length === 0 || !countryColorScale || !categoryColorScale) return;\n    var selectedYear = availableYears[selectedYearIndex];\n    var yearData = {\n      name: \'Weapon Transfers by Country\',\n      children: Object.entries(data.Exports).map(function (_ref2) {\n        var _ref3 = _005_WeaponTypeZCP_slicedToArray(_ref2, 2),\n          country = _ref3[0],\n          categories = _ref3[1];\n        return {\n          name: country,\n          children: categories.map(function (category) {\n            return {\n              name: category[\'Unnamed: 1\'],\n              value: category[selectedYear] || 0\n            };\n          }).filter(function (category) {\n            return category.value > 0;\n          })\n        };\n      }).filter(function (country) {\n        return country.children.length > 0;\n      })\n    };\n    var svg = src/* select */.Ltv(svgRef.current).attr(\'viewBox\', "0 0 ".concat(width, " ").concat(height)).style(\'background\', \'transparent\').style(\'cursor\', \'pointer\');\n    svg.selectAll(\'*\').remove();\n    var root = src/* hierarchy */.Sk5(yearData).sum(function (d) {\n      return d.value || 0;\n    }).sort(function (a, b) {\n      return b.value - a.value;\n    });\n    var pack = src/* pack */.qqI().size([width - 10, height - 10]).padding(10);\n    pack(root);\n    var focus = root;\n    var view;\n    var zoomTo = function zoomTo(v) {\n      var k = width / v[2];\n      view = v;\n      node.attr(\'transform\', function (d) {\n        return "translate(".concat((d.x - v[0]) * k + width / 2, ", ").concat((d.y - v[1]) * k + height / 2, ")");\n      });\n      node.select(\'circle\').attr(\'r\', function (d) {\n        return d.r * k;\n      });\n      node.selectAll(\'text\').attr(\'fontSize\', function (d) {\n        return Math.max(10, d.r * k / 4);\n      });\n    };\n    var zoom = function zoom(event, d) {\n      if (!d) return;\n      focus = d;\n      var transition = svg.transition().duration(750).tween(\'zoom\', function () {\n        var i = src/* interpolateZoom */.p7(view, [focus.x, focus.y, focus.r * 2.75]);\n        return function (t) {\n          return zoomTo(i(t));\n        };\n      });\n    };\n    var node = svg.append(\'g\').selectAll(\'g\').data(root.descendants()).join(\'g\').attr(\'transform\', function (d) {\n      return "translate(".concat(d.x, ",").concat(d.y, ")");\n    });\n    node.append(\'circle\').attr(\'fill\', function (d) {\n      if (d.depth === 1) return countryColorScale(d.data.name);\n      if (d.depth === 2) return categoryColorScale(d.data.name);\n      return \'#ccc\';\n    }).attr(\'fill-opacity\', function (d) {\n      return d.depth === 1 || d.depth === 2 ? 1 : 0.0;\n    }).attr(\'stroke\', \'none\').attr(\'r\', function (d) {\n      return d.r;\n    }).on(\'mouseover\', function (event, d) {\n      var _d$parent, _d$value;\n      if (!d || !d.data || d.depth === 0) return;\n      var country = d.depth === 1 ? d.data.name : ((_d$parent = d.parent) === null || _d$parent === void 0 ? void 0 : _d$parent.data.name) || \'N/A\';\n      var weaponType = d.depth === 2 ? d.data.name : \'N/A\';\n      var quantity = ((_d$value = d.value) === null || _d$value === void 0 ? void 0 : _d$value.toLocaleString()) || \'N/A\';\n      setTooltip({\n        visible: true,\n        x: event.clientX + 10,\n        y: event.clientY - 10,\n        content: /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("strong", null, country), d.depth === 2 && /*#__PURE__*/react.createElement("br", null), d.depth === 2 && "Type: ".concat(weaponType), /*#__PURE__*/react.createElement("br", null), "Quantity: ", quantity)\n      });\n    }).on(\'mousemove\', function (event) {\n      setTooltip(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          x: event.clientX + 10,\n          y: event.clientY - 10\n        });\n      });\n    }).on(\'mouseout\', function () {\n      return setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: null\n      });\n    }).on(\'click\', function (event, d) {\n      if (focus !== d) {\n        zoom(event, d);\n        event.stopPropagation();\n      }\n    });\n    zoomTo([root.x, root.y, root.r * 2.75]);\n    svg.on(\'click\', function () {\n      return zoom(null, root);\n    });\n  }, [data, selectedYearIndex, availableYears, countryColorScale, categoryColorScale]);\n  var handleSliderChange = function handleSliderChange(e) {\n    setSelectedYearIndex(Number(e.target.value));\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\',\n      height: \'auto\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Weapon Transfers by Category ", availableYears[selectedYearIndex]), error && /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'#e74c3c\',\n      textAlign: \'center\'\n    }\n  }, error), !error && !data && /*#__PURE__*/react.createElement("p", {\n    style: {\n      textAlign: \'center\',\n      color: \'#e0e0e0\'\n    }\n  }, "Loading..."), !error && data && availableYears.length > 0 && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("input", {\n    type: "range",\n    id: "year-slider",\n    min: "0",\n    max: availableYears.length - 1,\n    value: selectedYearIndex,\n    onChange: handleSliderChange,\n    style: {\n      width: \'80%\',\n      appearance: \'none\',\n      height: \'8px\',\n      backgroundColor: \'gray\',\n      borderRadius: \'5px\',\n      outline: \'none\',\n      margin: \'20px auto 10px\',\n      display: \'block\',\n      accentColor: \'#e74c3c\'\n    }\n  }), /*#__PURE__*/react.createElement("div", {\n    style: {\n      width: \'100%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }, /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef\n  }), tooltip.visible && /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'fixed\',\n      top: tooltip.y,\n      left: tooltip.x,\n      backgroundColor: \'rgba(0, 0, 0, 0.8)\',\n      color: \'#e0e0e0\',\n      padding: \'12px\',\n      borderRadius: \'8px\',\n      pointerEvents: \'none\',\n      transform: \'translate(-50%, -100%)\',\n      whiteSpace: \'nowrap\',\n      lineHeight: \'1.6\',\n      fontSize: \'16px\',\n      zIndex: 1000\n    }\n  }, tooltip.content))));\n};\n/* harmony default export */ const _005_WeaponTypeZCP = (ZoomableCirclePacking);\n;// ./src/components/005_emergingThreats.js\n\n\n\nvar emergingThreats = function emergingThreats() {\n  return /*#__PURE__*/react.createElement("section", {\n    id: "005"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Preparing Allies for Emerging Threats"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#4682B4\',\n      fontWeight: \'bold\'\n    }\n  }, "The United States"), " strengthens regional defense by empowering allies, reducing the need for an extensive US military presence. Equipped with advanced weaponry from the US, allies like ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Taiwan"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Japan"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "South Korea"), ", and the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Philippines"), " bolster their capabilities to counter regional threats independently. This ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\',\n      fontWeight: \'bold\'\n    }\n  }, "Building Partner Capacity"), " strategy has become even more significant amid rising South China Sea tensions, where US support to countries like the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Philippines"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Malaysia"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Brunei"), ", and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Indonesia"), " is crucial in deterring China\'s territorial ambitions."), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Exploring the Arms Trade Dynamic"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "To explore this dynamic, use the Choropleth Map and Pie Chart to examine key years when South China Sea tensions escalated. By selecting years like ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\',\n      fontWeight: \'bold\'\n    }\n  }, "2010-2020"), ", you can observe a noticeable rise in US arms imports by Asian allies and an increase in total arms trade in the Asia-Oceania region. This interactive view reveals the correlation between heightened regional disputes and the strategic arms support provided by the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#4682B4\',\n      fontWeight: \'bold\'\n    }\n  }, "US")), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_005_WeaponTypeChoroplethMap, null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Breakdown of Weapon Transfers by Category"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "Missiles, aircraft, and other advanced weaponry dominate US exports, reflecting regional priorities and threats. This breakdown shows how arms transfers align with geopolitical objectives."), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, "The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "United States"), " supports countries in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Europe, the Middle East, and Asia-Pacific"), ", reinforcing a defense line against rivals."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia "), " supplies nations in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Eastern Europe and Central Asia"), " to counter NATO\'s reach."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFD700"\n    }\n  }, "China"), " arms countries in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Southeast Asia, Africa, and South Asia"), ", expanding its foothold in resource-rich areas."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, "Countries like ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "India"), " illustrate a multilateral approach, balancing relationships with the US, Russia, and others."), /*#__PURE__*/react.createElement("br", null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "Through this network, arms transfers reveal interdependent alliances, bolstered influence, and efforts to contain rivals."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_005_WeaponTypeZCP, null)));\n};\n/* harmony default export */ const _005_emergingThreats = (emergingThreats);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3320\n')},1796:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ feature)\n});\n\n// UNUSED EXPORTS: object\n\n;// ./node_modules/topojson-client/src/reverse.js\n/* harmony default export */ function reverse(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n\n;// ./node_modules/topojson-client/src/identity.js\n/* harmony default export */ function identity(x) {\n  return x;\n}\n\n;// ./node_modules/topojson-client/src/transform.js\n\n\n/* harmony default export */ function transform(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n\n;// ./node_modules/topojson-client/src/feature.js\n\n\n\n/* harmony default export */ function feature(topology, o) {\n  if (typeof o === "string") o = topology.objects[o];\n  return o.type === "GeometryCollection"\n      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature_feature(topology, o); })}\n      : feature_feature(topology, o);\n}\n\nfunction feature_feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}\n      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}\n      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nfunction object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};\n      case "Point": coordinates = point(o.coordinates); break;\n      case "MultiPoint": coordinates = o.coordinates.map(point); break;\n      case "LineString": coordinates = line(o.arcs); break;\n      case "MultiLineString": coordinates = o.arcs.map(line); break;\n      case "Polygon": coordinates = polygon(o.arcs); break;\n      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw2QkFBZSxpQkFBUztBQUN4QjtBQUNBO0FBQ0E7OztBQ0hBLDZCQUFlLGtCQUFTO0FBQ3hCO0FBQ0E7OztBQ0ZxQzs7QUFFckMsNkJBQWUsbUJBQVM7QUFDeEIsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNsQm1DO0FBQ0k7O0FBRXZDLDZCQUFlLGlCQUFTO0FBQ3hCO0FBQ0E7QUFDQSxTQUFTLG9FQUFvRSxPQUFPLGVBQU8sZ0JBQWdCO0FBQzNHLFFBQVEsZUFBTztBQUNmOztBQUVBLFNBQVMsZUFBTztBQUNoQjtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsdUNBQXVDO0FBQ3ZDLHdCQUF3QjtBQUN4QixTQUFTO0FBQ1Q7O0FBRU87QUFDUCx1QkFBdUIsU0FBUztBQUNoQzs7QUFFQTtBQUNBO0FBQ0EsNERBQTRELE9BQU87QUFDbkU7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFDQUFxQyxPQUFPO0FBQzVDLG1EQUFtRDtBQUNuRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLHdEQUF3RDtBQUN4RCxpRUFBaUU7QUFDakUscURBQXFEO0FBQ3JELDhEQUE4RDtBQUM5RCxxREFBcUQ7QUFDckQsOERBQThEO0FBQzlEO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9yZXZlcnNlLmpzPzYwYTciLCJ3ZWJwYWNrOi8vZmluYWxfcHJvamVjdC8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL2lkZW50aXR5LmpzPzM5OTUiLCJ3ZWJwYWNrOi8vZmluYWxfcHJvamVjdC8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL3RyYW5zZm9ybS5qcz83ZmQ0Iiwid2VicGFjazovL2ZpbmFsX3Byb2plY3QvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9mZWF0dXJlLmpzP2ZiMTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIG4pIHtcbiAgdmFyIHQsIGogPSBhcnJheS5sZW5ndGgsIGkgPSBqIC0gbjtcbiAgd2hpbGUgKGkgPCAtLWopIHQgPSBhcnJheVtpXSwgYXJyYXlbaSsrXSA9IGFycmF5W2pdLCBhcnJheVtqXSA9IHQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zZm9ybSkge1xuICBpZiAodHJhbnNmb3JtID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgdmFyIHgwLFxuICAgICAgeTAsXG4gICAgICBreCA9IHRyYW5zZm9ybS5zY2FsZVswXSxcbiAgICAgIGt5ID0gdHJhbnNmb3JtLnNjYWxlWzFdLFxuICAgICAgZHggPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzBdLFxuICAgICAgZHkgPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzFdO1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGkpIHtcbiAgICBpZiAoIWkpIHgwID0geTAgPSAwO1xuICAgIHZhciBqID0gMiwgbiA9IGlucHV0Lmxlbmd0aCwgb3V0cHV0ID0gbmV3IEFycmF5KG4pO1xuICAgIG91dHB1dFswXSA9ICh4MCArPSBpbnB1dFswXSkgKiBreCArIGR4O1xuICAgIG91dHB1dFsxXSA9ICh5MCArPSBpbnB1dFsxXSkgKiBreSArIGR5O1xuICAgIHdoaWxlIChqIDwgbikgb3V0cHV0W2pdID0gaW5wdXRbal0sICsrajtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xufVxuIiwiaW1wb3J0IHJldmVyc2UgZnJvbSBcIi4vcmV2ZXJzZS5qc1wiO1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odG9wb2xvZ3ksIG8pIHtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSBvID0gdG9wb2xvZ3kub2JqZWN0c1tvXTtcbiAgcmV0dXJuIG8udHlwZSA9PT0gXCJHZW9tZXRyeUNvbGxlY3Rpb25cIlxuICAgICAgPyB7dHlwZTogXCJGZWF0dXJlQ29sbGVjdGlvblwiLCBmZWF0dXJlczogby5nZW9tZXRyaWVzLm1hcChmdW5jdGlvbihvKSB7IHJldHVybiBmZWF0dXJlKHRvcG9sb2d5LCBvKTsgfSl9XG4gICAgICA6IGZlYXR1cmUodG9wb2xvZ3ksIG8pO1xufVxuXG5mdW5jdGlvbiBmZWF0dXJlKHRvcG9sb2d5LCBvKSB7XG4gIHZhciBpZCA9IG8uaWQsXG4gICAgICBiYm94ID0gby5iYm94LFxuICAgICAgcHJvcGVydGllcyA9IG8ucHJvcGVydGllcyA9PSBudWxsID8ge30gOiBvLnByb3BlcnRpZXMsXG4gICAgICBnZW9tZXRyeSA9IG9iamVjdCh0b3BvbG9neSwgbyk7XG4gIHJldHVybiBpZCA9PSBudWxsICYmIGJib3ggPT0gbnVsbCA/IHt0eXBlOiBcIkZlYXR1cmVcIiwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiBiYm94ID09IG51bGwgPyB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgYmJveDogYmJveCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9iamVjdCh0b3BvbG9neSwgbykge1xuICB2YXIgdHJhbnNmb3JtUG9pbnQgPSB0cmFuc2Zvcm0odG9wb2xvZ3kudHJhbnNmb3JtKSxcbiAgICAgIGFyY3MgPSB0b3BvbG9neS5hcmNzO1xuXG4gIGZ1bmN0aW9uIGFyYyhpLCBwb2ludHMpIHtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCkgcG9pbnRzLnBvcCgpO1xuICAgIGZvciAodmFyIGEgPSBhcmNzW2kgPCAwID8gfmkgOiBpXSwgayA9IDAsIG4gPSBhLmxlbmd0aDsgayA8IG47ICsraykge1xuICAgICAgcG9pbnRzLnB1c2godHJhbnNmb3JtUG9pbnQoYVtrXSwgaykpO1xuICAgIH1cbiAgICBpZiAoaSA8IDApIHJldmVyc2UocG9pbnRzLCBuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50KHApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUG9pbnQocCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmNzLmxlbmd0aDsgaSA8IG47ICsraSkgYXJjKGFyY3NbaV0sIHBvaW50cyk7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAyKSBwb2ludHMucHVzaChwb2ludHNbMF0pOyAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gcGVyIHRoZSBzcGVjaWZpY2F0aW9uLlxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICBmdW5jdGlvbiByaW5nKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gbGluZShhcmNzKTtcbiAgICB3aGlsZSAocG9pbnRzLmxlbmd0aCA8IDQpIHBvaW50cy5wdXNoKHBvaW50c1swXSk7IC8vIFRoaXMgbWF5IGhhcHBlbiBpZiBhbiBhcmMgaGFzIG9ubHkgdHdvIHBvaW50cy5cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seWdvbihhcmNzKSB7XG4gICAgcmV0dXJuIGFyY3MubWFwKHJpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VvbWV0cnkobykge1xuICAgIHZhciB0eXBlID0gby50eXBlLCBjb29yZGluYXRlcztcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJHZW9tZXRyeUNvbGxlY3Rpb25cIjogcmV0dXJuIHt0eXBlOiB0eXBlLCBnZW9tZXRyaWVzOiBvLmdlb21ldHJpZXMubWFwKGdlb21ldHJ5KX07XG4gICAgICBjYXNlIFwiUG9pbnRcIjogY29vcmRpbmF0ZXMgPSBwb2ludChvLmNvb3JkaW5hdGVzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2ludFwiOiBjb29yZGluYXRlcyA9IG8uY29vcmRpbmF0ZXMubWFwKHBvaW50KTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTGluZVN0cmluZ1wiOiBjb29yZGluYXRlcyA9IGxpbmUoby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlMaW5lU3RyaW5nXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChsaW5lKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiUG9seWdvblwiOiBjb29yZGluYXRlcyA9IHBvbHlnb24oby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChwb2x5Z29uKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xuICB9XG5cbiAgcmV0dXJuIGdlb21ldHJ5KG8pO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1796\n')}}]);