"use strict";(self.webpackChunkfinal_project=self.webpackChunkfinal_project||[]).push([[41],{9041:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _007_taiwan)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(9437);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/loaders/GLTFLoader.js + 1 modules\nvar GLTFLoader = __webpack_require__(4092);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(7024);\n;// ./src/components/graphs/007_F16.js\n// jet_animation.js\n\n\n\n\nfunction startJetAnimation(container) {\n  var scene, camera, renderer, controls;\n  var jets = [];\n  var NUM_JETS = 150;\n\n  // Use PUBLIC_URL for static asset paths\n  var jetModelPath = "".concat(process.env.PUBLIC_URL, "/f16-c_falcon.glb");\n  var worldMapPath = "".concat(process.env.PUBLIC_URL, "/taiwan_gmap.png");\n  var animationFrameId;\n  var startTime = Date.now();\n  init();\n  animate();\n  function init() {\n    // Scene Setup\n    scene = new three_module/* Scene */.Z58();\n\n    // Camera Setup\n    camera = new three_module/* PerspectiveCamera */.ubm(60, 16 / 9, 0.1, 1000);\n    camera.position.set(0, 200, 0); // Above the map\n    camera.lookAt(0, 0, 0); // Center of the scene\n\n    // Renderer Setup\n    renderer = new three_module/* WebGLRenderer */.JeP({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setClearColor(0x000000, 0); // Transparent background\n    renderer.setSize(container.clientWidth, container.clientWidth * 9 / 16);\n    container.appendChild(renderer.domElement);\n\n    // OrbitControls Setup (Optional)\n    controls = new OrbitControls/* OrbitControls */.N(camera, renderer.domElement);\n    controls.enableRotate = false; // Fixed rotation\n    controls.enableZoom = false;\n\n    // Lighting\n    var ambientLight = new three_module/* AmbientLight */.$p8(0xcccccc, 0.5);\n    scene.add(ambientLight);\n    var directionalLight = new three_module/* DirectionalLight */.ZyN(0xffffff, 0.8);\n    directionalLight.position.set(100, 200, 100);\n    scene.add(directionalLight);\n\n    // Load World Map\n    var textureLoader = new three_module/* TextureLoader */.Tap();\n    textureLoader.load(worldMapPath, function (texture) {\n      var planeGeometry = new three_module/* PlaneGeometry */.bdM(400, 200);\n      var planeMaterial = new three_module/* MeshBasicMaterial */.V9B({\n        map: texture\n      });\n      var worldMap = new three_module/* Mesh */.eaF(planeGeometry, planeMaterial);\n      worldMap.rotation.x = -Math.PI / 2;\n      scene.add(worldMap);\n    });\n\n    // Load Jet Model\n    var loader = new GLTFLoader/* GLTFLoader */.B();\n    loader.load(jetModelPath, function (gltf) {\n      var jetModel = gltf.scene;\n      jetModel.scale.set(0.2, 0.2, 0.2);\n      for (var i = 0; i < NUM_JETS; i++) {\n        var jet = jetModel.clone();\n        var initialPosition = initializeJet(jet, i);\n        scene.add(jet);\n        jets.push({\n          object: jet,\n          index: i,\n          landed: false,\n          targetPosition: getLandingPosition(i),\n          initialPosition: initialPosition.clone(),\n          delay: i * 0.1 // Stagger jets\n        });\n      }\n    }, undefined, function (error) {\n      console.error(\'Error loading jet model:\', error);\n    });\n\n    // Handle Resize\n    window.addEventListener(\'resize\', onWindowResize);\n  }\n  function initializeJet(jet, index) {\n    var startX = -200 + 400 / NUM_JETS * index;\n    var startZ = -100; // Top edge of the map\n    var startY = 10;\n    var position = new three_module/* Vector3 */.Pq0(startX, startY, startZ);\n    jet.position.copy(position);\n    jet.lookAt(getLandingPosition(index));\n    jet.rotateY(Math.PI);\n    return position;\n  }\n  function getLandingPosition(index) {\n    var startAngle = 255; // Starting angle in degrees\n    var endAngle = 105; // Ending angle in degrees\n    var deltaAngle = (startAngle - endAngle) / (NUM_JETS - 1);\n    var angleDegrees = startAngle - deltaAngle * index;\n    var adjustedAngleDegrees = angleDegrees - 90;\n    var angleRadians = three_module/* MathUtils */.cj9.degToRad(adjustedAngleDegrees);\n    var landingRadius = 100;\n    var centerX = 0;\n    var centerZ = 28;\n    var landingX = centerX + landingRadius * Math.cos(angleRadians);\n    var landingZ = centerZ + landingRadius * Math.sin(angleRadians) * 0.5;\n    return new three_module/* Vector3 */.Pq0(landingX, 0, landingZ);\n  }\n  function animate() {\n    animationFrameId = requestAnimationFrame(animate);\n    var elapsedTime = (Date.now() - startTime) / 1000;\n    jets.forEach(function (jetData) {\n      if (!jetData.landed && elapsedTime > jetData.delay) {\n        var jet = jetData.object;\n        var target = jetData.targetPosition;\n        var direction = new three_module/* Vector3 */.Pq0().subVectors(target, jet.position).normalize();\n        var speed = 1; // Movement speed\n        jet.position.add(direction.multiplyScalar(speed));\n        var totalDistance = jetData.initialPosition.distanceTo(target);\n        var currentDistance = jet.position.distanceTo(target);\n        var scale = 0.2 + 0.8 * (1 - currentDistance / totalDistance);\n        jet.scale.set(scale, scale, scale);\n        if (jet.position.distanceTo(target) < 1) {\n          jetData.landed = true;\n          jet.position.copy(target);\n          var angleDegrees = 200 + (255 - 105) / (NUM_JETS - 1) * jetData.index;\n          var adjustedAngleDegrees = angleDegrees - 90;\n          var angleRadians = three_module/* MathUtils */.cj9.degToRad(adjustedAngleDegrees);\n          jet.rotation.set(0, angleRadians, 0);\n        }\n      }\n    });\n    controls.update();\n    renderer.render(scene, camera);\n  }\n  function onWindowResize() {\n    camera.aspect = 16 / 9;\n    camera.updateProjectionMatrix();\n    renderer.setSize(container.clientWidth, container.clientWidth * 9 / 16);\n  }\n\n  // Cleanup\n  return function () {\n    window.removeEventListener(\'resize\', onWindowResize);\n    cancelAnimationFrame(animationFrameId);\n    renderer.dispose();\n    controls.dispose();\n    container.removeChild(renderer.domElement);\n  };\n}\n;// ./src/components/graphs/007_JetAnimation.js\n\n\nvar JetAnimation = function JetAnimation() {\n  var containerRef = (0,react.useRef)(null);\n  (0,react.useEffect)(function () {\n    var cleanupFunction;\n    if (containerRef.current) {\n      cleanupFunction = startJetAnimation(containerRef.current);\n    }\n\n    // Clean up the animation when the component unmounts\n    return function () {\n      if (cleanupFunction) cleanupFunction();\n    };\n  }, []);\n  return /*#__PURE__*/react.createElement("div", {\n    id: "animation-container",\n    ref: containerRef,\n    style: {\n      width: \'100%\',\n      overflow: \'hidden\'\n    }\n  });\n};\n/* harmony default export */ const _007_JetAnimation = (JetAnimation);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 266 modules\nvar src = __webpack_require__(6496);\n;// ./src/components/graphs/007_ImportStackedBarChart.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\nvar StackedBarChart = function StackedBarChart() {\n  var svgRef = (0,react.useRef)();\n  var _useState = (0,react.useState)([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: \'\'\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    tooltip = _useState4[0],\n    setTooltip = _useState4[1];\n  (0,react.useEffect)(function () {\n    // Fetch the CSV data from a relative path or public directory\n    src/* csv */.fu7("".concat(process.env.PUBLIC_URL, "/data/processed/us_export.csv")).then(function (data) {\n      // Convert numeric columns to numbers\n      data.forEach(function (d) {\n        d.year = +d.year;\n        d.taiwan = +d.taiwan;\n        d.other = +d.other;\n      });\n      setData(data);\n    });\n  }, []);\n  (0,react.useEffect)(function () {\n    if (!data.length) return;\n\n    // Set up dimensions and margins\n    var margin = {\n      top: 20,\n      right: 40,\n      bottom: 40,\n      left: 60\n    };\n    var width = 800;\n    var height = 400;\n    var innerWidth = width - margin.left - margin.right;\n    var innerHeight = height - margin.top - margin.bottom;\n\n    // Select the SVG element and clear previous content\n    var svg = src/* select */.Ltv(svgRef.current).attr(\'viewBox\', "0 0 ".concat(width, " ").concat(height)).style(\'width\', \'100%\').style(\'height\', \'auto\').selectAll(\'*\').remove();\n    var chartGroup = src/* select */.Ltv(svgRef.current).append(\'g\').attr(\'transform\', "translate(".concat(margin.left, ", ").concat(margin.top, ")"));\n\n    // Set up scales\n    var xScale = src/* scaleBand */.WH().domain(data.map(function (d) {\n      return d.year;\n    })).range([0, innerWidth]).padding(0.1);\n    var yScale = src/* scaleLinear */.m4Y().domain([0, src/* max */.T9B(data, function (d) {\n      return d.taiwan + d.other;\n    })]).nice().range([innerHeight, 0]);\n    var colorScale = src/* scaleOrdinal */.UMr().domain([\'taiwan\', \'other\']).range([\'#44982A\', \'#e0e0e0\']); // Custom colors\n\n    // Draw stacked bars\n    var groups = chartGroup.selectAll(\'.bar-group\').data(data).enter().append(\'g\').attr(\'transform\', function (d) {\n      return "translate(".concat(xScale(d.year), ", 0)");\n    });\n\n    // Taiwan segment\n    groups.append(\'rect\').attr(\'y\', function (d) {\n      return yScale(d.taiwan + d.other);\n    }).attr(\'height\', function (d) {\n      return innerHeight - yScale(d.taiwan);\n    }).attr(\'width\', xScale.bandwidth()).attr(\'fill\', colorScale(\'taiwan\')).attr(\'rx\', 2).attr(\'ry\', 2).on(\'mouseover\', function (event, d) {\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip({\n        visible: true,\n        x: offsetX,\n        y: offsetY,\n        content: /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("strong", null, d.year), /*#__PURE__*/react.createElement("br", null), "Taiwan: $", d.taiwan.toLocaleString(), "B")\n      });\n    }).on(\'mousemove\', function (event) {\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          x: offsetX,\n          y: offsetY\n        });\n      });\n    }).on(\'mouseleave\', function () {\n      return setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: \'\'\n      });\n    });\n\n    // Other regions segment\n    groups.append(\'rect\').attr(\'y\', function (d) {\n      return yScale(d.other);\n    }).attr(\'height\', function (d) {\n      return innerHeight - yScale(d.other);\n    }).attr(\'width\', xScale.bandwidth()).attr(\'fill\', colorScale(\'other\')).attr(\'rx\', 2).attr(\'ry\', 2).on(\'mouseover\', function (event, d) {\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip({\n        visible: true,\n        x: offsetX,\n        y: offsetY,\n        content: /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("strong", null, d.year), /*#__PURE__*/react.createElement("br", null), "Other Regions: $", d.other.toLocaleString(), "B")\n      });\n    }).on(\'mousemove\', function (event) {\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          x: offsetX,\n          y: offsetY\n        });\n      });\n    }).on(\'mouseleave\', function () {\n      return setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: \'\'\n      });\n    });\n\n    // Add axes\n    chartGroup.append(\'g\').attr(\'transform\', "translate(0, ".concat(innerHeight, ")")).call(src/* axisBottom */.l78(xScale).tickFormat(src/* format */.GPZ(\'d\'))).selectAll(\'text\').style(\'font-size\', \'12px\').style(\'fill\', \'#e0e0e0\');\n    chartGroup.append(\'g\').call(src/* axisLeft */.V4s(yScale).tickFormat(function (d) {\n      return "".concat(d / 1000, "B");\n    })).selectAll(\'text\').style(\'font-size\', \'12px\').style(\'fill\', \'#e0e0e0\');\n  }, [data]);\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\',\n      paddingBottom: \'20px\'\n    }\n  }, "US Arms Export"), /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef,\n    style: {\n      width: \'100%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }), tooltip.visible && /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      top: tooltip.y,\n      left: tooltip.x,\n      backgroundColor: \'rgba(0, 0, 0, 0.8)\',\n      color: \'#e0e0e0\',\n      padding: \'12px\',\n      borderRadius: \'8px\',\n      boxShadow: \'0 4px 12px rgba(0, 0, 0, 0.3)\',\n      fontSize: \'16px\',\n      lineHeight: \'1.6\',\n      pointerEvents: \'none\',\n      whiteSpace: \'nowrap\',\n      zIndex: 10\n    }\n  }, tooltip.content));\n};\n/* harmony default export */ const _007_ImportStackedBarChart = (StackedBarChart);\n;// ./src/components/007_taiwan.js\n\n\n\nvar taiwan = function taiwan() {\n  return /*#__PURE__*/react.createElement("section", {\n    id: "007"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Case Study: Taiwan"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "As illustrated in the previous chapters, the SIPRI dataset keeps a detailed record of arms transfers, which include many monumental ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#4682B4\'\n    }\n  }, "US"), " arms sales to its allies."), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "In 1992, ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#4682B4\'\n    }\n  }, "US"), " President George H.W. Bush approved the sale of 150 F-16 fighter jets to ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#44982A\'\n    }\n  }, "Taiwan")), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }, /*#__PURE__*/react.createElement(_007_JetAnimation, null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Arms Trades and Major Historical Events"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "In the stacked barchart below, we can see that the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#4682B4\'\n    }\n  }, "United States\'"), " weapon exports to ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#44982A\'\n    }\n  }, "Taiwan"), " coincide with major historical events:"), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_007_ImportStackedBarChart, null)), /*#__PURE__*/react.createElement("ul", {\n    style: {\n      cssText: \'margin-top: 1.5rem\'\n    }\n  }, /*#__PURE__*/react.createElement("li", null, "First (1954 - 1955) and second (1958) Taiwan Strait Crisis"), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, "Rise of China (early 1990s) and the third Taiwan Strait Crisis (1996)"), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, "China\'s shift in foreign policy (early 2010s)"), /*#__PURE__*/react.createElement("br", null)));\n};\n/* harmony default export */ const _007_taiwan = (taiwan);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9041\n')}}]);