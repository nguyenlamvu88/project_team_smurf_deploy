"use strict";(self.webpackChunkproject_team_smurf_deploy=self.webpackChunkproject_team_smurf_deploy||[]).push([[248],{2248:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _004_proxySupport)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 272 modules\nvar src = __webpack_require__(1445);\n;// ./src/components/graphs/004_Top10RecipientsPCC.js\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\nvar ParallelCoordinatesChart = function ParallelCoordinatesChart(_ref) {\n  var selectedYear = _ref.selectedYear,\n    setSelectedYear = _ref.setSelectedYear;\n  var svgRef = (0,react.useRef)();\n  var margin = {\n    top: 80,\n    right: 80,\n    bottom: 40,\n    left: 80\n  };\n  var width = 1000 - margin.left - margin.right;\n  var height = 450 - margin.top - margin.bottom;\n  var dataUrl = \'/data/processed/processed_recipients_of_combined_us_china_russia_arms_hierarchical.json\';\n  var _useState = (0,react.useState)(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var fixedRecipients = [\'Japan\', \'South Korea\', \'Taiwan\', \'Israel\', \'Germany\', \'China\', \'India\', \'Turkiye\', \'Saudi Arabia\', \'Iran\'];\n  var colorScale = src/* scaleOrdinal */.UMr().domain([\'United States\', \'Russia\', \'China\']).range([\'#4682B4\', \'#DC143C\', \'#FFDB58\']); // Blue, red, yellow\n\n  (0,react.useEffect)(function () {\n    src/* json */.Pq9(dataUrl).then(function (rawData) {\n      var flattenedData = [];\n      rawData.data.forEach(function (supplierData) {\n        var supplier = supplierData.supplier;\n        supplierData.recipients.forEach(function (recipientData) {\n          var recipient = recipientData.recipient;\n          Object.entries(recipientData.years).forEach(function (_ref2) {\n            var _ref3 = _slicedToArray(_ref2, 2),\n              year = _ref3[0],\n              value = _ref3[1];\n            flattenedData.push({\n              supplier: supplier === "United States of America" ? "USA" : supplier,\n              recipient: recipient,\n              year: +year,\n              value: value\n            });\n          });\n        });\n      });\n      setData(flattenedData);\n    });\n  }, []);\n  (0,react.useEffect)(function () {\n    if (!data || data.length === 0) return;\n    var filteredYearData = data.filter(function (d) {\n      return d.year === selectedYear;\n    });\n    // Aggregate total trade value by recipient\n    var destinationTotals = src/* rollups */.i8y(filteredYearData, function (v) {\n      return src/* sum */.czq(v, function (d) {\n        return d.value;\n      });\n    }, function (d) {\n      return d.recipient;\n    });\n\n    // Sort and take the top 10 recipients by total trade value\n    var topDestinations = destinationTotals.sort(function (a, b) {\n      return b[1] - a[1];\n    }).slice(0, 10).map(function (d) {\n      return d[0];\n    });\n\n    // Filter data to include only the top 10 recipients\n    var filteredData = filteredYearData.filter(function (d) {\n      return topDestinations.includes(d.recipient);\n    });\n    var validData = filteredData.map(function (d) {\n      return {\n        supplier: d.supplier || "Unknown",\n        recipient: d.recipient || "Unknown",\n        value: d.value !== undefined && !isNaN(d.value) ? d.value : 0\n      };\n    });\n    // Define dimensions for parallel coordinates\n    var dimensions = ["supplier", "recipient", "value"];\n\n    // Set up scales for each dimension\n    var yScales = {};\n    dimensions.forEach(function (dim) {\n      if (dim === "value") {\n        yScales[dim] = src/* scaleSymlog */.aX1().constant(1000).domain([1, 5000]).range([height, 0]);\n      } else {\n        yScales[dim] = src/* scalePoint */.hqK().domain(_toConsumableArray(new Set(filteredData.map(function (d) {\n          return d[dim];\n        })))).range([height, 0]);\n      }\n    });\n\n    // X scale for each dimension\n    var xScale = src/* scalePoint */.hqK().domain(dimensions).range([0, width]);\n\n    // Select the SVG element and clear previous content\n    var svg = src/* select */.Ltv(svgRef.current).attr("viewBox", "0 0 ".concat(width + margin.left + margin.right, " ").concat(height + margin.top + margin.bottom));\n    svg.selectAll("*").remove();\n    var tooltip = src/* select */.Ltv("body").append("div").attr("class", "tooltip") // Assign a class for styling\n    .style("position", "absolute").style("background", "rgba(0, 0, 0, 0.9)").style("color", "white").style("padding", "12px").style("border-radius", "8px").style("pointer-events", "none").style("line-height", "1.6").style("display", "none");\n\n    // Add a group element for margins\n    var chartGroup = svg.append("g").attr("transform", "translate(".concat(margin.left, ", ").concat(margin.top, ")"));\n\n    // Helper function to draw each line\n    var path = function path(d) {\n      return src/* line */.n8j()(dimensions.map(function (dim) {\n        return [xScale(dim), yScales[dim](d[dim])];\n      }));\n    };\n\n    // Draw each line for each data point\n    chartGroup.selectAll("path").data(validData).join("path").attr("d", path).style("fill", "none").style("stroke", function (d) {\n      return colorScale(d.supplier);\n    }) // Use supplier color scale\n    .style("opacity", 0.8).style("stroke-width", 3).on("mouseover", function (event, d) {\n      src/* select */.Ltv(event.currentTarget).style("opacity", 1) // Highlight line\n      .style("stroke-width", 3); // Increase width on hover\n      tooltip.style("display", "block").html("\\n            <strong>Supplier:</strong> ".concat(d.supplier, "<br>\\n            <strong>Recipient:</strong> ").concat(d.recipient, "<br>\\n            <strong>Value:</strong> $").concat(d.value.toLocaleString(), "M\\n          "));\n    }).on("mousemove", function (event) {\n      tooltip.style("top", "".concat(event.pageY - 10, "px")).style("left", "".concat(event.pageX + 10, "px"));\n    }).on("mouseout", function (event) {\n      src/* select */.Ltv(event.currentTarget).style("opacity", 0.8) // Reset opacity\n      .style("stroke-width", 5); // Reset width\n      tooltip.style("display", "none");\n    });\n    var labelMapping = {\n      supplier: "Supplier",\n      recipient: "Recipient",\n      value: "Million USD"\n    };\n    // Draw axes for each dimension\n    dimensions.forEach(function (dim) {\n      var axisGroup = chartGroup.append("g").attr("transform", "translate(".concat(xScale(dim), ", 0)"));\n\n      // Add Y-axis for each dimension\n      axisGroup.call(src/* axisLeft */.V4s(yScales[dim]).ticks(5).tickSize(10) // Make ticks longer\n      .tickSizeOuter(0)).selectAll("line") // Style the tick lines\n      .style("stroke", "#e0e0e0").style("stroke-width", 2); // Thicker tick lines\n\n      // Style the axis line\n      axisGroup.select(".domain").style("stroke", "#e0e0e0").style("stroke-width", 3); // Thicker axis bar\n\n      // Customize tick labels\n      axisGroup.selectAll("text").style("font-size", "14px").style("font-weight", "bold").style("fill", "#e0e0e0");\n\n      // Axis label\n      axisGroup.append("text").attr("y", -25).attr("x", -5).attr("text-anchor", "middle").text(labelMapping[dim]).style("fill", "#e0e0e0").style("font-size", "16px").style("font-weight", "bold");\n    });\n  }, [data, selectedYear]);\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Top Arms Trades ", selectedYear), /*#__PURE__*/react.createElement("input", {\n    type: "range",\n    min: "1950",\n    max: "2023",\n    value: selectedYear,\n    onChange: function onChange(e) {\n      return setSelectedYear(+e.target.value);\n    },\n    style: {\n      width: \'80%\',\n      appearance: \'none\',\n      height: \'8px\',\n      backgroundColor: \'gray\',\n      borderRadius: \'5px\',\n      outline: \'none\',\n      margin: \'20px auto 10px\',\n      display: \'block\',\n      accentColor: \'#e74c3c\'\n    }\n  }), /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef,\n    style: {\n      width: \'100%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }));\n};\n/* harmony default export */ const _004_Top10RecipientsPCC = (ParallelCoordinatesChart);\n;// ./src/components/004_proxySupport.js\nfunction _004_proxySupport_slicedToArray(r, e) { return _004_proxySupport_arrayWithHoles(r) || _004_proxySupport_iterableToArrayLimit(r, e) || _004_proxySupport_unsupportedIterableToArray(r, e) || _004_proxySupport_nonIterableRest(); }\nfunction _004_proxySupport_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _004_proxySupport_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _004_proxySupport_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _004_proxySupport_arrayLikeToArray(r, a) : void 0; } }\nfunction _004_proxySupport_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _004_proxySupport_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _004_proxySupport_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\nvar proxySupport = function proxySupport() {\n  var _useState = (0,react.useState)(2014),\n    _useState2 = _004_proxySupport_slicedToArray(_useState, 2),\n    selectedYear = _useState2[0],\n    setSelectedYear = _useState2[1];\n  var handleYearChange = function handleYearChange(year) {\n    setSelectedYear(year);\n  };\n  return /*#__PURE__*/react.createElement("section", {\n    id: "004"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Countering through Proxy Support"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "The ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " maintains strategic alliances across Asia and the Middle East to counter regional threats. This includes supplying advanced weaponry to ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Taiwan"), ", ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Japan"), ", ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "South Korea"), ", ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Israel"), ", and ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Saudi Arabia"), ", aimed at countering China\'s influence and ensuring regional stability."), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#FFD700"\n    }\n  }, "China"), " relies mainly on domestic arms production, with significant support from ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " for strategic gains. Meanwhile, ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "India"), " diversifies its procurement with major imports from Russia, the ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), ", and Israel to enhance security."), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "Within NATO, countries like ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Turkey"), " and ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Germany"), " balance Western alliances with regional ambitions, similar to ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Saudi Arabia"), "\'s approach to stabilizing its region with Western support. Additionally, ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Iran"), " maintains limited but strategic ties with Russia to assert its influence against Western powers."), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Geopolitical Shifts"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, /*#__PURE__*/react.createElement("strong", null, "Cold War Era (1947-1991)"), ": The ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " and ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Soviet Union"), " engaged in proxy wars, driving high arms trade volumes. ", /*#__PURE__*/react.createElement("button", {\n    onClick: function onClick() {\n      return handleYearChange(1970);\n    }\n  }, "View")), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, /*#__PURE__*/react.createElement("strong", null, "Post-Cold War (1991-Present)"), ": The ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " dominates, exporting to strategic regions, with ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#FFD700"\n    }\n  }, "China"), " and ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "India"), " emerging as key players. ", /*#__PURE__*/react.createElement("button", {\n    onClick: function onClick() {\n      return handleYearChange(1993);\n    }\n  }, "View")), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, /*#__PURE__*/react.createElement("strong", null, "Recent Decades (2000s-2020s)"), ": Middle Eastern and Asia-Pacific tensions drive significant arms trade with ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Saudi Arabia"), ", ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Israel"), ", ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Turkey"), ", ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Japan"), ", ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "South Korea"), ", and ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "Taiwan"), ". ", /*#__PURE__*/react.createElement("button", {\n    onClick: function onClick() {\n      return handleYearChange(2006);\n    }\n  }, "View")), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, /*#__PURE__*/react.createElement("strong", null, "Russia-Ukraine Conflict"), ": The conflict reshapes trade, with Western nations backing Ukraine and ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia"), " facing sanctions. ", /*#__PURE__*/react.createElement("button", {\n    onClick: function onClick() {\n      return handleYearChange(2022);\n    }\n  }, "View")), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, /*#__PURE__*/react.createElement("strong", null, "Great Power Competition"), ": ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), "-", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#FFD700"\n    }\n  }, "China"), " competition redefines global alliances, with the ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "US"), " fortifying Indo-Pacific ties and ", /*#__PURE__*/react.createElement("strong", {\n    style: {\n      color: "#FFD700"\n    }\n  }, "China"), " expanding its influence. ", /*#__PURE__*/react.createElement("button", {\n    onClick: function onClick() {\n      return handleYearChange(2016);\n    }\n  }, "View")), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_004_Top10RecipientsPCC, {\n    selectedYear: selectedYear,\n    setSelectedYear: setSelectedYear\n  })));\n};\n/* harmony default export */ const _004_proxySupport = (proxySupport);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2248\n')}}]);