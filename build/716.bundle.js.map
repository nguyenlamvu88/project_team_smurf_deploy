{"version":3,"file":"716.bundle.js","mappings":"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","sources":["webpack://project_team_smurf_deploy/./src/components/graphs/002_ImportExportLinechart.js","webpack://project_team_smurf_deploy/./src/components/002_competition.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport RangeSlider from 'react-range-slider-input';\r\nimport 'react-range-slider-input/dist/style.css';\r\n\r\n\r\nconst ImportExportLinechart = () => {\r\n  const svgRef = useRef();\r\n  const width = 800;\r\n  const height = 400;\r\n  const margin = { top: 60, right: 100, bottom: 30, left: 60 };\r\n  const [data, setData] = useState([]);\r\n  const [selectedCountries, setSelectedCountries] = useState(['India', 'China']);\r\n  const [yearRange, setYearRange] = useState([1950, 2023]);\r\n  const [tradeType, setTradeType] = useState('export');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Set URLs for arms trade data\r\n  const armsSuppliersDataUrl = '/data/processed/processed_arms_suppliers.csv';\r\n  const armsRecipientsDataUrl = '/data/processed/processed_arms_recipients.csv';\r\n\r\n  useEffect(() => {\r\n    const dataUrl = tradeType === 'import' ? armsRecipientsDataUrl : armsSuppliersDataUrl;\r\n    const countryKey = tradeType === 'import' ? 'Recipient' : 'supplier';\r\n\r\n    setLoading(true);\r\n    d3.csv(dataUrl).then(rawData => {\r\n      const yearColumns = Object.keys(rawData[0]).filter(col => !isNaN(col));\r\n      const countryTotals = rawData.map(row => ({\r\n        country: row[countryKey],\r\n        total: yearColumns.reduce((sum, year) => sum + (+row[year] || 0), 0)\r\n      }));\r\n\r\n      const top10Countries = countryTotals\r\n        .sort((a, b) => b.total - a.total)\r\n        .slice(0, 10)\r\n        .map(d => d.country);\r\n\r\n      const processedData = rawData\r\n        .filter(row => top10Countries.includes(row[countryKey]))\r\n        .map(row => ({\r\n          country: row[countryKey],\r\n          values: yearColumns.map(year => ({ year: +year, value: (+row[year] || 0) / 1000 }))\r\n        }));\r\n\r\n      setData(processedData);\r\n\r\n      // Set selectedCountries based on tradeType\r\n      if (tradeType === 'export') {\r\n        setSelectedCountries(['United States', 'China', 'Russia'].filter(c => top10Countries.includes(c)));\r\n      } else if (tradeType === 'import') {\r\n        setSelectedCountries(['China', 'India'].filter(c => top10Countries.includes(c)));\r\n      }\r\n\r\n      setLoading(false);\r\n    }).catch(error => {\r\n      console.error(\"Error loading or processing data:\", error);\r\n      setLoading(false);\r\n    });\r\n  }, [tradeType]);\r\n\r\n  useEffect(() => {\r\n    if (data.length === 0) return;\r\n\r\n    const svg = d3.select(svgRef.current)\r\n      .attr(\"viewBox\", `0 0 ${width} ${height}`)\r\n\r\n      .style(\"border-radius\", \"8px\");\r\n\r\n    svg.selectAll('*').remove();\r\n\r\n    // Title\r\n    svg.append(\"text\")\r\n      .attr(\"x\", width / 2)\r\n      .attr(\"y\", 20)\r\n      .attr(\"text-anchor\", \"middle\")\r\n      .style(\"font-size\", \"20px\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .style(\"fill\", \"#e0e0e0\")\r\n      .text(`Arms ${tradeType === 'import' ? 'Imports' : 'Exports'} by Country`);\r\n\r\n    // Y-axis Label\r\n    svg.append(\"text\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"x\", -height / 2)\r\n      .attr(\"y\", 0)\r\n      .attr(\"dy\", \"1em\")\r\n      .style(\"text-anchor\", \"middle\")\r\n      .style(\"font-size\", \"16px\")\r\n      .style(\"fill\", \"#e0e0e0\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .text(`Value (Billion USD)`);\r\n\r\n    // Tooltip and vertical line\r\n    const tooltip = d3.select(\"body\").append(\"div\")\r\n      .attr(\"class\", \"tooltip\")\r\n      .style(\"position\", \"absolute\")\r\n      .style(\"padding\", \"12px\")\r\n      .style(\"background\", \"rgba(0, 0, 0, 0.8)\")\r\n      .style(\"color\", \"#e0e0e0\")\r\n      .style(\"border-radius\", \"8px\")\r\n      .style(\"font-size\", \"16px\")\r\n      .style(\"display\", \"none\");\r\n\r\n    const verticalLine = svg.append(\"line\")\r\n      .attr(\"y1\", margin.top)\r\n      .attr(\"y2\", height - margin.bottom)\r\n      .attr(\"stroke\", \"#aaa\")\r\n      .attr(\"stroke-width\", 1)\r\n      .attr(\"stroke-dasharray\", \"4 4\")\r\n      .style(\"display\", \"none\");\r\n\r\n    // Filter data based on selected countries and year range\r\n    const filteredData = data\r\n      .filter(d => selectedCountries.includes(d.country))\r\n      .map(d => ({\r\n        ...d,\r\n        values: d.values.filter(v => v.year >= yearRange[0] && v.year <= yearRange[1])\r\n      }));\r\n\r\n    // Define scales\r\n    const xScale = d3.scaleLinear()\r\n      .domain(yearRange)\r\n      .range([margin.left, width - margin.right - 20]);\r\n\r\n    const yMax = d3.max(filteredData, d => d3.max(d.values, v => v.value)) || 0;\r\n    const yScale = d3.scaleLinear()\r\n      .domain([0, yMax])\r\n      .range([height - margin.bottom, margin.top]);\r\n\r\n    const color = d3.scaleOrdinal(d3.schemeCategory10).domain(selectedCountries);\r\n\r\n    const line = d3.line()\r\n      .x(d => xScale(d.year))\r\n      .y(d => yScale(d.value));\r\n\r\n    // X and Y Axes\r\n    svg.append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\r\n      .call(d3.axisBottom(xScale).tickFormat(d3.format(\"d\")))\r\n      .style(\"font-size\", \"15px\")\r\n      .style(\"fill\", \"#e0e0e0\");\r\n\r\n    svg.append(\"g\")\r\n      .attr(\"transform\", `translate(${margin.left}, 0)`)\r\n      .call(d3.axisLeft(yScale).tickFormat(d => `${d}B`))\r\n      .style(\"font-size\", \"15px\")\r\n      .style(\"fill\", \"#e0e0e0\");\r\n\r\n    // Draw lines\r\n    svg.selectAll(\".line\")\r\n      .data(filteredData)\r\n      .join(\"path\")\r\n      .attr(\"class\", \"line\")\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", d => {\r\n        if (d.country === 'United States') return '#4682B4'; // Color for United States\r\n        if (d.country === 'China') return '#FFDB58';          // Color for China\r\n        if (d.country === 'Russia') return '#DC143C';         // Color for Russia\r\n        return color(d.country);                              // Default color scale for other countries\r\n      })\r\n      .attr(\"stroke-width\", 3.25)\r\n      .attr(\"d\", d => line(d.values));\r\n\r\n    // Draw dots\r\n    svg.selectAll(\".dot\")\r\n      .data(filteredData.flatMap(d => d.values.map(v => ({ ...v, country: d.country }))))\r\n      .join(\"circle\")\r\n      .attr(\"class\", \"dot\")\r\n      .attr(\"cx\", d => xScale(d.year))\r\n      .attr(\"cy\", d => yScale(d.value))\r\n      .attr(\"r\", 5.5)\r\n      .attr(\"fill\", d => {\r\n        if (d.country === 'United States') return '#4682B4'; // Color for United States\r\n        if (d.country === 'China') return '#FFDB58';          // Color for China\r\n        if (d.country === 'Russia') return '#DC143C';         // Color for Russia\r\n        return color(d.country);                              // Default color scale for other countries\r\n      })\r\n      .on(\"mouseover\", (event, d) => {\r\n        verticalLine.style(\"display\", \"block\");\r\n        tooltip.style(\"display\", \"block\");\r\n      })\r\n      .on(\"mousemove\", (event) => {\r\n        const mouseX = event.pageX - svg.node().getBoundingClientRect().left;\r\n        verticalLine.attr(\"x1\", mouseX).attr(\"x2\", mouseX);\r\n        \r\n        const closestYear = Math.round(xScale.invert(mouseX));\r\n\r\n        const tooltipData = filteredData\r\n          .map(countryData => {\r\n            // Find the closest data point in time for each country\r\n            const closestPoint = countryData.values.reduce((prev, curr) =>\r\n              Math.abs(curr.year - closestYear) < Math.abs(prev.year - closestYear) ? curr : prev\r\n            );\r\n            return `<strong>${countryData.country}</strong><br/>$${closestPoint.value.toFixed(2)}B`;\r\n          })\r\n          .join(\"<br/><br/>\");\r\n\r\n        // Combine the year with each country’s data\r\n        const finalTooltipData = `<strong>${closestYear}</strong><br/><br/>${tooltipData}`;\r\n\r\n        tooltip\r\n          .html(finalTooltipData)\r\n          .style(\"left\", `${event.pageX + 10}px`)\r\n          .style(\"top\", `${event.pageY - 20}px`);\r\n      })\r\n      .on(\"mouseout\", () => {\r\n        verticalLine.style(\"display\", \"none\");\r\n        tooltip.style(\"display\", \"none\");\r\n      });\r\n\r\n    // Country labels\r\n    svg.selectAll(\".country-label\")\r\n      .data(filteredData)\r\n      .join(\"text\")\r\n      .attr(\"class\", \"country-label\")\r\n      .attr(\"x\", width - margin.right - 15) // Position to the right of the line\r\n      .attr(\"y\", d => yScale(d.values[d.values.length - 1].value))\r\n      .attr(\"dy\", \"0.35em\")\r\n      .attr(\"text-anchor\", \"start\")\r\n      .text(d => d.country)\r\n      .style(\"fill\", d => {\r\n        if (d.country === 'United States') return '#4682B4'; // Color for United States\r\n        if (d.country === 'China') return '#FFDB58';          // Color for China\r\n        if (d.country === 'Russia') return '#DC143C';         // Color for Russia\r\n        return color(d.country);                              // Default color scale for other countries\r\n      })\r\n      .style(\"font-size\", \"16px\");\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      tooltip.remove();\r\n      verticalLine.remove();\r\n    };\r\n  }, [data, selectedCountries, yearRange, tradeType]);\r\n\r\n  const handleCountryToggle = (country) => {\r\n    setSelectedCountries(prev =>\r\n      prev.includes(country) ? prev.filter(c => c !== country) : [...prev, country]\r\n    );\r\n  };\r\n\r\n  const handleTradeTypeChange = (event) => {\r\n    const newTradeType = event.target.value;\r\n    setTradeType(newTradeType);\r\n    if (newTradeType === 'export') {\r\n      setSelectedCountries(['United States', 'China', 'Russia']);\r\n    } else if (newTradeType === 'import') {\r\n      setSelectedCountries(['China', 'India']);\r\n    }\r\n  };\r\n\r\n  const resetSelections = () => {\r\n    setTradeType('export');\r\n    setYearRange([1950, 2023]);\r\n    setSelectedCountries(['United States', 'China', 'Russia']);\r\n  };\r\n\r\n  return (\r\n    <div style={{display: 'flex', alignItems: 'flex-start', padding: '20px', border: '3px solid #e74c3c', borderRadius: '8px' }}>\r\n      <div style={{ flex: '1' }}>\r\n        <svg ref={svgRef} width={width} height={height}></svg>\r\n      </div>\r\n\r\n      <div style={{ marginLeft: '20px', width: '250px', display: 'flex', flexDirection: 'column', color: '#e6e6e6' }}>\r\n        <p style={{ fontWeight: 'bold', fontSize: '16px' }}>Trade Type</p>\r\n        <select name=\"typeSelector\" value={tradeType} onChange={handleTradeTypeChange} style={{backgroundColor:'#444444', color: '#e0e0e0', margin: '10px 0', padding: '5px', border: '2px solid #e0e0e0', borderRadius: '4px' }}>\r\n          <option value=\"import\">Imports</option>\r\n          <option value=\"export\">Exports</option>\r\n        </select>\r\n\r\n        <button onClick={resetSelections}\r\n          style={{\r\n            backgroundColor: '#e74c3c',\r\n            color: '#e0e0e0',\r\n            padding: '8px 12px',\r\n            border: 'none',\r\n            borderRadius: '4px',\r\n            cursor: 'pointer',\r\n            fontSize: '14px',\r\n            fontWeight: 'bold',\r\n            marginTop: '10px'\r\n          }}\r\n        >\r\n          Reset Selections\r\n        </button>\r\n\r\n        <div style={{ marginTop: '20px' }}>\r\n          <RangeSlider\r\n            min={1950}\r\n            max={2023}\r\n            defaultValue={yearRange}\r\n            value={yearRange} \r\n            onInput={(values) => setYearRange(values)}\r\n            className=\"custom-range-slider\"\r\n            style={{ width: '100%', margin: '10px 0',}}\r\n          />\r\n          <style>\r\n            {`\r\n              .custom-range-slider .range-slider__track,\r\n              .custom-range-slider .range-slider__thumb,\r\n              .custom-range-slider .range-slider__range {\r\n                background-color: #e74c3c; /* Sets the color to red */\r\n              }\r\n              \r\n              /* Thumb specific style */\r\n              .custom-range-slider .range-slider__thumb {\r\n                border-color: #e74c3c;\r\n              }\r\n              \r\n              /* Track specific style */\r\n              .custom-range-slider .range-slider__track {\r\n                background-color: #e74c3c;\r\n              }\r\n            `}\r\n          </style>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', color: '#e74c3c', fontSize: '14px', marginTop: '10px' }}>\r\n            <span>{yearRange[0]}</span>\r\n            <span>{yearRange[1]}</span>\r\n          </div>\r\n        </div>\r\n\r\n        <p style={{ fontWeight: 'bold', fontSize: '16px', marginTop: '20px', color: '#e0e0e0' }}>Select Countries</p>\r\n        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(2, auto)', gap: '10px', marginTop: '10px' }}>\r\n          {data.map(d => (\r\n            <div key={d.country} style={{ display: 'flex', alignItems: 'center', color: '#e0e0e0' }}>\r\n              <input\r\n                type=\"checkbox\"\r\n                name=\"countryCheckbox\"\r\n                value={d.country}\r\n                checked={selectedCountries.includes(d.country)}\r\n                onChange={() => handleCountryToggle(d.country)}\r\n                style={{ marginRight: '5px' }}\r\n              />\r\n              <p>{d.country}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImportExportLinechart;\r\n","import React, { useState } from 'react';\r\nimport ImportExportLinechart from './graphs/002_ImportExportLinechart';\r\n\r\nconst competition = () => {\r\n  return (\r\n    <section id=\"002\">\r\n      <p className=\"custom-title\" style={{cssText: 'margin-top: 0'}}>\r\n        Competition in Strategic Regions\r\n      </p>\r\n\r\n      <p className=\"custom-paragraph\">\r\n          The global arms trade has shifted from a US-Soviet rivalry to a multipolar competition, \r\n          with <span style={{ color: \"#FFDB58\" }}>China</span> joining the <span style={{ color: \"#4682B4\" }}>US</span> and <span style={{ color: \"#DC143C\" }}>Russia</span> as key players. \r\n          Each nation’s influence is shaped by historical events, alliances, and economic factors, impacting global security dynamics.<br/>\r\n      </p>\r\n\r\n      <ul>\r\n        <li><span style={{ color: \"#e74c3c\" }}>Cold War Era (1947-1991)</span> The <span style={{ color: \"#4682B4\" }}>US</span> and <span style={{ color: \"#DC143C\" }}>Soviet Union</span> dominated arms exports, each supporting allies to extend ideological influence.</li><br />\r\n        <li><span style={{ color: \"#e74c3c\" }}>Post-Cold War Shift (1991-2000)</span> With the <span style={{ color: \"#DC143C\" }}>Soviet Union’s</span> collapse, the <span style={{ color: \"#4682B4\" }}>US</span> emerged as the top arms exporter, backed by a strong economy and stable alliances.</li><br />\r\n        <li><span style={{ color: \"#e74c3c\" }}>Russia’s Resurgence (Early 2000s)</span> Under Putin, <span style={{ color: \"#DC143C\" }}>Russia</span> rebuilt its defense industry, regaining clients with affordable options like the S-400.</li><br />\r\n        <li><span style={{ color: \"#e74c3c\" }}>China’s Rise (2000s-Present)</span> <span style={{ color: \"#FFDB58\" }}>China</span> entered the market, offering affordable alternatives to Western and Russian arms, appealing to regions like Africa and Southeast Asia. The Belt and Road initiative and a non-interference policy further bolstered <span style={{ color: \"#FFDB58\" }}>China’s</span> appeal.</li><br />\r\n        <li><span style={{ color: \"#e74c3c\" }}>China Surpasses Russia (2022)</span> In 2022, <span style={{ color: \"#FFDB58\" }}>China</span> became the second-largest arms exporter as <span style={{ color: \"#DC143C\" }}>Russia</span> faced challenges due to the Ukraine conflict and Western sanctions.</li><br />\r\n      </ul> \r\n\r\n      <div className=\"chart-container\" style={{width: '80%'}}>\r\n        <ImportExportLinechart />\r\n      </div>\r\n\r\n      <p className=\"custom-title\">\r\n        Global Implications\r\n      </p>\r\n\r\n      <p className=\"custom-paragraph\">\r\n        The arms trade now includes three key exporters with distinct strategies:\r\n      </p>\r\n\r\n      <ul>\r\n        <li>The <span style={{ color: \"#4682B4\" }}>US</span> leads in high-tech systems for wealthy allies.</li><br />\r\n        <li><span style={{ color: \"#DC143C\" }}>Russia</span> faces limitations due to sanctions and internal demands.</li><br />\r\n        <li><span style={{ color: \"#FFDB58\" }}>China</span> offers affordable, flexible options to budget-conscious nations. Its rapid rise signals ambitions to reshape global power dynamics economically and militarily, adding complexity to global security.</li><br />\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default competition;\r\n"],"names":["svgRef","useRef","width","height","_useState2","_slicedToArray","useState","data","setData","_useState4","selectedCountries","setSelectedCountries","_useState6","yearRange","setYearRange","_useState8","tradeType","setTradeType","_useState10","setLoading","useEffect","dataUrl","countryKey","d3","then","rawData","yearColumns","Object","keys","filter","col","isNaN","top10Countries","map","row","country","total","reduce","sum","year","sort","a","b","slice","d","processedData","includes","values","value","c","error","console","length","svg","current","attr","concat","style","selectAll","remove","append","text","tooltip","verticalLine","filteredData","_objectSpread","v","xScale","domain","range","yMax","yScale","color","line","x","y","call","tickFormat","join","flatMap","on","event","mouseX","pageX","node","getBoundingClientRect","left","closestYear","Math","round","invert","tooltipData","countryData","closestPoint","prev","curr","abs","toFixed","finalTooltipData","html","pageY","React","display","alignItems","padding","border","borderRadius","flex","ref","marginLeft","flexDirection","fontWeight","fontSize","name","onChange","newTradeType","target","backgroundColor","margin","onClick","cursor","marginTop","RangeSlider","min","max","defaultValue","onInput","className","justifyContent","gridTemplateColumns","gap","key","type","checked","marginRight","id","cssText","ImportExportLinechart"],"sourceRoot":""}