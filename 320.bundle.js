"use strict";(self.webpackChunkproject_team_smurf_deploy=self.webpackChunkproject_team_smurf_deploy||[]).push([[320],{3320:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ _005_emergingThreats)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(6540);\n// EXTERNAL MODULE: ./node_modules/d3/src/index.js + 272 modules\nvar src = __webpack_require__(1445);\n// EXTERNAL MODULE: ./node_modules/topojson-client/src/feature.js + 3 modules\nvar feature = __webpack_require__(1796);\n;// ./src/components/graphs/005_WeaponTypeChoroplethMap.js\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }\nfunction _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\nvar ChoroplethMap = function ChoroplethMap() {\n  var svgRef = (0,react.useRef)();\n  var pieChartRef = (0,react.useRef)();\n\n  // State Variables\n  var _useState = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: null\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    tooltip = _useState2[0],\n    setTooltip = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    modalData = _useState4[0],\n    setModalData = _useState4[1]; // For storing data to display in the modal\n  var _useState5 = (0,react.useState)({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    countryData = _useState6[0],\n    setCountryData = _useState6[1];\n  var _useState7 = (0,react.useState)([]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    countries = _useState8[0],\n    setCountries = _useState8[1]; // Store GeoJSON features\n  var _useState9 = (0,react.useState)(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedYear = _useState10[0],\n    setSelectedYear = _useState10[1]; // Initialize to null\n  var _useState11 = (0,react.useState)(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    selectedWeaponType = _useState12[0],\n    setSelectedWeaponType = _useState12[1]; // Initialize to null\n  var _useState13 = (0,react.useState)([]),\n    _useState14 = _slicedToArray(_useState13, 2),\n    weaponTypes = _useState14[0],\n    setWeaponTypes = _useState14[1];\n  var _useState15 = (0,react.useState)({}),\n    _useState16 = _slicedToArray(_useState15, 2),\n    maxQuantities = _useState16[0],\n    setMaxQuantities = _useState16[1];\n  var _useState17 = (0,react.useState)(true),\n    _useState18 = _slicedToArray(_useState17, 2),\n    loading = _useState18[0],\n    setLoading = _useState18[1];\n  var _useState19 = (0,react.useState)(null),\n    _useState20 = _slicedToArray(_useState19, 2),\n    error = _useState20[0],\n    setError = _useState20[1];\n  var _useState21 = (0,react.useState)(1950),\n    _useState22 = _slicedToArray(_useState21, 2),\n    minYear = _useState22[0],\n    setMinYear = _useState22[1]; // Fixed minimum year\n  var _useState23 = (0,react.useState)(2023),\n    _useState24 = _slicedToArray(_useState23, 2),\n    maxYear = _useState24[0],\n    setMaxYear = _useState24[1]; // Fixed maximum year\n  var _useState25 = (0,react.useState)(0),\n    _useState26 = _slicedToArray(_useState25, 2),\n    totalArmsTrade = _useState26[0],\n    setTotalArmsTrade = _useState26[1];\n\n  // Data URL\n  var dataUrl = "/data/processed/processed_arms_transfer_by_weapon_types.csv";\n  var pieChartUrl = "/data/processed/processed_regional_transfers.csv";\n\n  /**\r\n   * Country Name Mapping\r\n   * Map dataset country names to GeoJSON country names if they differ.\r\n   */\n  var countryNameMapping = {\n    "Cote d\'Ivoire": "Ivory Coast",\n    "Congo": "Republic of the Congo" // Adjust based on GeoJSON data\n    // Add more mappings as necessary\n  };\n\n  /**\r\n   * Data Loading Effect\r\n   * Fetches and processes the world map and arms transfer data once when the component mounts.\r\n   */\n  (0,react.useEffect)(function () {\n    setLoading(true);\n    Promise.all([src/* json */.Pq9(\'/countries-110m.json\'), src/* csv */.fu7(dataUrl, function (d) {\n      var year = +d[\'year\'];\n      var quantity = +d[\'quantity\'];\n      // Validate year range\n      if (isNaN(year) || isNaN(quantity) || year < minYear || year > maxYear) {\n        return null; // Skip invalid or out-of-range rows\n      }\n      return {\n        recipients: d[\'recipients\'],\n        suppliers: d[\'suppliers\'],\n        year: Math.round(year),\n        // Ensure year is an integer\n        quantity: quantity,\n        weaponDescription: d[\'weapon description\'],\n        status: d[\'status\']\n      };\n    })]).then(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        worldDataRaw = _ref2[0],\n        armsDataRaw = _ref2[1];\n      // Filter out null entries\n      armsDataRaw = armsDataRaw.filter(function (row) {\n        return row !== null;\n      });\n\n      // Convert TopoJSON to GeoJSON Features\n      var countriesData = feature/* default */.A(worldDataRaw, worldDataRaw.objects.countries).features;\n      setCountries(countriesData); // Store countries data in state\n\n      // Process arms transfer data\n      var processedData = {};\n      var uniqueWeaponTypes = new Set();\n      var tempMaxQuantities = {};\n      armsDataRaw.forEach(function (row) {\n        var country = row.recipients;\n        country = countryNameMapping[country] || country; // Apply mapping\n\n        var year = row.year;\n        var weaponType = row.weaponDescription ? row.weaponDescription.trim() : ""; // Trim whitespace\n        var quantity = row.quantity;\n        var suppliers = row.suppliers;\n        var status = row.status;\n\n        // Only add non-empty weapon types\n        if (weaponType !== "") {\n          uniqueWeaponTypes.add(weaponType);\n        }\n        if (!processedData[country]) {\n          processedData[country] = {};\n        }\n        if (!processedData[country][year]) {\n          processedData[country][year] = {};\n        }\n\n        // Assuming one entry per country-year-weaponType\n        processedData[country][year][weaponType] = {\n          quantity: quantity,\n          suppliers: suppliers,\n          status: status\n        };\n\n        // Update max quantities for scales\n        if (!tempMaxQuantities[weaponType]) {\n          tempMaxQuantities[weaponType] = {};\n        }\n        if (!tempMaxQuantities[weaponType][year] || quantity > tempMaxQuantities[weaponType][year]) {\n          tempMaxQuantities[weaponType][year] = quantity;\n        }\n      });\n\n      // Construct weaponTypesArray with "All" and filter out any empty entries\n      var weaponTypesArray = ["All"].concat(_toConsumableArray(Array.from(uniqueWeaponTypes).filter(function (wt) {\n        return wt !== "" && wt !== undefined;\n      }).sort()));\n      setWeaponTypes(weaponTypesArray);\n      setCountryData(processedData);\n      setMaxQuantities(tempMaxQuantities);\n      setLoading(false);\n\n      // Set default selectedYear and selectedWeaponType based on available data\n      var availableYears = Array.from(new Set(armsDataRaw.map(function (d) {\n        return d.year;\n      }))).sort(function (a, b) {\n        return a - b;\n      });\n      if (availableYears.length > 0) {\n        setSelectedYear(2019);\n      }\n      if (weaponTypesArray.includes(\'All\')) {\n        setSelectedWeaponType(\'All\');\n      } else if (weaponTypesArray.length > 0) {\n        setSelectedWeaponType(weaponTypesArray[0]);\n      }\n    })["catch"](function (error) {\n      console.error("Error loading data:", error);\n      setError("Failed to load data. Please try again later.");\n      setLoading(false);\n    });\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  /**\r\n   * Rendering Effect\r\n   * Draws the map whenever selectedYear, selectedWeaponType, or countryData changes.\r\n   */\n  (0,react.useEffect)(function () {\n    if (countries.length === 0 || Object.keys(countryData).length === 0 || selectedYear === null || isNaN(selectedYear) || !selectedWeaponType) return;\n    drawMap(countries, countryData, selectedYear, selectedWeaponType);\n  }, [selectedYear, selectedWeaponType, countryData, countries]);\n  (0,react.useEffect)(function () {\n    var width = 200; // Adjust as needed\n    var height = 200; // Match the container\'s height\n    var radius = Math.min(width, height) * 0.3;\n    var svg = src/* select */.Ltv(pieChartRef.current).attr(\'width\', width).attr(\'height\', height);\n    svg.selectAll(\'*\').remove();\n    src/* csv */.fu7(pieChartUrl).then(function (data) {\n      data.forEach(function (d) {\n        for (var year = 1950; year <= 2023; year++) {\n          d[year] = +d[year] / 1000 || 0;\n        }\n      });\n      var customOrder = ["Asia and Oceania", "Europe", "Middle East", "Americas", "Africa"]; // Define the custom order\n\n      var filteredData = data.filter(function (d) {\n        return d[\'Imports by Regions\'] !== \'World total\' && d[\'Imports by Regions\'] !== \'International organizations\';\n      });\n      var regionArmsData = Array.from(src/* group */.Os0(filteredData, function (d) {\n        return d[\'Imports by Regions\'];\n      }), function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          region = _ref4[0],\n          values = _ref4[1];\n        return {\n          region: region,\n          armsTrade: values[0][selectedYear] || 0\n        };\n      }).sort(function (a, b) {\n        // Sort based on the custom order\n        return customOrder.indexOf(a.region) - customOrder.indexOf(b.region);\n      });\n      var totalArmsTrade = src/* sum */.czq(regionArmsData, function (d) {\n        return d.armsTrade;\n      });\n      setTotalArmsTrade(totalArmsTrade);\n      if (totalArmsTrade === 0) {\n        svg.append(\'text\').attr(\'x\', width / 2).attr(\'y\', height / 2).attr(\'text-anchor\', \'middle\').text(\'No data available for this year\');\n        return;\n      }\n      var colorMap = {\n        "Asia and Oceania": "#F44336",\n        // Soft red/orange\n        "Europe": "#0D47A1",\n        // Bright red\n        "Middle East": "#388E3C",\n        // Dark red\n        "Americas": "#FF9800",\n        // Vibrant red\n        "Africa": "#6D4C41" // Darker red\n      };\n\n      // Custom color scale using the dictionary\n      var colorScale = src/* scaleOrdinal */.UMr().domain(regionArmsData.map(function (d) {\n        return d.region;\n      })).range(regionArmsData.map(function (d) {\n        return colorMap[d.region];\n      }));\n      var pie = src/* pie */.rLf().sort(null) // Do not automatically sort the data\n      .startAngle(0) // Start angle at 0 (APEC starts from 0 degrees)\n      .endAngle(2 * Math.PI).value(function (d) {\n        return d.armsTrade;\n      });\n      var arc = src/* arc */.JLW().outerRadius(radius - 10).innerRadius(0);\n      var labelArc = src/* arc */.JLW().outerRadius(radius + 20).innerRadius(radius + 20);\n      svg.append(\'g\').attr(\'transform\', "translate(".concat(width * 0.6, ", ").concat(height / 2, ")")).selectAll(\'path\').data(pie(regionArmsData)).enter().append(\'path\').attr(\'d\', arc).attr(\'fill\', function (d) {\n        return colorScale(d.data.region);\n      }).attr(\'stroke\', \'#e0e0e0\').attr(\'stroke-width\', \'1.5px\').attr(\'opacity\', 0.8).on(\'mouseenter\', function (event, d) {\n        var regionPercentage = (d.data.armsTrade / totalArmsTrade * 100).toFixed(2);\n        var container = svgRef.current.getBoundingClientRect();\n        var offsetX = event.clientX - container.left;\n        var offsetY = event.clientY - container.top;\n        setTooltip({\n          visible: true,\n          x: offsetX + 10,\n          y: offsetY - 10,\n          content: /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("strong", null, d.data.region, ":"), " $", d.data.armsTrade.toLocaleString(), "B (", regionPercentage, "%)")\n        });\n      }).on(\'mousemove\', function (event) {\n        var container = svgRef.current.getBoundingClientRect();\n        var offsetX = event.clientX - container.left;\n        var offsetY = event.clientY - container.top;\n        setTooltip(function (prev) {\n          return _objectSpread(_objectSpread({}, prev), {}, {\n            x: offsetX + 10,\n            y: offsetY - 10\n          });\n        });\n      }).on(\'mouseleave\', function (event) {\n        setTooltip({\n          visible: false,\n          x: 0,\n          y: 0,\n          content: \'\'\n        });\n        src/* select */.Ltv(event.currentTarget).transition().duration(200).attr(\'d\', arc).attr(\'opacity\', 0.85);\n      });\n      svg.append(\'g\').attr(\'transform\', "translate(".concat(width * 0.6, ", ").concat(height / 2, ")")).selectAll(\'text\').data(pie(regionArmsData)).enter().append(\'text\').attr(\'transform\', function (d) {\n        var _labelArc$centroid = labelArc.centroid(d),\n          _labelArc$centroid2 = _slicedToArray(_labelArc$centroid, 2),\n          x = _labelArc$centroid2[0],\n          y = _labelArc$centroid2[1];\n        var angle = (d.startAngle + d.endAngle) / 2; // Calculate the angle of the arc midpoint\n        var rotation = angle * 180 / Math.PI - 90; // Rotate to make text vertical\n        var arcLength = d.endAngle - d.startAngle;\n        var arcLengthDeg = arcLength * 180 / Math.PI;\n        // Flip text if it\'s between 180 and 360 degrees\n        if (arcLengthDeg < 30) {\n          // Flip text if it\'s between 180 and 360 degrees\n          if (rotation > 90) {\n            rotation -= 180;\n          }\n        } else {\n          rotation = 0; // No rotation if the arc is wide enough\n        }\n        return "translate(".concat(x, ", ").concat(y, ") rotate(").concat(rotation, ")");\n      }) // Position labels and rotate them to be vertical to the arc\n      .style(\'text-anchor\', \'middle\').style(\'font-size\', \'14px\') // Increase font size\n      .style(\'font-weight\', \'bold\') // Optional: make the text bold\n      .style(\'fill\', \'#e0e0e0\') // Set text color\n      .style(\'pointer-events\', \'none\').text(function (d) {\n        // Set custom labels for specific regions\n        if (d.data.region === \'Asia and Oceania\') {\n          return \'APAC\';\n        } else if (d.data.region === \'Middle East\') {\n          return \'ME\';\n        } else if (d.data.region === \'Americas\') {\n          return \'AMS\';\n        } else {\n          return d.data.region; // Default label\n        }\n      });\n    })["catch"](function (error) {\n      console.error("Error loading data:", error);\n    });\n  }, [dataUrl, selectedYear]);\n  /**\r\n   * Function to Draw the Map\r\n   */\n  var drawMap = function drawMap(countries, armsData, year, weaponType) {\n    var width = 800;\n    var height = 400;\n\n    // Define Projection and Path\n    var projection = src/* geoMercator */.bAh().center([0, 20]).scale(130).translate([width / 2, height / 2]);\n    var path = src/* geoPath */.zFW().projection(projection);\n\n    // Define Color and Size Scales\n    var maxQuantity;\n    var colorScale;\n    var sizeScale;\n    if (weaponType === "All") {\n      // Calculate the sum of quantities across all weapon types for each country\n      maxQuantity = src/* max */.T9B(countries, function (d) {\n        var _armsData$country;\n        var country = d.properties.name;\n        var yearData = (_armsData$country = armsData[country]) === null || _armsData$country === void 0 ? void 0 : _armsData$country[year];\n        if (yearData) {\n          return Object.values(yearData).reduce(function (acc, curr) {\n            return acc + curr.quantity;\n          }, 0);\n        }\n        return 0;\n      }) || 0;\n      colorScale = src/* scaleSequential */.exT(src/* interpolateReds */.Q3).domain([Math.log(1), Math.log(maxQuantity)]); // Using Math.log to handle logarithmic scaling\n\n      sizeScale = src/* scaleSqrt */.Bv9().domain([0, maxQuantity]).range([0, 50]); // Adjust circle size range as necessary\n    } else {\n      // Specific weapon type\n      maxQuantity = src/* max */.T9B(countries, function (d) {\n        var _armsData$d$propertie;\n        return ((_armsData$d$propertie = armsData[d.properties.name]) === null || _armsData$d$propertie === void 0 || (_armsData$d$propertie = _armsData$d$propertie[year]) === null || _armsData$d$propertie === void 0 || (_armsData$d$propertie = _armsData$d$propertie[weaponType]) === null || _armsData$d$propertie === void 0 ? void 0 : _armsData$d$propertie.quantity) || 0;\n      }) || 0;\n      colorScale = src/* scaleSequential */.exT(src/* interpolateReds */.Q3).domain([Math.log(1), Math.log(maxQuantity)]); // Using Math.log to handle logarithmic scaling\n\n      sizeScale = src/* scaleSqrt */.Bv9().domain([0, maxQuantity]).range([0, 50]); // Adjust circle size range as necessary\n    }\n\n    // Select and Setup SVG\n    var svg = src/* select */.Ltv(svgRef.current).attr(\'viewBox\', "0 0 ".concat(width, " ").concat(height)).attr(\'preserveAspectRatio\', \'xMidYMid meet\').style(\'width\', \'100%\').style(\'height\', \'auto\').style(\'background-color\', \'\').call(src/* zoom */.s_O() // Implement Zooming and Panning\n    .scaleExtent([1, 8]) // Zoom scale limits\n    .on(\'zoom\', function (event) {\n      g.attr(\'transform\', event.transform);\n    }));\n\n    // Create a group for map elements\n    var g = svg.select(\'g.map-group\');\n    if (g.empty()) {\n      g = svg.append(\'g\').attr(\'class\', \'map-group\');\n    }\n\n    // Clear previous drawings within the group\n    g.selectAll(\'*\').remove();\n\n    // Function to Handle Tooltip Content\n    var handleTooltipContent = function handleTooltipContent(country, year, weaponType, data) {\n      if (weaponType === "All") {\n        var totalQuantity = Object.values(data).reduce(function (acc, curr) {\n          return acc + curr.quantity;\n        }, 0);\n        return /*#__PURE__*/react.createElement("div", {\n          style: {\n            lineHeight: \'1.6\',\n            fontSize: \'16px\'\n          }\n        }, /*#__PURE__*/react.createElement("strong", null, country), /*#__PURE__*/react.createElement("br", null), "Total Quantity: ", totalQuantity, " units", /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("span", {\n          style: {\n            fontWeight: \'bold\',\n            color: \'#e74c3c\'\n          }\n        }, "Click for Details"));\n      } else {\n        // Handle other weapon types if necessary\n        return /*#__PURE__*/react.createElement("div", {\n          style: {\n            lineHeight: \'1.6\',\n            fontSize: \'16px\'\n          }\n        }, /*#__PURE__*/react.createElement("strong", null, country), /*#__PURE__*/react.createElement("br", null), "Weapon: ", weaponType, /*#__PURE__*/react.createElement("br", null), "Quantity: ", data.quantity, " units", /*#__PURE__*/react.createElement("br", null), "Status: ", data.status, /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("span", {\n          style: {\n            fontWeight: \'bold\',\n            color: \'#e74c3c\'\n          }\n        }, "Click for Details"));\n      }\n    };\n    var logColorScale = function logColorScale(value) {\n      return colorScale(Math.log(value));\n    };\n\n    // Draw Country Paths with Color Based on Quantity\n    g.selectAll(\'path\').data(countries).enter().append(\'path\').attr(\'d\', path).attr(\'fill\', function (d) {\n      var country = d.properties.name;\n      if (weaponType === "All") {\n        var _armsData$country2;\n        var yearData = (_armsData$country2 = armsData[country]) === null || _armsData$country2 === void 0 ? void 0 : _armsData$country2[year];\n        if (yearData) {\n          var totalQuantity = Object.values(yearData).reduce(function (acc, curr) {\n            return acc + curr.quantity;\n          }, 0);\n          return totalQuantity > 0 ? logColorScale(totalQuantity) : \'#ccc\';\n        }\n        return \'#ccc\';\n      } else {\n        var _armsData$country3;\n        var quantity = ((_armsData$country3 = armsData[country]) === null || _armsData$country3 === void 0 || (_armsData$country3 = _armsData$country3[year]) === null || _armsData$country3 === void 0 || (_armsData$country3 = _armsData$country3[weaponType]) === null || _armsData$country3 === void 0 ? void 0 : _armsData$country3.quantity) || 0;\n        return quantity > 0 ? logColorScale(quantity) : \'#ccc\';\n      }\n    }).attr(\'stroke\', \'#333\').on(\'mouseenter\', function (event, d) {\n      var country = d.properties.name;\n      var content = null;\n      if (weaponType === "All") {\n        var _armsData$country4;\n        var yearData = (_armsData$country4 = armsData[country]) === null || _armsData$country4 === void 0 ? void 0 : _armsData$country4[year];\n        if (!yearData) return; // No data to show\n\n        content = handleTooltipContent(country, year, weaponType, yearData);\n      } else {\n        var _armsData$country5;\n        var data = (_armsData$country5 = armsData[country]) === null || _armsData$country5 === void 0 || (_armsData$country5 = _armsData$country5[year]) === null || _armsData$country5 === void 0 ? void 0 : _armsData$country5[weaponType];\n        if (!data) return; // No data to show\n\n        content = handleTooltipContent(country, year, weaponType, data);\n      }\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip({\n        visible: true,\n        x: offsetX + 10,\n        y: offsetY - 10,\n        content: content\n      });\n    }).on(\'mousemove\', function (event) {\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          x: offsetX + 10,\n          y: offsetY - 10\n        });\n      });\n    }).on(\'mouseleave\', function () {\n      setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: null\n      });\n    }).on(\'click\', function (event, d) {\n      var country = d.properties.name;\n      if (weaponType === "All") {\n        var _armsData$country6;\n        var yearData = (_armsData$country6 = armsData[country]) === null || _armsData$country6 === void 0 ? void 0 : _armsData$country6[year];\n        if (!yearData) return; // No data to show\n\n        setModalData({\n          country: country,\n          year: year,\n          data: yearData\n        });\n      } else {\n        var _armsData$country7;\n        var data = (_armsData$country7 = armsData[country]) === null || _armsData$country7 === void 0 || (_armsData$country7 = _armsData$country7[year]) === null || _armsData$country7 === void 0 ? void 0 : _armsData$country7[weaponType];\n        if (!data) return; // No data to show\n\n        setModalData({\n          country: country,\n          year: year,\n          weaponType: weaponType,\n          data: data\n        });\n      }\n    });\n\n    // Draw Circles Over Each Country Based on Quantity\n    g.selectAll(\'circle\').data(countries).enter().append(\'circle\').attr(\'cx\', function (d) {\n      return projection(src/* geoCentroid */.Ewd(d))[0];\n    }).attr(\'cy\', function (d) {\n      return projection(src/* geoCentroid */.Ewd(d))[1];\n    }).attr(\'r\', function (d) {\n      var country = d.properties.name;\n      if (weaponType === "All") {\n        var _armsData$country8;\n        var yearData = (_armsData$country8 = armsData[country]) === null || _armsData$country8 === void 0 ? void 0 : _armsData$country8[year];\n        if (yearData) {\n          return sizeScale(Object.values(yearData).reduce(function (acc, curr) {\n            return acc + curr.quantity;\n          }, 0));\n        }\n        return 0;\n      } else {\n        var _armsData$country9;\n        var quantity = ((_armsData$country9 = armsData[country]) === null || _armsData$country9 === void 0 || (_armsData$country9 = _armsData$country9[year]) === null || _armsData$country9 === void 0 || (_armsData$country9 = _armsData$country9[weaponType]) === null || _armsData$country9 === void 0 ? void 0 : _armsData$country9.quantity) || 0;\n        return quantity > 0 ? sizeScale(quantity) : 0;\n      }\n    }).attr(\'fill\', \'rgba(255, 69, 0, 0.5)\') // Semi-transparent orange color for the circles\n    .attr(\'stroke\', \'orange\').attr(\'stroke-width\', 0.5).on(\'mouseenter\', function (event, d) {\n      var country = d.properties.name;\n      var content = null;\n      if (weaponType === "All") {\n        var _armsData$country10;\n        var yearData = (_armsData$country10 = armsData[country]) === null || _armsData$country10 === void 0 ? void 0 : _armsData$country10[year];\n        if (!yearData) return; // No data to show\n\n        content = handleTooltipContent(country, year, weaponType, yearData);\n      } else {\n        var _armsData$country11;\n        var data = (_armsData$country11 = armsData[country]) === null || _armsData$country11 === void 0 || (_armsData$country11 = _armsData$country11[year]) === null || _armsData$country11 === void 0 ? void 0 : _armsData$country11[weaponType];\n        if (!data) return; // No data to show\n\n        content = handleTooltipContent(country, year, weaponType, data);\n      }\n\n      // Use d3.pointer to get mouse position relative to the SVG\n\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip({\n        visible: true,\n        x: offsetX + 10,\n        y: offsetY - 10,\n        content: content\n      });\n    }).on(\'mousemove\', function (event) {\n      var container = svgRef.current.getBoundingClientRect();\n      var offsetX = event.clientX - container.left;\n      var offsetY = event.clientY - container.top;\n      setTooltip(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          x: offsetX + 10,\n          y: offsetY - 10\n        });\n      });\n    }).on(\'mouseleave\', function () {\n      setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: null\n      });\n    }).on(\'click\', function (event, d) {\n      var country = d.properties.name;\n      if (weaponType === "All") {\n        var _armsData$country12;\n        var yearData = (_armsData$country12 = armsData[country]) === null || _armsData$country12 === void 0 ? void 0 : _armsData$country12[year];\n        if (!yearData) return; // No data to show\n\n        setModalData({\n          country: country,\n          year: year,\n          data: yearData\n        });\n      } else {\n        var _armsData$country13;\n        var data = (_armsData$country13 = armsData[country]) === null || _armsData$country13 === void 0 || (_armsData$country13 = _armsData$country13[year]) === null || _armsData$country13 === void 0 ? void 0 : _armsData$country13[weaponType];\n        if (!data) return; // No data to show\n\n        setModalData({\n          country: country,\n          year: year,\n          weaponType: weaponType,\n          data: data\n        });\n      }\n    });\n  };\n\n  /**\r\n   * Function to Close Modal\r\n   */\n  var closeModal = function closeModal() {\n    setModalData(null);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\',\n      height: \'auto\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Arms Imports by Weapon Type ", selectedYear), loading && /*#__PURE__*/react.createElement("div", {\n    className: "loading"\n  }, "Loading data..."), error && /*#__PURE__*/react.createElement("div", {\n    className: "error",\n    style: {\n      color: \'red\'\n    }\n  }, error), !loading && !error && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("input", {\n    type: "range",\n    id: "yearSlider",\n    min: minYear // Fixed earliest year\n    ,\n    max: maxYear // Fixed latest year\n    ,\n    step: 1 // Ensure only whole numbers\n    ,\n    value: selectedYear // Use selectedYear directly\n    ,\n    onChange: function onChange(e) {\n      return setSelectedYear(parseInt(e.target.value, 10));\n    } // Ensure integer\n    ,\n    style: {\n      width: \'80%\',\n      appearance: \'none\',\n      height: \'8px\',\n      backgroundColor: \'gray\',\n      borderRadius: \'5px\',\n      outline: \'none\',\n      margin: \'20px auto 10px\',\n      display: \'block\',\n      accentColor: \'#e74c3c\'\n    },\n    disabled: !selectedWeaponType // Disable until weapon type is selected\n  }), /*#__PURE__*/react.createElement("div", {\n    style: {\n      width: \'100%\',\n      height: \'100%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }, /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef\n  }), /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      height: \'80px\',\n      width: \'200px\',\n      top: \'100px\',\n      left: \'20px\',\n      background: \'rgba(0, 0, 0, 0.9)\',\n      padding: \'10px\',\n      borderRadius: \'8px\',\n      fontSize: \'16px\',\n      color: \'#e0e0e0\',\n      display: \'flex\',\n      flexDirection: \'column\'\n    }\n  }, /*#__PURE__*/react.createElement("label", {\n    htmlFor: "weaponTypeSelect",\n    style: {\n      display: \'block\',\n      marginBottom: \'10px\'\n    }\n  }, "Select Weapon Type"), /*#__PURE__*/react.createElement("select", {\n    id: "weaponTypeSelect",\n    onChange: function onChange(e) {\n      return setSelectedWeaponType(e.target.value);\n    },\n    value: selectedWeaponType,\n    "aria-label": "Select Weapon Type",\n    style: {\n      padding: \'6px 10px\',\n      width: \'180px\',\n      color: \'#e0e0e0\',\n      backgroundColor: \'black\',\n      borderRadius: \'8px\',\n      fontSize: \'16px\'\n    }\n  }, weaponTypes.map(function (type) {\n    return /*#__PURE__*/react.createElement("option", {\n      key: type,\n      value: type\n    }, type);\n  })))), /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      // Change to absolute to position it within the map container\n      bottom: \'10px\',\n      // Adjust as needed to create space from the bottom border\n      left: \'10px\',\n      backgroundColor: \'\',\n      width: \'225px\',\n      height: \'200px\',\n      overflow: \'hidden\'\n    }\n  }, /*#__PURE__*/react.createElement("svg", {\n    ref: pieChartRef,\n    style: {\n      width: \'100%\',\n      height: \'100%\'\n    }\n  })), tooltip.visible && /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'absolute\',\n      top: tooltip.y,\n      left: tooltip.x,\n      backgroundColor: \'rgba(0, 0, 0, 0.8)\',\n      color: \'#e0e0e0\',\n      padding: \'12px\',\n      borderRadius: \'8px\',\n      boxShadow: \'0 4px 12px rgba(0, 0, 0, 0.3)\',\n      fontSize: \'16px\',\n      pointerEvents: \'none\',\n      transition: \'opacity 0.3s ease\',\n      opacity: tooltip.visible ? 1 : 0,\n      zIndex: 10,\n      whiteSpace: \'nowrap\',\n      width: \'auto\',\n      height: \'auto\'\n    }\n  }, tooltip.content), modalData && /*#__PURE__*/react.createElement("div", {\n    className: "modal",\n    style: {\n      position: \'fixed\',\n      top: 0,\n      left: 0,\n      width: \'100vw\',\n      height: \'100vh\',\n      backgroundColor: \'rgba(0,0,0,0.5)\',\n      display: \'flex\',\n      alignItems: \'center\',\n      justifyContent: \'center\',\n      zIndex: 1000\n    },\n    onClick: closeModal\n  }, /*#__PURE__*/react.createElement("div", {\n    style: {\n      backgroundColor: \'#fff\',\n      padding: \'20px\',\n      borderRadius: \'8px\',\n      maxWidth: \'600px\',\n      width: \'90%\',\n      maxHeight: \'80%\',\n      overflowY: \'auto\',\n      position: \'relative\'\n    },\n    onClick: function onClick(e) {\n      return e.stopPropagation();\n    } // Prevent click from closing modal when clicking inside\n  }, /*#__PURE__*/react.createElement("button", {\n    onClick: closeModal,\n    style: {\n      position: \'absolute\',\n      top: \'10px\',\n      right: \'10px\',\n      background: \'none\',\n      border: \'none\',\n      fontSize: \'18px\',\n      cursor: \'pointer\',\n      color: \'black\' // Ensure close button text is black\n    },\n    "aria-label": "Close modal"\n  }, "\\xD7"), /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Country:"), " ", modalData.country), /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Year:"), " ", modalData.year), selectedWeaponType === "All" ? /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("table", {\n    style: {\n      width: \'100%\',\n      borderCollapse: \'collapse\',\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("thead", null, /*#__PURE__*/react.createElement("tr", null, /*#__PURE__*/react.createElement("th", {\n    style: {\n      border: \'1px solid #ddd\',\n      padding: \'8px\',\n      color: \'black\'\n    }\n  }, "Weapon Type"), /*#__PURE__*/react.createElement("th", {\n    style: {\n      border: \'1px solid #ddd\',\n      padding: \'8px\',\n      color: \'black\'\n    }\n  }, "Supplier"), /*#__PURE__*/react.createElement("th", {\n    style: {\n      border: \'1px solid #ddd\',\n      padding: \'8px\',\n      color: \'black\'\n    }\n  }, "Quantity"), /*#__PURE__*/react.createElement("th", {\n    style: {\n      border: \'1px solid #ddd\',\n      padding: \'8px\',\n      color: \'black\'\n    }\n  }, "Status"))), /*#__PURE__*/react.createElement("tbody", null, Object.entries(modalData.data).map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      wt = _ref6[0],\n      data = _ref6[1];\n    return /*#__PURE__*/react.createElement("tr", {\n      key: wt\n    }, /*#__PURE__*/react.createElement("td", {\n      style: {\n        border: \'1px solid #ddd\',\n        padding: \'8px\',\n        color: \'black\'\n      }\n    }, wt), /*#__PURE__*/react.createElement("td", {\n      style: {\n        border: \'1px solid #ddd\',\n        padding: \'8px\',\n        color: \'black\'\n      }\n    }, data.suppliers), /*#__PURE__*/react.createElement("td", {\n      style: {\n        border: \'1px solid #ddd\',\n        padding: \'8px\',\n        color: \'black\'\n      }\n    }, data.quantity), /*#__PURE__*/react.createElement("td", {\n      style: {\n        border: \'1px solid #ddd\',\n        padding: \'8px\',\n        color: \'black\'\n      }\n    }, data.status));\n  })))) : /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Weapon Type:"), " ", modalData.weaponType), /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Supplier:"), " ", modalData.data.suppliers), /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Quantity:"), " ", modalData.data.quantity, " units"), /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'black\'\n    }\n  }, /*#__PURE__*/react.createElement("strong", null, "Status:"), " ", modalData.data.status))))), error && !loading && /*#__PURE__*/react.createElement("div", {\n    style: {\n      textAlign: \'center\',\n      marginTop: \'50px\',\n      color: \'red\'\n    }\n  }, /*#__PURE__*/react.createElement("p", null, error)));\n};\n/* harmony default export */ const _005_WeaponTypeChoroplethMap = (ChoroplethMap);\n;// ./src/components/graphs/005_WeaponTypeZCP.js\nfunction _005_WeaponTypeZCP_typeof(o) { "@babel/helpers - typeof"; return _005_WeaponTypeZCP_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _005_WeaponTypeZCP_typeof(o); }\nfunction _005_WeaponTypeZCP_ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _005_WeaponTypeZCP_objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _005_WeaponTypeZCP_ownKeys(Object(t), !0).forEach(function (r) { _005_WeaponTypeZCP_defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : _005_WeaponTypeZCP_ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _005_WeaponTypeZCP_defineProperty(e, r, t) { return (r = _005_WeaponTypeZCP_toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _005_WeaponTypeZCP_toPropertyKey(t) { var i = _005_WeaponTypeZCP_toPrimitive(t, "string"); return "symbol" == _005_WeaponTypeZCP_typeof(i) ? i : i + ""; }\nfunction _005_WeaponTypeZCP_toPrimitive(t, r) { if ("object" != _005_WeaponTypeZCP_typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _005_WeaponTypeZCP_typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _005_WeaponTypeZCP_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_005_WeaponTypeZCP_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }\nfunction _005_WeaponTypeZCP_slicedToArray(r, e) { return _005_WeaponTypeZCP_arrayWithHoles(r) || _005_WeaponTypeZCP_iterableToArrayLimit(r, e) || _005_WeaponTypeZCP_unsupportedIterableToArray(r, e) || _005_WeaponTypeZCP_nonIterableRest(); }\nfunction _005_WeaponTypeZCP_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _005_WeaponTypeZCP_unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _005_WeaponTypeZCP_arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _005_WeaponTypeZCP_arrayLikeToArray(r, a) : void 0; } }\nfunction _005_WeaponTypeZCP_arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _005_WeaponTypeZCP_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _005_WeaponTypeZCP_arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\nvar ZoomableCirclePacking = function ZoomableCirclePacking() {\n  var svgRef = (0,react.useRef)();\n  var _useState = (0,react.useState)({\n      visible: false,\n      x: 0,\n      y: 0,\n      content: null\n    }),\n    _useState2 = _005_WeaponTypeZCP_slicedToArray(_useState, 2),\n    tooltip = _useState2[0],\n    setTooltip = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = _005_WeaponTypeZCP_slicedToArray(_useState3, 2),\n    data = _useState4[0],\n    setData = _useState4[1];\n  var _useState5 = (0,react.useState)(0),\n    _useState6 = _005_WeaponTypeZCP_slicedToArray(_useState5, 2),\n    selectedYearIndex = _useState6[0],\n    setSelectedYearIndex = _useState6[1];\n  var _useState7 = (0,react.useState)([]),\n    _useState8 = _005_WeaponTypeZCP_slicedToArray(_useState7, 2),\n    availableYears = _useState8[0],\n    setAvailableYears = _useState8[1];\n  var _useState9 = (0,react.useState)(null),\n    _useState10 = _005_WeaponTypeZCP_slicedToArray(_useState9, 2),\n    error = _useState10[0],\n    setError = _useState10[1];\n  var width = 1000;\n  var height = 600;\n  (0,react.useEffect)(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response, jsonData, years, defaultYearIndex;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\'/data/processed/processed_weapon_transfer_by_category.json\');\n            case 3:\n              response = _context.sent;\n              if (response.ok) {\n                _context.next = 6;\n                break;\n              }\n              throw new Error("HTTP error! Status: ".concat(response.status));\n            case 6:\n              _context.next = 8;\n              return response.json();\n            case 8:\n              jsonData = _context.sent;\n              setData(jsonData);\n\n              // Extract unique years and set availableYears state\n              years = Array.from(new Set(Object.values(jsonData.Exports).flatMap(function (countryData) {\n                return countryData.flatMap(function (category) {\n                  return Object.keys(category).filter(function (key) {\n                    return !isNaN(key);\n                  });\n                });\n              }))).sort(function (a, b) {\n                return a - b;\n              });\n              setAvailableYears(years); // Ensure available years are set for the slider\n              setSelectedYearIndex(0); // Reset selectedYearIndex to 0\n\n              // Set default year to the latest year\n              defaultYearIndex = years.length - 1; // Assuming the latest year\n              setSelectedYearIndex(defaultYearIndex);\n              _context.next = 21;\n              break;\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context["catch"](0);\n              console.error(\'Error fetching data:\', _context.t0);\n              setError(\'Failed to load data. Please try again later.\');\n            case 21:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 17]]);\n      }));\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchData();\n  }, []);\n\n  // Color scale for countries\n  var countryColorScale = (0,react.useMemo)(function () {\n    return data ? src/* scaleOrdinal */.UMr().domain([\'United States\', \'Russia\', \'China\']).range([\'#4682B4\', \'#DC143C\', \'#FFDB58\']).unknown(\'#CCCCCC\') // Fallback color for other countries\n    : null;\n  }, [data]);\n\n  // Separate color scale for weapon categories\n  var categoryColorScale = (0,react.useMemo)(function () {\n    var allCategories = data ? Object.values(data.Exports).flatMap(function (countryData) {\n      return countryData.map(function (category) {\n        return category[\'Unnamed: 1\'];\n      });\n    }) : [];\n    return src/* scaleOrdinal */.UMr(src/* schemePaired */.vU7).domain(allCategories);\n  }, [data]);\n  (0,react.useEffect)(function () {\n    if (!data || availableYears.length === 0 || !countryColorScale || !categoryColorScale) return;\n    var selectedYear = availableYears[selectedYearIndex];\n    var yearData = {\n      name: \'Weapon Transfers by Country\',\n      children: Object.entries(data.Exports).map(function (_ref2) {\n        var _ref3 = _005_WeaponTypeZCP_slicedToArray(_ref2, 2),\n          country = _ref3[0],\n          categories = _ref3[1];\n        return {\n          name: country,\n          children: categories.map(function (category) {\n            return {\n              name: category[\'Unnamed: 1\'],\n              value: category[selectedYear] || 0\n            };\n          }).filter(function (category) {\n            return category.value > 0;\n          })\n        };\n      }).filter(function (country) {\n        return country.children.length > 0;\n      })\n    };\n    var svg = src/* select */.Ltv(svgRef.current).attr(\'viewBox\', "0 0 ".concat(width, " ").concat(height)).style(\'background\', \'transparent\').style(\'cursor\', \'pointer\');\n    svg.selectAll(\'*\').remove();\n    var root = src/* hierarchy */.Sk5(yearData).sum(function (d) {\n      return d.value || 0;\n    }).sort(function (a, b) {\n      return b.value - a.value;\n    });\n    var pack = src/* pack */.qqI().size([width - 10, height - 10]).padding(10);\n    pack(root);\n    var focus = root;\n    var view;\n    var zoomTo = function zoomTo(v) {\n      var k = width / v[2];\n      view = v;\n      node.attr(\'transform\', function (d) {\n        return "translate(".concat((d.x - v[0]) * k + width / 2, ", ").concat((d.y - v[1]) * k + height / 2, ")");\n      });\n      node.select(\'circle\').attr(\'r\', function (d) {\n        return d.r * k;\n      });\n      node.selectAll(\'text\').attr(\'fontSize\', function (d) {\n        return Math.max(10, d.r * k / 4);\n      });\n    };\n    var zoom = function zoom(event, d) {\n      if (!d) return;\n      focus = d;\n      var transition = svg.transition().duration(750).tween(\'zoom\', function () {\n        var i = src/* interpolateZoom */.p7(view, [focus.x, focus.y, focus.r * 2.75]);\n        return function (t) {\n          return zoomTo(i(t));\n        };\n      });\n    };\n    var node = svg.append(\'g\').attr("transform", "translate(0, -20)").selectAll(\'g\').data(root.descendants()).join(\'g\').attr(\'transform\', function (d) {\n      return "translate(".concat(d.x, ",").concat(d.y, ")");\n    });\n    node.append(\'circle\').attr(\'fill\', function (d) {\n      if (d.depth === 1) return countryColorScale(d.data.name);\n      if (d.depth === 2) return categoryColorScale(d.data.name);\n      return \'#ccc\';\n    }).attr(\'fill-opacity\', function (d) {\n      return d.depth === 1 || d.depth === 2 ? 1 : 0.0;\n    }).attr(\'stroke\', \'none\').attr(\'stroke-width\', function (d) {\n      return d.depth === 1 || d.depth === 2 ? 2 : 0.2;\n    }).attr(\'r\', function (d) {\n      return d.r;\n    }).style(\'transition\', \'all 0.2s ease\').on(\'mouseover\', function (event, d) {\n      if (!d || !d.data || d.depth === 0) return; // Ignore background hover\n\n      var country = d.depth === 1 ? d.data.name : d.parent && d.parent.data ? d.parent.data.name : \'N/A\';\n      var weaponType = d.depth === 2 ? d.data.name : \'N/A\'; // Show weapon type only when depth = 2\n      var quantity = d.value ? d.value.toLocaleString() : \'N/A\';\n      setTooltip({\n        visible: true,\n        x: event.clientX + 10,\n        y: event.clientY - 10,\n        content: /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("strong", null, country), d.depth === 2 && /*#__PURE__*/react.createElement("br", null), "  ", d.depth === 2 && "Type: ".concat(weaponType), /*#__PURE__*/react.createElement("br", null), "Quantity: ", quantity)\n      });\n    }).on(\'mousemove\', function (event) {\n      setTooltip(function (prev) {\n        return _005_WeaponTypeZCP_objectSpread(_005_WeaponTypeZCP_objectSpread({}, prev), {}, {\n          x: event.clientX + 10,\n          y: event.clientY - 10\n        });\n      });\n    }).on(\'mouseout\', function () {\n      return setTooltip({\n        visible: false,\n        x: 0,\n        y: 0,\n        content: null\n      });\n    }).on(\'click\', function (event, d) {\n      if (focus !== d) {\n        zoom(event, d);\n        event.stopPropagation();\n      }\n    });\n    node.append(\'g\') // Create a group to hold both rect and text\n    .each(function (d) {\n      var g = src/* select */.Ltv(this);\n\n      // Only proceed if the text is not empty\n      var textContent = d.depth === 2 ? d.data.name : \'\';\n      if (textContent) {\n        // Check if textContent is non-empty\n        // Add the text first so we can get its size\n        var textElement = g.append(\'text\').attr(\'textAnchor\', \'middle\').attr(\'dy\', \'.3em\').style(\'pointer-events\', \'none\').style(\'fill\', \'#e0e0e0\') // Change the text fill to e0e0e0\n        .style(\'font-weight\', \'bold\').style(\'font-size\', function (d) {\n          return "".concat(Math.max(12, d.r / 4), "px");\n        }).text(textContent);\n\n        // Get the bounding box of the text to calculate the required rect size\n        var bbox = textElement.node().getBBox();\n\n        // Add a background rectangle with rounded corners\n        g.insert(\'rect\', \'text\') // Insert the rect below the text\n        .attr(\'x\', bbox.x - 5) // Add some padding around the text\n        .attr(\'y\', bbox.y - 5).attr(\'width\', bbox.width + 10) // Add padding to the width and height\n        .attr(\'height\', bbox.height + 10).attr(\'rx\', 5) // Rounded corners\n        .attr(\'ry\', 5).style(\'fill\', \'rgba(0, 0, 0, 0.7)\') // Opaque black background\n        .style(\'stroke\', \'none\') // No border\n        .style(\'pointer-events\', \'none\'); // Prevent the rect from interacting with mouse events\n      }\n    });\n    zoomTo([root.x, root.y, root.r * 2.75]);\n    svg.on(\'click\', function () {\n      return zoom(null, root);\n    });\n    return function () {};\n  }, [data, selectedYearIndex, availableYears, countryColorScale, categoryColorScale]);\n  var handleSliderChange = function handleSliderChange(e) {\n    setSelectedYearIndex(Number(e.target.value));\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'relative\',\n      width: \'100%\',\n      height: \'auto\'\n    }\n  }, /*#__PURE__*/react.createElement("h3", {\n    style: {\n      textAlign: \'center\',\n      fontSize: \'24px\',\n      color: \'#e74c3c\',\n      paddingTop: \'20px\'\n    }\n  }, "Weapon Transfers by Category ", availableYears[selectedYearIndex]), error && /*#__PURE__*/react.createElement("p", {\n    style: {\n      color: \'#e74c3c\',\n      textAlign: \'center\'\n    }\n  }, error), !error && !data && /*#__PURE__*/react.createElement("p", {\n    style: {\n      textAlign: \'center\',\n      color: \'#e0e0e0\'\n    }\n  }, "Loading..."), !error && data && availableYears.length > 0 && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("input", {\n    type: "range",\n    id: "year-slider",\n    min: "0",\n    max: availableYears.length - 1,\n    value: selectedYearIndex,\n    onChange: handleSliderChange,\n    style: {\n      width: \'80%\',\n      appearance: \'none\',\n      height: \'8px\',\n      backgroundColor: \'gray\',\n      borderRadius: \'5px\',\n      outline: \'none\',\n      margin: \'20px auto 10px\',\n      display: \'block\',\n      accentColor: \'#e74c3c\'\n    }\n  }), /*#__PURE__*/react.createElement("div", {\n    style: {\n      width: \'100%\',\n      border: \'3px solid #e74c3c\',\n      borderRadius: \'8px\'\n    }\n  }, /*#__PURE__*/react.createElement("svg", {\n    ref: svgRef\n  }), tooltip.visible && /*#__PURE__*/react.createElement("div", {\n    style: {\n      position: \'fixed\',\n      top: tooltip.y,\n      left: tooltip.x,\n      backgroundColor: \'rgba(0, 0, 0, 0.8)\',\n      color: \'#e0e0e0\',\n      padding: \'12px\',\n      borderRadius: \'8px\',\n      pointerEvents: \'none\',\n      transform: \'translate(-50%, -100%)\',\n      whiteSpace: \'nowrap\',\n      lineHeight: \'1.6\',\n      fontSize: \'16px\',\n      zIndex: 1000\n    }\n  }, tooltip.content))));\n};\n/* harmony default export */ const _005_WeaponTypeZCP = (ZoomableCirclePacking);\n;// ./src/components/005_emergingThreats.js\n\n\n\nvar emergingThreats = function emergingThreats() {\n  return /*#__PURE__*/react.createElement("section", {\n    id: "005"\n  }, /*#__PURE__*/react.createElement("p", {\n    className: "custom-title",\n    style: {\n      cssText: \'margin-top: 0\'\n    }\n  }, "Preparing Allies for Emerging Threats"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#4682B4\',\n      fontWeight: \'bold\'\n    }\n  }, "The United States"), " strengthens regional defense by empowering allies, reducing the need for an extensive US military presence. Equipped with advanced weaponry from the US, allies like ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Taiwan"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Japan"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "South Korea"), ", and the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Philippines"), " bolster their capabilities to counter regional threats independently. This ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\',\n      fontWeight: \'bold\'\n    }\n  }, "Building Partner Capacity"), " strategy has become even more significant amid rising South China Sea tensions, where US support to countries like the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Philippines"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Malaysia"), ", ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Brunei"), ", and ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#D2B48C\',\n      fontWeight: \'bold\'\n    }\n  }, "Indonesia"), " is crucial in deterring China\'s territorial ambitions."), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Exploring the Arms Trade Dynamic"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "To explore this dynamic, use the Choropleth Map and Pie Chart to examine key years when South China Sea tensions escalated. By selecting years like ", /*#__PURE__*/react.createElement("em", {\n    style: {\n      color: \'orange\',\n      fontWeight: \'bold\'\n    }\n  }, "2010-2020"), ", you can observe a noticeable rise in US arms imports by Asian allies and an increase in total arms trade in the Asia-Oceania region. This interactive view reveals the correlation between heightened regional disputes and the strategic arms support provided by the ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: \'#4682B4\',\n      fontWeight: \'bold\'\n    }\n  }, "US")), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_005_WeaponTypeChoroplethMap, null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-title"\n  }, "Breakdown of Weapon Transfers by Category"), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "Missiles, aircraft, and other advanced weaponry dominate US exports, reflecting regional priorities and threats. This breakdown shows how arms transfers align with geopolitical objectives."), /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", null, "The ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#4682B4"\n    }\n  }, "United States"), " supports countries in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Europe, the Middle East, and Asia-Pacific"), ", reinforcing a defense line against rivals."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#DC143C"\n    }\n  }, "Russia "), " supplies nations in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Eastern Europe and Central Asia"), " to counter NATO\'s reach."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#FFD700"\n    }\n  }, "China"), " arms countries in ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      fontStyle: "italic"\n    }\n  }, "Southeast Asia, Africa, and South Asia"), ", expanding its foothold in resource-rich areas."), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("li", null, "Countries like ", /*#__PURE__*/react.createElement("span", {\n    style: {\n      color: "#D2B48C"\n    }\n  }, "India"), " illustrate a multilateral approach, balancing relationships with the US, Russia, and others."), /*#__PURE__*/react.createElement("br", null)), /*#__PURE__*/react.createElement("p", {\n    className: "custom-paragraph"\n  }, "Through this network, arms transfers reveal interdependent alliances, bolstered influence, and efforts to contain rivals."), /*#__PURE__*/react.createElement("div", {\n    className: "chart-container",\n    style: {\n      width: \'80%\'\n    }\n  }, /*#__PURE__*/react.createElement(_005_WeaponTypeZCP, null)));\n};\n/* harmony default export */ const _005_emergingThreats = (emergingThreats);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LGVBQUFyYixtQkFBQSxXQUFJLENBQUMsZUFDbE9BLG1CQUFBLDBCQUFJQSxtQkFBQTtJQUFNMEwsS0FBSyxFQUFFO01BQUVtQyxLQUFLLEVBQUU7SUFBVTtFQUFFLEdBQUMsU0FBYSxDQUFDLHlCQUFxQixlQUFBN04sbUJBQUE7SUFBTTBMLEtBQUssRUFBRTtNQUFFMlAsU0FBUyxFQUFFO0lBQVM7RUFBRSxHQUFDLGlDQUFxQyxDQUFDLDZCQUE2QixDQUFDLGVBQUFyYixtQkFBQSxXQUFJLENBQUMsZUFDekxBLG1CQUFBLDBCQUFJQSxtQkFBQTtJQUFNMEwsS0FBSyxFQUFFO01BQUVtQyxLQUFLLEVBQUU7SUFBVTtFQUFFLEdBQUMsT0FBVyxDQUFDLHVCQUFtQixlQUFBN04sbUJBQUE7SUFBTTBMLEtBQUssRUFBRTtNQUFFMlAsU0FBUyxFQUFFO0lBQVM7RUFBRSxHQUFDLHdDQUE0QyxDQUFDLG9EQUFvRCxDQUFDLGVBQUFyYixtQkFBQSxXQUFJLENBQUMsZUFDbk5BLG1CQUFBLGFBQUksaUJBQWUsZUFBQUEsbUJBQUE7SUFBTTBMLEtBQUssRUFBRTtNQUFFbUMsS0FBSyxFQUFFO0lBQVU7RUFBRSxHQUFDLE9BQVcsQ0FBQyxpR0FBaUcsQ0FBQyxlQUFBN04sbUJBQUEsV0FBSSxDQUN0SyxDQUFDLGVBRUxBLG1CQUFBO0lBQUdnUCxTQUFTLEVBQUM7RUFBa0IsR0FBQywySEFFN0IsQ0FBQyxlQUVKaFAsbUJBQUE7SUFBS2dQLFNBQVMsRUFBQyxpQkFBaUI7SUFBQ3RELEtBQUssRUFBRTtNQUFFakUsS0FBSyxFQUFFO0lBQU07RUFBRSxnQkFDdkR6SCxtQkFBQSxDQUFDa1ksa0JBQXFCLE1BQUUsQ0FDckIsQ0FFRSxDQUFDO0FBRWQsQ0FBQztBQUVELDJEQUFlaUQsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2plY3RfdGVhbV9zbXVyZl9kZXBsb3kvLi9zcmMvY29tcG9uZW50cy9ncmFwaHMvMDA1X1dlYXBvblR5cGVDaG9yb3BsZXRoTWFwLmpzPzI4YjEiLCJ3ZWJwYWNrOi8vcHJvamVjdF90ZWFtX3NtdXJmX2RlcGxveS8uL3NyYy9jb21wb25lbnRzL2dyYXBocy8wMDVfV2VhcG9uVHlwZVpDUC5qcz80ODM4Iiwid2VicGFjazovL3Byb2plY3RfdGVhbV9zbXVyZl9kZXBsb3kvLi9zcmMvY29tcG9uZW50cy8wMDVfZW1lcmdpbmdUaHJlYXRzLmpzP2I0ZTQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVJlZiwgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xyXG5pbXBvcnQgKiBhcyB0b3BvanNvbiBmcm9tICd0b3BvanNvbi1jbGllbnQnO1xyXG5cclxuY29uc3QgQ2hvcm9wbGV0aE1hcCA9ICgpID0+IHtcclxuICBjb25zdCBzdmdSZWYgPSB1c2VSZWYoKTtcclxuICBjb25zdCBwaWVDaGFydFJlZiA9IHVzZVJlZigpO1xyXG5cclxuXHJcbiAgLy8gU3RhdGUgVmFyaWFibGVzXHJcbiAgY29uc3QgW3Rvb2x0aXAsIHNldFRvb2x0aXBdID0gdXNlU3RhdGUoeyB2aXNpYmxlOiBmYWxzZSwgeDogMCwgeTogMCwgY29udGVudDogbnVsbCB9KTtcclxuICBjb25zdCBbbW9kYWxEYXRhLCBzZXRNb2RhbERhdGFdID0gdXNlU3RhdGUobnVsbCk7IC8vIEZvciBzdG9yaW5nIGRhdGEgdG8gZGlzcGxheSBpbiB0aGUgbW9kYWxcclxuICBjb25zdCBbY291bnRyeURhdGEsIHNldENvdW50cnlEYXRhXSA9IHVzZVN0YXRlKHt9KTtcclxuICBjb25zdCBbY291bnRyaWVzLCBzZXRDb3VudHJpZXNdID0gdXNlU3RhdGUoW10pOyAvLyBTdG9yZSBHZW9KU09OIGZlYXR1cmVzXHJcbiAgY29uc3QgW3NlbGVjdGVkWWVhciwgc2V0U2VsZWN0ZWRZZWFyXSA9IHVzZVN0YXRlKG51bGwpOyAvLyBJbml0aWFsaXplIHRvIG51bGxcclxuICBjb25zdCBbc2VsZWN0ZWRXZWFwb25UeXBlLCBzZXRTZWxlY3RlZFdlYXBvblR5cGVdID0gdXNlU3RhdGUobnVsbCk7IC8vIEluaXRpYWxpemUgdG8gbnVsbFxyXG4gIGNvbnN0IFt3ZWFwb25UeXBlcywgc2V0V2VhcG9uVHlwZXNdID0gdXNlU3RhdGUoW10pO1xyXG4gIGNvbnN0IFttYXhRdWFudGl0aWVzLCBzZXRNYXhRdWFudGl0aWVzXSA9IHVzZVN0YXRlKHt9KTtcclxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlKG51bGwpO1xyXG4gIGNvbnN0IFttaW5ZZWFyLCBzZXRNaW5ZZWFyXSA9IHVzZVN0YXRlKDE5NTApOyAvLyBGaXhlZCBtaW5pbXVtIHllYXJcclxuICBjb25zdCBbbWF4WWVhciwgc2V0TWF4WWVhcl0gPSB1c2VTdGF0ZSgyMDIzKTsgLy8gRml4ZWQgbWF4aW11bSB5ZWFyXHJcbiAgY29uc3QgW3RvdGFsQXJtc1RyYWRlLCBzZXRUb3RhbEFybXNUcmFkZV0gPSB1c2VTdGF0ZSgwKTtcclxuXHJcbiAgLy8gRGF0YSBVUkxcclxuICBjb25zdCBkYXRhVXJsID0gXCIvZGF0YS9wcm9jZXNzZWQvcHJvY2Vzc2VkX2FybXNfdHJhbnNmZXJfYnlfd2VhcG9uX3R5cGVzLmNzdlwiO1xyXG4gIGNvbnN0IHBpZUNoYXJ0VXJsID0gXCIvZGF0YS9wcm9jZXNzZWQvcHJvY2Vzc2VkX3JlZ2lvbmFsX3RyYW5zZmVycy5jc3ZcIjtcclxuXHJcbiAgLyoqXHJcbiAgICogQ291bnRyeSBOYW1lIE1hcHBpbmdcclxuICAgKiBNYXAgZGF0YXNldCBjb3VudHJ5IG5hbWVzIHRvIEdlb0pTT04gY291bnRyeSBuYW1lcyBpZiB0aGV5IGRpZmZlci5cclxuICAgKi9cclxuICBjb25zdCBjb3VudHJ5TmFtZU1hcHBpbmcgPSB7XHJcbiAgICBcIkNvdGUgZCdJdm9pcmVcIjogXCJJdm9yeSBDb2FzdFwiLFxyXG4gICAgXCJDb25nb1wiOiBcIlJlcHVibGljIG9mIHRoZSBDb25nb1wiLCAvLyBBZGp1c3QgYmFzZWQgb24gR2VvSlNPTiBkYXRhXHJcbiAgICAvLyBBZGQgbW9yZSBtYXBwaW5ncyBhcyBuZWNlc3NhcnlcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBEYXRhIExvYWRpbmcgRWZmZWN0XHJcbiAgICogRmV0Y2hlcyBhbmQgcHJvY2Vzc2VzIHRoZSB3b3JsZCBtYXAgYW5kIGFybXMgdHJhbnNmZXIgZGF0YSBvbmNlIHdoZW4gdGhlIGNvbXBvbmVudCBtb3VudHMuXHJcbiAgICovXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIHNldExvYWRpbmcodHJ1ZSk7XHJcbiAgICBQcm9taXNlLmFsbChbXHJcbiAgICAgIGQzLmpzb24oJy9jb3VudHJpZXMtMTEwbS5qc29uJyksXHJcbiAgICAgIGQzLmNzdihkYXRhVXJsLCBkID0+IHtcclxuICAgICAgICBjb25zdCB5ZWFyID0gK2RbJ3llYXInXTtcclxuICAgICAgICBjb25zdCBxdWFudGl0eSA9ICtkWydxdWFudGl0eSddO1xyXG4gICAgICAgIC8vIFZhbGlkYXRlIHllYXIgcmFuZ2VcclxuICAgICAgICBpZiAoaXNOYU4oeWVhcikgfHwgaXNOYU4ocXVhbnRpdHkpIHx8IHllYXIgPCBtaW5ZZWFyIHx8IHllYXIgPiBtYXhZZWFyKSB7XHJcbiAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gU2tpcCBpbnZhbGlkIG9yIG91dC1vZi1yYW5nZSByb3dzXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICByZWNpcGllbnRzOiBkWydyZWNpcGllbnRzJ10sXHJcbiAgICAgICAgICBzdXBwbGllcnM6IGRbJ3N1cHBsaWVycyddLFxyXG4gICAgICAgICAgeWVhcjogTWF0aC5yb3VuZCh5ZWFyKSwgLy8gRW5zdXJlIHllYXIgaXMgYW4gaW50ZWdlclxyXG4gICAgICAgICAgcXVhbnRpdHk6IHF1YW50aXR5LFxyXG4gICAgICAgICAgd2VhcG9uRGVzY3JpcHRpb246IGRbJ3dlYXBvbiBkZXNjcmlwdGlvbiddLFxyXG4gICAgICAgICAgc3RhdHVzOiBkWydzdGF0dXMnXSxcclxuICAgICAgICB9O1xyXG4gICAgICB9KVxyXG4gICAgXSlcclxuICAgIC50aGVuKChbd29ybGREYXRhUmF3LCBhcm1zRGF0YVJhd10pID0+IHtcclxuICAgICAgLy8gRmlsdGVyIG91dCBudWxsIGVudHJpZXNcclxuICAgICAgYXJtc0RhdGFSYXcgPSBhcm1zRGF0YVJhdy5maWx0ZXIocm93ID0+IHJvdyAhPT0gbnVsbCk7XHJcblxyXG4gICAgICAvLyBDb252ZXJ0IFRvcG9KU09OIHRvIEdlb0pTT04gRmVhdHVyZXNcclxuICAgICAgY29uc3QgY291bnRyaWVzRGF0YSA9IHRvcG9qc29uLmZlYXR1cmUod29ybGREYXRhUmF3LCB3b3JsZERhdGFSYXcub2JqZWN0cy5jb3VudHJpZXMpLmZlYXR1cmVzO1xyXG4gICAgICBzZXRDb3VudHJpZXMoY291bnRyaWVzRGF0YSk7IC8vIFN0b3JlIGNvdW50cmllcyBkYXRhIGluIHN0YXRlXHJcblxyXG4gICAgICAvLyBQcm9jZXNzIGFybXMgdHJhbnNmZXIgZGF0YVxyXG4gICAgICBjb25zdCBwcm9jZXNzZWREYXRhID0ge307XHJcbiAgICAgIGNvbnN0IHVuaXF1ZVdlYXBvblR5cGVzID0gbmV3IFNldCgpO1xyXG4gICAgICBjb25zdCB0ZW1wTWF4UXVhbnRpdGllcyA9IHt9O1xyXG5cclxuICAgICAgYXJtc0RhdGFSYXcuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICAgIGxldCBjb3VudHJ5ID0gcm93LnJlY2lwaWVudHM7XHJcbiAgICAgICAgY291bnRyeSA9IGNvdW50cnlOYW1lTWFwcGluZ1tjb3VudHJ5XSB8fCBjb3VudHJ5OyAvLyBBcHBseSBtYXBwaW5nXHJcblxyXG4gICAgICAgIGNvbnN0IHllYXIgPSByb3cueWVhcjtcclxuICAgICAgICBjb25zdCB3ZWFwb25UeXBlID0gcm93LndlYXBvbkRlc2NyaXB0aW9uID8gcm93LndlYXBvbkRlc2NyaXB0aW9uLnRyaW0oKSA6IFwiXCI7IC8vIFRyaW0gd2hpdGVzcGFjZVxyXG4gICAgICAgIGNvbnN0IHF1YW50aXR5ID0gcm93LnF1YW50aXR5O1xyXG4gICAgICAgIGNvbnN0IHN1cHBsaWVycyA9IHJvdy5zdXBwbGllcnM7XHJcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gcm93LnN0YXR1cztcclxuXHJcbiAgICAgICAgLy8gT25seSBhZGQgbm9uLWVtcHR5IHdlYXBvbiB0eXBlc1xyXG4gICAgICAgIGlmICh3ZWFwb25UeXBlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICB1bmlxdWVXZWFwb25UeXBlcy5hZGQod2VhcG9uVHlwZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXByb2Nlc3NlZERhdGFbY291bnRyeV0pIHtcclxuICAgICAgICAgIHByb2Nlc3NlZERhdGFbY291bnRyeV0gPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFwcm9jZXNzZWREYXRhW2NvdW50cnldW3llYXJdKSB7XHJcbiAgICAgICAgICBwcm9jZXNzZWREYXRhW2NvdW50cnldW3llYXJdID0ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBc3N1bWluZyBvbmUgZW50cnkgcGVyIGNvdW50cnkteWVhci13ZWFwb25UeXBlXHJcbiAgICAgICAgcHJvY2Vzc2VkRGF0YVtjb3VudHJ5XVt5ZWFyXVt3ZWFwb25UeXBlXSA9IHtcclxuICAgICAgICAgIHF1YW50aXR5LFxyXG4gICAgICAgICAgc3VwcGxpZXJzLFxyXG4gICAgICAgICAgc3RhdHVzXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIG1heCBxdWFudGl0aWVzIGZvciBzY2FsZXNcclxuICAgICAgICBpZiAoIXRlbXBNYXhRdWFudGl0aWVzW3dlYXBvblR5cGVdKSB7XHJcbiAgICAgICAgICB0ZW1wTWF4UXVhbnRpdGllc1t3ZWFwb25UeXBlXSA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRlbXBNYXhRdWFudGl0aWVzW3dlYXBvblR5cGVdW3llYXJdIHx8IHF1YW50aXR5ID4gdGVtcE1heFF1YW50aXRpZXNbd2VhcG9uVHlwZV1beWVhcl0pIHtcclxuICAgICAgICAgIHRlbXBNYXhRdWFudGl0aWVzW3dlYXBvblR5cGVdW3llYXJdID0gcXVhbnRpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIENvbnN0cnVjdCB3ZWFwb25UeXBlc0FycmF5IHdpdGggXCJBbGxcIiBhbmQgZmlsdGVyIG91dCBhbnkgZW1wdHkgZW50cmllc1xyXG4gICAgICBjb25zdCB3ZWFwb25UeXBlc0FycmF5ID0gW1wiQWxsXCIsIC4uLkFycmF5LmZyb20odW5pcXVlV2VhcG9uVHlwZXMpLmZpbHRlcih3dCA9PiB3dCAhPT0gXCJcIiAmJiB3dCAhPT0gdW5kZWZpbmVkKS5zb3J0KCldO1xyXG4gICAgICBzZXRXZWFwb25UeXBlcyh3ZWFwb25UeXBlc0FycmF5KTtcclxuICAgICAgc2V0Q291bnRyeURhdGEocHJvY2Vzc2VkRGF0YSk7XHJcbiAgICAgIHNldE1heFF1YW50aXRpZXModGVtcE1heFF1YW50aXRpZXMpO1xyXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcclxuXHJcbiAgICAgIC8vIFNldCBkZWZhdWx0IHNlbGVjdGVkWWVhciBhbmQgc2VsZWN0ZWRXZWFwb25UeXBlIGJhc2VkIG9uIGF2YWlsYWJsZSBkYXRhXHJcbiAgICAgIGNvbnN0IGF2YWlsYWJsZVllYXJzID0gQXJyYXkuZnJvbShuZXcgU2V0KGFybXNEYXRhUmF3Lm1hcChkID0+IGQueWVhcikpKS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XHJcbiAgICAgIGlmIChhdmFpbGFibGVZZWFycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgc2V0U2VsZWN0ZWRZZWFyKDIwMTkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAod2VhcG9uVHlwZXNBcnJheS5pbmNsdWRlcygnQWxsJykpIHtcclxuICAgICAgICBzZXRTZWxlY3RlZFdlYXBvblR5cGUoJ0FsbCcpO1xyXG4gICAgICB9IGVsc2UgaWYgKHdlYXBvblR5cGVzQXJyYXkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHNldFNlbGVjdGVkV2VhcG9uVHlwZSh3ZWFwb25UeXBlc0FycmF5WzBdKTtcclxuICAgICAgfVxyXG5cclxuICAgIH0pXHJcbiAgICAuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbG9hZGluZyBkYXRhOlwiLCBlcnJvcik7XHJcbiAgICAgIHNldEVycm9yKFwiRmFpbGVkIHRvIGxvYWQgZGF0YS4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIik7XHJcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgfSwgW10pOyAvLyBFbXB0eSBkZXBlbmRlbmN5IGFycmF5IGVuc3VyZXMgdGhpcyBydW5zIG9uY2Ugb24gbW91bnRcclxuXHJcbiAgLyoqXHJcbiAgICogUmVuZGVyaW5nIEVmZmVjdFxyXG4gICAqIERyYXdzIHRoZSBtYXAgd2hlbmV2ZXIgc2VsZWN0ZWRZZWFyLCBzZWxlY3RlZFdlYXBvblR5cGUsIG9yIGNvdW50cnlEYXRhIGNoYW5nZXMuXHJcbiAgICovXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmIChcclxuICAgICAgY291bnRyaWVzLmxlbmd0aCA9PT0gMCB8fFxyXG4gICAgICBPYmplY3Qua2V5cyhjb3VudHJ5RGF0YSkubGVuZ3RoID09PSAwIHx8XHJcbiAgICAgIHNlbGVjdGVkWWVhciA9PT0gbnVsbCB8fFxyXG4gICAgICBpc05hTihzZWxlY3RlZFllYXIpIHx8XHJcbiAgICAgICFzZWxlY3RlZFdlYXBvblR5cGVcclxuICAgICkgcmV0dXJuO1xyXG5cclxuICAgIGRyYXdNYXAoY291bnRyaWVzLCBjb3VudHJ5RGF0YSwgc2VsZWN0ZWRZZWFyLCBzZWxlY3RlZFdlYXBvblR5cGUpO1xyXG4gIH0sIFtzZWxlY3RlZFllYXIsIHNlbGVjdGVkV2VhcG9uVHlwZSwgY291bnRyeURhdGEsIGNvdW50cmllc10pO1xyXG5cclxuICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgY29uc3Qgd2lkdGggPSAyMDA7IC8vIEFkanVzdCBhcyBuZWVkZWRcclxuICAgIGNvbnN0IGhlaWdodCA9IDIwMDsgLy8gTWF0Y2ggdGhlIGNvbnRhaW5lcidzIGhlaWdodFxyXG4gICAgY29uc3QgcmFkaXVzID0gTWF0aC5taW4od2lkdGgsIGhlaWdodCkgKiAwLjM7XHJcblxyXG4gICAgY29uc3Qgc3ZnID0gZDMuc2VsZWN0KHBpZUNoYXJ0UmVmLmN1cnJlbnQpLmF0dHIoJ3dpZHRoJywgd2lkdGgpLmF0dHIoJ2hlaWdodCcsIGhlaWdodCk7XHJcbiAgICBzdmcuc2VsZWN0QWxsKCcqJykucmVtb3ZlKCk7XHJcblxyXG4gICAgZDMuY3N2KHBpZUNoYXJ0VXJsKS50aGVuKGRhdGEgPT4ge1xyXG4gICAgICBkYXRhLmZvckVhY2goZCA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgeWVhciA9IDE5NTA7IHllYXIgPD0gMjAyMzsgeWVhcisrKSB7XHJcbiAgICAgICAgICBkW3llYXJdID0gK2RbeWVhcl0gLyAxMDAwIHx8IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGNvbnN0IGN1c3RvbU9yZGVyID0gW1wiQXNpYSBhbmQgT2NlYW5pYVwiLCBcIkV1cm9wZVwiLCBcIk1pZGRsZSBFYXN0XCIsIFwiQW1lcmljYXNcIiwgXCJBZnJpY2FcIl07IC8vIERlZmluZSB0aGUgY3VzdG9tIG9yZGVyXHJcblxyXG4gICAgICBjb25zdCBmaWx0ZXJlZERhdGEgPSBkYXRhLmZpbHRlcihkID0+IFxyXG4gICAgICAgIGRbJ0ltcG9ydHMgYnkgUmVnaW9ucyddICE9PSAnV29ybGQgdG90YWwnICYmIGRbJ0ltcG9ydHMgYnkgUmVnaW9ucyddICE9PSAnSW50ZXJuYXRpb25hbCBvcmdhbml6YXRpb25zJ1xyXG4gICAgICApO1xyXG5cclxuICAgICAgY29uc3QgcmVnaW9uQXJtc0RhdGEgPSBBcnJheS5mcm9tKFxyXG4gICAgICAgIGQzLmdyb3VwKGZpbHRlcmVkRGF0YSwgZCA9PiBkWydJbXBvcnRzIGJ5IFJlZ2lvbnMnXSksXHJcbiAgICAgICAgKFtyZWdpb24sIHZhbHVlc10pID0+ICh7XHJcbiAgICAgICAgICByZWdpb24sXHJcbiAgICAgICAgICBhcm1zVHJhZGU6IHZhbHVlc1swXVtzZWxlY3RlZFllYXJdIHx8IDBcclxuICAgICAgICB9KVxyXG4gICAgICApLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAvLyBTb3J0IGJhc2VkIG9uIHRoZSBjdXN0b20gb3JkZXJcclxuICAgICAgICByZXR1cm4gY3VzdG9tT3JkZXIuaW5kZXhPZihhLnJlZ2lvbikgLSBjdXN0b21PcmRlci5pbmRleE9mKGIucmVnaW9uKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCB0b3RhbEFybXNUcmFkZSA9IGQzLnN1bShyZWdpb25Bcm1zRGF0YSwgZCA9PiBkLmFybXNUcmFkZSk7XHJcbiAgICAgIHNldFRvdGFsQXJtc1RyYWRlKHRvdGFsQXJtc1RyYWRlKTtcclxuXHJcbiAgICAgIGlmICh0b3RhbEFybXNUcmFkZSA9PT0gMCkge1xyXG4gICAgICAgIHN2Zy5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgLmF0dHIoJ3gnLCB3aWR0aCAvIDIpXHJcbiAgICAgICAgICAuYXR0cigneScsIGhlaWdodCAvIDIpXHJcbiAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcclxuICAgICAgICAgIC50ZXh0KCdObyBkYXRhIGF2YWlsYWJsZSBmb3IgdGhpcyB5ZWFyJyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBjb2xvck1hcCA9IHtcclxuICAgICAgICBcIkFzaWEgYW5kIE9jZWFuaWFcIjogXCIjRjQ0MzM2XCIsICAvLyBTb2Z0IHJlZC9vcmFuZ2VcclxuICAgICAgICBcIkV1cm9wZVwiOiBcIiMwRDQ3QTFcIiwgICAgICAgICAgIC8vIEJyaWdodCByZWRcclxuICAgICAgICBcIk1pZGRsZSBFYXN0XCI6IFwiIzM4OEUzQ1wiLCAgICAgIC8vIERhcmsgcmVkXHJcbiAgICAgICAgXCJBbWVyaWNhc1wiOiBcIiNGRjk4MDBcIiwgICAgICAgICAvLyBWaWJyYW50IHJlZFxyXG4gICAgICAgIFwiQWZyaWNhXCI6IFwiIzZENEM0MVwiLCAgICAgICAgICAgLy8gRGFya2VyIHJlZFxyXG4gICAgICB9O1xyXG4gIFxyXG4gICAgICAvLyBDdXN0b20gY29sb3Igc2NhbGUgdXNpbmcgdGhlIGRpY3Rpb25hcnlcclxuICAgICAgY29uc3QgY29sb3JTY2FsZSA9IGQzLnNjYWxlT3JkaW5hbCgpXHJcbiAgICAgICAgLmRvbWFpbihyZWdpb25Bcm1zRGF0YS5tYXAoZCA9PiBkLnJlZ2lvbikpXHJcbiAgICAgICAgLnJhbmdlKHJlZ2lvbkFybXNEYXRhLm1hcChkID0+IGNvbG9yTWFwW2QucmVnaW9uXSkpO1xyXG5cclxuXHJcbiAgICAgIGNvbnN0IHBpZSA9IGQzLnBpZSgpLnNvcnQobnVsbCkgLy8gRG8gbm90IGF1dG9tYXRpY2FsbHkgc29ydCB0aGUgZGF0YVxyXG4gICAgICAuc3RhcnRBbmdsZSgwKSAvLyBTdGFydCBhbmdsZSBhdCAwIChBUEVDIHN0YXJ0cyBmcm9tIDAgZGVncmVlcylcclxuICAgICAgLmVuZEFuZ2xlKDIgKiBNYXRoLlBJKS52YWx1ZShkID0+IGQuYXJtc1RyYWRlKTtcclxuICAgICAgY29uc3QgYXJjID0gZDMuYXJjKCkub3V0ZXJSYWRpdXMocmFkaXVzIC0gMTApLmlubmVyUmFkaXVzKDApOyBcclxuICAgICAgY29uc3QgbGFiZWxBcmMgPSBkMy5hcmMoKS5vdXRlclJhZGl1cyhyYWRpdXMgKyAyMCkuaW5uZXJSYWRpdXMocmFkaXVzICsgMjApO1xyXG5cclxuXHJcbiAgICAgIHN2Zy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7d2lkdGggKiAwLjZ9LCAke2hlaWdodCAvIDJ9KWApXHJcbiAgICAgICAgLnNlbGVjdEFsbCgncGF0aCcpXHJcbiAgICAgICAgLmRhdGEocGllKHJlZ2lvbkFybXNEYXRhKSlcclxuICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgIC5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgIC5hdHRyKCdkJywgYXJjKVxyXG4gICAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiBjb2xvclNjYWxlKGQuZGF0YS5yZWdpb24pKVxyXG4gICAgICAgIC5hdHRyKCdzdHJva2UnLCAnI2UwZTBlMCcpXHJcbiAgICAgICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsICcxLjVweCcpXHJcbiAgICAgICAgLmF0dHIoJ29wYWNpdHknLCAwLjgpXHJcbiAgICAgICAgLm9uKCdtb3VzZWVudGVyJywgKGV2ZW50LCBkKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCByZWdpb25QZXJjZW50YWdlID0gKChkLmRhdGEuYXJtc1RyYWRlIC8gdG90YWxBcm1zVHJhZGUpICogMTAwKS50b0ZpeGVkKDIpO1xyXG4gICAgICAgICAgY29uc3QgY29udGFpbmVyID0gc3ZnUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICBjb25zdCBvZmZzZXRYID0gZXZlbnQuY2xpZW50WCAtIGNvbnRhaW5lci5sZWZ0O1xyXG4gICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IGV2ZW50LmNsaWVudFkgLSBjb250YWluZXIudG9wO1xyXG4gICAgICAgICAgc2V0VG9vbHRpcCh7XHJcbiAgICAgICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgICAgIHg6IG9mZnNldFggKyAxMCxcclxuICAgICAgICAgICAgeTogb2Zmc2V0WSAtIDEwLFxyXG4gICAgICAgICAgICBjb250ZW50OiAoPGRpdj48c3Ryb25nPntkLmRhdGEucmVnaW9ufTo8L3N0cm9uZz4gJHtkLmRhdGEuYXJtc1RyYWRlLnRvTG9jYWxlU3RyaW5nKCl9QiAoe3JlZ2lvblBlcmNlbnRhZ2V9JSk8L2Rpdj4pLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oJ21vdXNlbW92ZScsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgY29udGFpbmVyID0gc3ZnUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICBjb25zdCBvZmZzZXRYID0gZXZlbnQuY2xpZW50WCAtIGNvbnRhaW5lci5sZWZ0O1xyXG4gICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IGV2ZW50LmNsaWVudFkgLSBjb250YWluZXIudG9wO1xyXG4gICAgICAgICAgc2V0VG9vbHRpcChwcmV2ID0+ICh7XHJcbiAgICAgICAgICAgIC4uLnByZXYsXHJcbiAgICAgICAgICAgIHg6IG9mZnNldFggKyAxMCxcclxuICAgICAgICAgICAgeTogb2Zmc2V0WSAtIDEwLFxyXG4gICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKCdtb3VzZWxlYXZlJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICBzZXRUb29sdGlwKHsgdmlzaWJsZTogZmFsc2UsIHg6IDAsIHk6IDAsIGNvbnRlbnQ6ICcnIH0pO1xyXG5cclxuICAgICAgICAgIGQzLnNlbGVjdChldmVudC5jdXJyZW50VGFyZ2V0KVxyXG4gICAgICAgICAgICAudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgIC5kdXJhdGlvbigyMDApXHJcbiAgICAgICAgICAgIC5hdHRyKCdkJywgYXJjKVxyXG4gICAgICAgICAgICAuYXR0cignb3BhY2l0eScsIDAuODUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzdmcuYXBwZW5kKCdnJylcclxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3dpZHRoICogMC42fSwgJHtoZWlnaHQgLyAyfSlgKVxyXG4gICAgICAgICAgLnNlbGVjdEFsbCgndGV4dCcpXHJcbiAgICAgICAgICAuZGF0YShwaWUocmVnaW9uQXJtc0RhdGEpKVxyXG4gICAgICAgICAgLmVudGVyKClcclxuICAgICAgICAgIC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBbeCwgeV0gPSBsYWJlbEFyYy5jZW50cm9pZChkKTtcclxuICAgICAgICAgICAgY29uc3QgYW5nbGUgPSAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyOyAgLy8gQ2FsY3VsYXRlIHRoZSBhbmdsZSBvZiB0aGUgYXJjIG1pZHBvaW50XHJcbiAgICAgICAgICAgIGxldCByb3RhdGlvbiA9IChhbmdsZSAqIDE4MCAvIE1hdGguUEkpIC0gOTA7ICAvLyBSb3RhdGUgdG8gbWFrZSB0ZXh0IHZlcnRpY2FsXHJcbiAgICAgICAgICAgIGNvbnN0IGFyY0xlbmd0aCA9IGQuZW5kQW5nbGUgLSBkLnN0YXJ0QW5nbGU7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyY0xlbmd0aERlZyA9IGFyY0xlbmd0aCAqIDE4MCAvIE1hdGguUEk7XHJcbiAgICAgICAgICAgIC8vIEZsaXAgdGV4dCBpZiBpdCdzIGJldHdlZW4gMTgwIGFuZCAzNjAgZGVncmVlc1xyXG4gICAgICAgICAgICBpZiAoYXJjTGVuZ3RoRGVnIDwgMzApIHtcclxuICAgICAgICAgICAgICAvLyBGbGlwIHRleHQgaWYgaXQncyBiZXR3ZWVuIDE4MCBhbmQgMzYwIGRlZ3JlZXNcclxuICAgICAgICAgICAgICBpZiAocm90YXRpb24gPiA5MCkge1xyXG4gICAgICAgICAgICAgICAgcm90YXRpb24gLT0gMTgwO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByb3RhdGlvbiA9IDA7ICAvLyBObyByb3RhdGlvbiBpZiB0aGUgYXJjIGlzIHdpZGUgZW5vdWdoXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBgdHJhbnNsYXRlKCR7eH0sICR7eX0pIHJvdGF0ZSgke3JvdGF0aW9ufSlgO1xyXG4gICAgICAgICAgfSkgLy8gUG9zaXRpb24gbGFiZWxzIGFuZCByb3RhdGUgdGhlbSB0byBiZSB2ZXJ0aWNhbCB0byB0aGUgYXJjXHJcbiAgICAgICAgICAuc3R5bGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpXHJcbiAgICAgICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICcxNHB4JykgLy8gSW5jcmVhc2UgZm9udCBzaXplXHJcbiAgICAgICAgICAuc3R5bGUoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKSAvLyBPcHRpb25hbDogbWFrZSB0aGUgdGV4dCBib2xkXHJcbiAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnI2UwZTBlMCcpIC8vIFNldCB0ZXh0IGNvbG9yXHJcbiAgICAgICAgICAuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxyXG4gICAgICAgICAgLnRleHQoZCA9PiB7XHJcbiAgICAgICAgICAgIC8vIFNldCBjdXN0b20gbGFiZWxzIGZvciBzcGVjaWZpYyByZWdpb25zXHJcbiAgICAgICAgICAgIGlmIChkLmRhdGEucmVnaW9uID09PSAnQXNpYSBhbmQgT2NlYW5pYScpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gJ0FQQUMnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGQuZGF0YS5yZWdpb24gPT09ICdNaWRkbGUgRWFzdCcpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gJ01FJztcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChkLmRhdGEucmVnaW9uID09PSAnQW1lcmljYXMnKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuICdBTVMnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJldHVybiBkLmRhdGEucmVnaW9uOyAgLy8gRGVmYXVsdCBsYWJlbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGxvYWRpbmcgZGF0YTpcIiwgZXJyb3IpO1xyXG4gICAgfSk7XHJcbiAgfSwgW2RhdGFVcmwsIHNlbGVjdGVkWWVhcl0pO1xyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIERyYXcgdGhlIE1hcFxyXG4gICAqL1xyXG4gIGNvbnN0IGRyYXdNYXAgPSAoY291bnRyaWVzLCBhcm1zRGF0YSwgeWVhciwgd2VhcG9uVHlwZSkgPT4ge1xyXG4gICAgY29uc3Qgd2lkdGggPSA4MDA7XHJcbiAgICBjb25zdCBoZWlnaHQgPSA0MDA7XHJcblxyXG4gICAgLy8gRGVmaW5lIFByb2plY3Rpb24gYW5kIFBhdGhcclxuICAgIGNvbnN0IHByb2plY3Rpb24gPSBkMy5nZW9NZXJjYXRvcigpXHJcbiAgICAgIC5jZW50ZXIoWzAsIDIwXSlcclxuICAgICAgLnNjYWxlKDEzMClcclxuICAgICAgLnRyYW5zbGF0ZShbd2lkdGggLyAyLCBoZWlnaHQgLyAyXSk7XHJcblxyXG4gICAgY29uc3QgcGF0aCA9IGQzLmdlb1BhdGgoKS5wcm9qZWN0aW9uKHByb2plY3Rpb24pO1xyXG5cclxuICAgIC8vIERlZmluZSBDb2xvciBhbmQgU2l6ZSBTY2FsZXNcclxuICAgIGxldCBtYXhRdWFudGl0eTtcclxuICAgIGxldCBjb2xvclNjYWxlO1xyXG4gICAgbGV0IHNpemVTY2FsZTtcclxuXHJcbiAgICBpZiAod2VhcG9uVHlwZSA9PT0gXCJBbGxcIikge1xyXG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIHN1bSBvZiBxdWFudGl0aWVzIGFjcm9zcyBhbGwgd2VhcG9uIHR5cGVzIGZvciBlYWNoIGNvdW50cnlcclxuICAgICAgbWF4UXVhbnRpdHkgPSBkMy5tYXgoY291bnRyaWVzLCBkID0+IHtcclxuICAgICAgICBjb25zdCBjb3VudHJ5ID0gZC5wcm9wZXJ0aWVzLm5hbWU7XHJcbiAgICAgICAgY29uc3QgeWVhckRhdGEgPSBhcm1zRGF0YVtjb3VudHJ5XT8uW3llYXJdO1xyXG4gICAgICAgIGlmICh5ZWFyRGF0YSkge1xyXG4gICAgICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoeWVhckRhdGEpLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgKyBjdXJyLnF1YW50aXR5LCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH0pIHx8IDA7XHJcblxyXG4gICAgICBjb2xvclNjYWxlID0gZDMuc2NhbGVTZXF1ZW50aWFsKGQzLmludGVycG9sYXRlUmVkcylcclxuICAgICAgICAgIC5kb21haW4oW01hdGgubG9nKDEpLCBNYXRoLmxvZyhtYXhRdWFudGl0eSldKTsgLy8gVXNpbmcgTWF0aC5sb2cgdG8gaGFuZGxlIGxvZ2FyaXRobWljIHNjYWxpbmdcclxuXHJcbiAgICAgIHNpemVTY2FsZSA9IGQzLnNjYWxlU3FydCgpXHJcbiAgICAgICAgLmRvbWFpbihbMCwgbWF4UXVhbnRpdHldKVxyXG4gICAgICAgIC5yYW5nZShbMCwgNTBdKTsgLy8gQWRqdXN0IGNpcmNsZSBzaXplIHJhbmdlIGFzIG5lY2Vzc2FyeVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gU3BlY2lmaWMgd2VhcG9uIHR5cGVcclxuICAgICAgbWF4UXVhbnRpdHkgPSBkMy5tYXgoY291bnRyaWVzLCBkID0+IGFybXNEYXRhW2QucHJvcGVydGllcy5uYW1lXT8uW3llYXJdPy5bd2VhcG9uVHlwZV0/LnF1YW50aXR5IHx8IDApIHx8IDA7XHJcblxyXG4gICAgICBjb2xvclNjYWxlID0gZDMuc2NhbGVTZXF1ZW50aWFsKGQzLmludGVycG9sYXRlUmVkcylcclxuICAgICAgICAgIC5kb21haW4oW01hdGgubG9nKDEpLCBNYXRoLmxvZyhtYXhRdWFudGl0eSldKTsgLy8gVXNpbmcgTWF0aC5sb2cgdG8gaGFuZGxlIGxvZ2FyaXRobWljIHNjYWxpbmdcclxuXHJcblxyXG4gICAgICBzaXplU2NhbGUgPSBkMy5zY2FsZVNxcnQoKVxyXG4gICAgICAgIC5kb21haW4oWzAsIG1heFF1YW50aXR5XSlcclxuICAgICAgICAucmFuZ2UoWzAsIDUwXSk7IC8vIEFkanVzdCBjaXJjbGUgc2l6ZSByYW5nZSBhcyBuZWNlc3NhcnlcclxuICAgIH1cclxuXHJcbiAgICAvLyBTZWxlY3QgYW5kIFNldHVwIFNWR1xyXG4gICAgY29uc3Qgc3ZnID0gZDMuc2VsZWN0KHN2Z1JlZi5jdXJyZW50KVxyXG4gICAgICAuYXR0cigndmlld0JveCcsIGAwIDAgJHt3aWR0aH0gJHtoZWlnaHR9YClcclxuICAgICAgLmF0dHIoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQgbWVldCcpXHJcbiAgICAgIC5zdHlsZSgnd2lkdGgnLCAnMTAwJScpXHJcbiAgICAgIC5zdHlsZSgnaGVpZ2h0JywgJ2F1dG8nKVxyXG4gICAgICAuc3R5bGUoJ2JhY2tncm91bmQtY29sb3InLCAnJylcclxuICAgICAgLmNhbGwoZDMuem9vbSgpIC8vIEltcGxlbWVudCBab29taW5nIGFuZCBQYW5uaW5nXHJcbiAgICAgICAgLnNjYWxlRXh0ZW50KFsxLCA4XSkgLy8gWm9vbSBzY2FsZSBsaW1pdHNcclxuICAgICAgICAub24oJ3pvb20nLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgIGcuYXR0cigndHJhbnNmb3JtJywgZXZlbnQudHJhbnNmb3JtKTtcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIGdyb3VwIGZvciBtYXAgZWxlbWVudHNcclxuICAgIGxldCBnID0gc3ZnLnNlbGVjdCgnZy5tYXAtZ3JvdXAnKTtcclxuICAgIGlmIChnLmVtcHR5KCkpIHtcclxuICAgICAgZyA9IHN2Zy5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdtYXAtZ3JvdXAnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDbGVhciBwcmV2aW91cyBkcmF3aW5ncyB3aXRoaW4gdGhlIGdyb3VwXHJcbiAgICBnLnNlbGVjdEFsbCgnKicpLnJlbW92ZSgpO1xyXG5cclxuICAgIC8vIEZ1bmN0aW9uIHRvIEhhbmRsZSBUb29sdGlwIENvbnRlbnRcclxuICAgIGNvbnN0IGhhbmRsZVRvb2x0aXBDb250ZW50ID0gKGNvdW50cnksIHllYXIsIHdlYXBvblR5cGUsIGRhdGEpID0+IHtcclxuICAgICAgaWYgKHdlYXBvblR5cGUgPT09IFwiQWxsXCIpIHtcclxuICAgICAgICBjb25zdCB0b3RhbFF1YW50aXR5ID0gT2JqZWN0LnZhbHVlcyhkYXRhKS5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3Vyci5xdWFudGl0eSwgMCk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgIDxkaXYgc3R5bGU9e3sgbGluZUhlaWdodDogJzEuNicsIGZvbnRTaXplOiAnMTZweCcgfX0+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+e2NvdW50cnl9PC9zdHJvbmc+PGJyLz5cclxuICAgICAgICAgICAgVG90YWwgUXVhbnRpdHk6IHt0b3RhbFF1YW50aXR5fSB1bml0czxici8+XHJcbiAgICAgICAgICAgIDxzcGFuIHN0eWxlPXt7IGZvbnRXZWlnaHQ6ICdib2xkJywgY29sb3I6ICcjZTc0YzNjJyB9fT5cclxuICAgICAgICAgICAgICBDbGljayBmb3IgRGV0YWlsc1xyXG4gICAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEhhbmRsZSBvdGhlciB3ZWFwb24gdHlwZXMgaWYgbmVjZXNzYXJ5XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgIDxkaXYgc3R5bGU9e3sgbGluZUhlaWdodDogJzEuNicsIGZvbnRTaXplOiAnMTZweCcgfX0+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+e2NvdW50cnl9PC9zdHJvbmc+PGJyLz5cclxuICAgICAgICAgICAgV2VhcG9uOiB7d2VhcG9uVHlwZX08YnIvPlxyXG4gICAgICAgICAgICBRdWFudGl0eToge2RhdGEucXVhbnRpdHl9IHVuaXRzPGJyLz5cclxuICAgICAgICAgICAgU3RhdHVzOiB7ZGF0YS5zdGF0dXN9PGJyLz5cclxuICAgICAgICAgICAgPHNwYW4gc3R5bGU9e3sgZm9udFdlaWdodDogJ2JvbGQnLCBjb2xvcjogJyNlNzRjM2MnIH19PlxyXG4gICAgICAgICAgICAgIENsaWNrIGZvciBEZXRhaWxzXHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgbG9nQ29sb3JTY2FsZSA9ICh2YWx1ZSkgPT4gY29sb3JTY2FsZShNYXRoLmxvZyh2YWx1ZSkpO1xyXG5cclxuICAgIC8vIERyYXcgQ291bnRyeSBQYXRocyB3aXRoIENvbG9yIEJhc2VkIG9uIFF1YW50aXR5XHJcbiAgICBnLnNlbGVjdEFsbCgncGF0aCcpXHJcbiAgICAgIC5kYXRhKGNvdW50cmllcylcclxuICAgICAgLmVudGVyKClcclxuICAgICAgLmFwcGVuZCgncGF0aCcpXHJcbiAgICAgIC5hdHRyKCdkJywgcGF0aClcclxuICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+IHtcclxuICAgICAgICBjb25zdCBjb3VudHJ5ID0gZC5wcm9wZXJ0aWVzLm5hbWU7XHJcbiAgICAgICAgaWYgKHdlYXBvblR5cGUgPT09IFwiQWxsXCIpIHtcclxuICAgICAgICAgIGNvbnN0IHllYXJEYXRhID0gYXJtc0RhdGFbY291bnRyeV0/Llt5ZWFyXTtcclxuICAgICAgICAgIGlmICh5ZWFyRGF0YSkge1xyXG4gICAgICAgICAgICBjb25zdCB0b3RhbFF1YW50aXR5ID0gT2JqZWN0LnZhbHVlcyh5ZWFyRGF0YSkucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyArIGN1cnIucXVhbnRpdHksIDApO1xyXG4gICAgICAgICAgICByZXR1cm4gdG90YWxRdWFudGl0eSA+IDAgPyBsb2dDb2xvclNjYWxlKHRvdGFsUXVhbnRpdHkpIDogJyNjY2MnO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuICcjY2NjJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgcXVhbnRpdHkgPSBhcm1zRGF0YVtjb3VudHJ5XT8uW3llYXJdPy5bd2VhcG9uVHlwZV0/LnF1YW50aXR5IHx8IDA7XHJcbiAgICAgICAgICByZXR1cm4gcXVhbnRpdHkgPiAwID8gbG9nQ29sb3JTY2FsZShxdWFudGl0eSkgOiAnI2NjYyc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICAuYXR0cignc3Ryb2tlJywgJyMzMzMnKVxyXG4gICAgICAub24oJ21vdXNlZW50ZXInLCAoZXZlbnQsIGQpID0+IHtcclxuICAgICAgICBjb25zdCBjb3VudHJ5ID0gZC5wcm9wZXJ0aWVzLm5hbWU7XHJcblxyXG4gICAgICAgIGxldCBjb250ZW50ID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHdlYXBvblR5cGUgPT09IFwiQWxsXCIpIHtcclxuICAgICAgICAgIGNvbnN0IHllYXJEYXRhID0gYXJtc0RhdGFbY291bnRyeV0/Llt5ZWFyXTtcclxuICAgICAgICAgIGlmICgheWVhckRhdGEpIHJldHVybjsgLy8gTm8gZGF0YSB0byBzaG93XHJcblxyXG4gICAgICAgICAgY29udGVudCA9IGhhbmRsZVRvb2x0aXBDb250ZW50KGNvdW50cnksIHllYXIsIHdlYXBvblR5cGUsIHllYXJEYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgZGF0YSA9IGFybXNEYXRhW2NvdW50cnldPy5beWVhcl0/Llt3ZWFwb25UeXBlXTtcclxuICAgICAgICAgIGlmICghZGF0YSkgcmV0dXJuOyAvLyBObyBkYXRhIHRvIHNob3dcclxuXHJcbiAgICAgICAgICBjb250ZW50ID0gaGFuZGxlVG9vbHRpcENvbnRlbnQoY291bnRyeSwgeWVhciwgd2VhcG9uVHlwZSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBzdmdSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCBvZmZzZXRYID0gZXZlbnQuY2xpZW50WCAtIGNvbnRhaW5lci5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IG9mZnNldFkgPSBldmVudC5jbGllbnRZIC0gY29udGFpbmVyLnRvcDtcclxuXHJcbiAgICAgICAgc2V0VG9vbHRpcCh7XHJcbiAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgICAgeDogb2Zmc2V0WCArIDEwLFxyXG4gICAgICAgICAgeTogb2Zmc2V0WSAtIDEwLFxyXG4gICAgICAgICAgY29udGVudDogY29udGVudFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KVxyXG4gICAgICAub24oJ21vdXNlbW92ZScsIChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHN2Z1JlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IG9mZnNldFggPSBldmVudC5jbGllbnRYIC0gY29udGFpbmVyLmxlZnQ7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IGV2ZW50LmNsaWVudFkgLSBjb250YWluZXIudG9wO1xyXG5cclxuICAgICAgICBzZXRUb29sdGlwKHByZXYgPT4gKHtcclxuICAgICAgICAgIC4uLnByZXYsXHJcbiAgICAgICAgICB4OiBvZmZzZXRYICsgMTAsXHJcbiAgICAgICAgICB5OiBvZmZzZXRZIC0gMTAsXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgfSlcclxuICAgICAgLm9uKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xyXG4gICAgICAgIHNldFRvb2x0aXAoeyB2aXNpYmxlOiBmYWxzZSwgeDogMCwgeTogMCwgY29udGVudDogbnVsbCB9KTtcclxuICAgICAgfSlcclxuICAgICAgLm9uKCdjbGljaycsIChldmVudCwgZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvdW50cnkgPSBkLnByb3BlcnRpZXMubmFtZTtcclxuICAgICAgICBpZiAod2VhcG9uVHlwZSA9PT0gXCJBbGxcIikge1xyXG4gICAgICAgICAgY29uc3QgeWVhckRhdGEgPSBhcm1zRGF0YVtjb3VudHJ5XT8uW3llYXJdO1xyXG4gICAgICAgICAgaWYgKCF5ZWFyRGF0YSkgcmV0dXJuOyAvLyBObyBkYXRhIHRvIHNob3dcclxuXHJcbiAgICAgICAgICBzZXRNb2RhbERhdGEoe1xyXG4gICAgICAgICAgICBjb3VudHJ5LFxyXG4gICAgICAgICAgICB5ZWFyLFxyXG4gICAgICAgICAgICBkYXRhOiB5ZWFyRGF0YVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IGRhdGEgPSBhcm1zRGF0YVtjb3VudHJ5XT8uW3llYXJdPy5bd2VhcG9uVHlwZV07XHJcbiAgICAgICAgICBpZiAoIWRhdGEpIHJldHVybjsgLy8gTm8gZGF0YSB0byBzaG93XHJcblxyXG4gICAgICAgICAgc2V0TW9kYWxEYXRhKHtcclxuICAgICAgICAgICAgY291bnRyeSxcclxuICAgICAgICAgICAgeWVhcixcclxuICAgICAgICAgICAgd2VhcG9uVHlwZSxcclxuICAgICAgICAgICAgZGF0YVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyBEcmF3IENpcmNsZXMgT3ZlciBFYWNoIENvdW50cnkgQmFzZWQgb24gUXVhbnRpdHlcclxuICAgIGcuc2VsZWN0QWxsKCdjaXJjbGUnKVxyXG4gICAgICAuZGF0YShjb3VudHJpZXMpXHJcbiAgICAgIC5lbnRlcigpXHJcbiAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXHJcbiAgICAgIC5hdHRyKCdjeCcsIGQgPT4gcHJvamVjdGlvbihkMy5nZW9DZW50cm9pZChkKSlbMF0pXHJcbiAgICAgIC5hdHRyKCdjeScsIGQgPT4gcHJvamVjdGlvbihkMy5nZW9DZW50cm9pZChkKSlbMV0pXHJcbiAgICAgIC5hdHRyKCdyJywgZCA9PiB7XHJcbiAgICAgICAgY29uc3QgY291bnRyeSA9IGQucHJvcGVydGllcy5uYW1lO1xyXG4gICAgICAgIGlmICh3ZWFwb25UeXBlID09PSBcIkFsbFwiKSB7XHJcbiAgICAgICAgICBjb25zdCB5ZWFyRGF0YSA9IGFybXNEYXRhW2NvdW50cnldPy5beWVhcl07XHJcbiAgICAgICAgICBpZiAoeWVhckRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNpemVTY2FsZShPYmplY3QudmFsdWVzKHllYXJEYXRhKS5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3Vyci5xdWFudGl0eSwgMCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IHF1YW50aXR5ID0gYXJtc0RhdGFbY291bnRyeV0/Llt5ZWFyXT8uW3dlYXBvblR5cGVdPy5xdWFudGl0eSB8fCAwO1xyXG4gICAgICAgICAgcmV0dXJuIHF1YW50aXR5ID4gMCA/IHNpemVTY2FsZShxdWFudGl0eSkgOiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoJ2ZpbGwnLCAncmdiYSgyNTUsIDY5LCAwLCAwLjUpJykgLy8gU2VtaS10cmFuc3BhcmVudCBvcmFuZ2UgY29sb3IgZm9yIHRoZSBjaXJjbGVzXHJcbiAgICAgIC5hdHRyKCdzdHJva2UnLCAnb3JhbmdlJylcclxuICAgICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDAuNSlcclxuICAgICAgLm9uKCdtb3VzZWVudGVyJywgKGV2ZW50LCBkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY291bnRyeSA9IGQucHJvcGVydGllcy5uYW1lO1xyXG5cclxuICAgICAgICBsZXQgY29udGVudCA9IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh3ZWFwb25UeXBlID09PSBcIkFsbFwiKSB7XHJcbiAgICAgICAgICBjb25zdCB5ZWFyRGF0YSA9IGFybXNEYXRhW2NvdW50cnldPy5beWVhcl07XHJcbiAgICAgICAgICBpZiAoIXllYXJEYXRhKSByZXR1cm47IC8vIE5vIGRhdGEgdG8gc2hvd1xyXG5cclxuICAgICAgICAgIGNvbnRlbnQgPSBoYW5kbGVUb29sdGlwQ29udGVudChjb3VudHJ5LCB5ZWFyLCB3ZWFwb25UeXBlLCB5ZWFyRGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IGRhdGEgPSBhcm1zRGF0YVtjb3VudHJ5XT8uW3llYXJdPy5bd2VhcG9uVHlwZV07XHJcbiAgICAgICAgICBpZiAoIWRhdGEpIHJldHVybjsgLy8gTm8gZGF0YSB0byBzaG93XHJcblxyXG4gICAgICAgICAgY29udGVudCA9IGhhbmRsZVRvb2x0aXBDb250ZW50KGNvdW50cnksIHllYXIsIHdlYXBvblR5cGUsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVXNlIGQzLnBvaW50ZXIgdG8gZ2V0IG1vdXNlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBTVkdcclxuXHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gc3ZnUmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0WCA9IGV2ZW50LmNsaWVudFggLSBjb250YWluZXIubGVmdDtcclxuICAgICAgICBjb25zdCBvZmZzZXRZID0gZXZlbnQuY2xpZW50WSAtIGNvbnRhaW5lci50b3A7XHJcbiAgICAgICAgc2V0VG9vbHRpcCh7XHJcbiAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgICAgeDogb2Zmc2V0WCArIDEwLFxyXG4gICAgICAgICAgeTogb2Zmc2V0WSAtIDEwLFxyXG4gICAgICAgICAgY29udGVudDogY29udGVudFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KVxyXG4gICAgICAub24oJ21vdXNlbW92ZScsIChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHN2Z1JlZi5jdXJyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IG9mZnNldFggPSBldmVudC5jbGllbnRYIC0gY29udGFpbmVyLmxlZnQ7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IGV2ZW50LmNsaWVudFkgLSBjb250YWluZXIudG9wO1xyXG4gICAgICAgIHNldFRvb2x0aXAocHJldiA9PiAoe1xyXG4gICAgICAgICAgLi4ucHJldixcclxuICAgICAgICAgIHg6IG9mZnNldFggKyAxMCxcclxuICAgICAgICAgIHk6IG9mZnNldFkgLSAxMCxcclxuICAgICAgICB9KSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5vbignbW91c2VsZWF2ZScsICgpID0+IHtcclxuICAgICAgICBzZXRUb29sdGlwKHsgdmlzaWJsZTogZmFsc2UsIHg6IDAsIHk6IDAsIGNvbnRlbnQ6IG51bGwgfSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5vbignY2xpY2snLCAoZXZlbnQsIGQpID0+IHtcclxuICAgICAgICBjb25zdCBjb3VudHJ5ID0gZC5wcm9wZXJ0aWVzLm5hbWU7XHJcbiAgICAgICAgaWYgKHdlYXBvblR5cGUgPT09IFwiQWxsXCIpIHtcclxuICAgICAgICAgIGNvbnN0IHllYXJEYXRhID0gYXJtc0RhdGFbY291bnRyeV0/Llt5ZWFyXTtcclxuICAgICAgICAgIGlmICgheWVhckRhdGEpIHJldHVybjsgLy8gTm8gZGF0YSB0byBzaG93XHJcblxyXG4gICAgICAgICAgc2V0TW9kYWxEYXRhKHtcclxuICAgICAgICAgICAgY291bnRyeSxcclxuICAgICAgICAgICAgeWVhcixcclxuICAgICAgICAgICAgZGF0YTogeWVhckRhdGFcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zdCBkYXRhID0gYXJtc0RhdGFbY291bnRyeV0/Llt5ZWFyXT8uW3dlYXBvblR5cGVdO1xyXG4gICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm47IC8vIE5vIGRhdGEgdG8gc2hvd1xyXG5cclxuICAgICAgICAgIHNldE1vZGFsRGF0YSh7XHJcbiAgICAgICAgICAgIGNvdW50cnksXHJcbiAgICAgICAgICAgIHllYXIsXHJcbiAgICAgICAgICAgIHdlYXBvblR5cGUsXHJcbiAgICAgICAgICAgIGRhdGFcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIEZ1bmN0aW9uIHRvIENsb3NlIE1vZGFsXHJcbiAgICovXHJcbiAgY29uc3QgY2xvc2VNb2RhbCA9ICgpID0+IHtcclxuICAgIHNldE1vZGFsRGF0YShudWxsKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBzdHlsZT17eyBwb3NpdGlvbjogJ3JlbGF0aXZlJywgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnYXV0byd9fT5cclxuICAgICAgPGgzIHN0eWxlPXt7XHJcbiAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxyXG4gICAgICAgICAgZm9udFNpemU6ICcyNHB4JyxcclxuICAgICAgICAgIGNvbG9yOiAnI2U3NGMzYycsXHJcbiAgICAgICAgICBwYWRkaW5nVG9wOiAnMjBweCcsXHJcbiAgICAgICAgfX0+XHJcbiAgICAgICAgICBBcm1zIEltcG9ydHMgYnkgV2VhcG9uIFR5cGUge3NlbGVjdGVkWWVhcn1cclxuICAgICAgICA8L2gzPlxyXG5cclxuICAgICAge2xvYWRpbmcgJiYgPGRpdiBjbGFzc05hbWU9XCJsb2FkaW5nXCI+TG9hZGluZyBkYXRhLi4uPC9kaXY+fVxyXG4gICAgICB7ZXJyb3IgJiYgPGRpdiBjbGFzc05hbWU9XCJlcnJvclwiIHN0eWxlPXt7IGNvbG9yOiAncmVkJyB9fT57ZXJyb3J9PC9kaXY+fVxyXG5cclxuICAgICAgeyFsb2FkaW5nICYmICFlcnJvciAmJiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIHR5cGU9XCJyYW5nZVwiXHJcbiAgICAgICAgICAgICAgaWQ9XCJ5ZWFyU2xpZGVyXCJcclxuICAgICAgICAgICAgICBtaW49e21pblllYXJ9IC8vIEZpeGVkIGVhcmxpZXN0IHllYXJcclxuICAgICAgICAgICAgICBtYXg9e21heFllYXJ9IC8vIEZpeGVkIGxhdGVzdCB5ZWFyXHJcbiAgICAgICAgICAgICAgc3RlcD17MX0gLy8gRW5zdXJlIG9ubHkgd2hvbGUgbnVtYmVyc1xyXG4gICAgICAgICAgICAgIHZhbHVlPXtzZWxlY3RlZFllYXJ9IC8vIFVzZSBzZWxlY3RlZFllYXIgZGlyZWN0bHlcclxuICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldFNlbGVjdGVkWWVhcihwYXJzZUludChlLnRhcmdldC52YWx1ZSwgMTApKX0gLy8gRW5zdXJlIGludGVnZXJcclxuICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6ICc4MCUnLFxyXG4gICAgICAgICAgICAgICAgYXBwZWFyYW5jZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnOHB4JyxcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2dyYXknLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNXB4JyxcclxuICAgICAgICAgICAgICAgIG91dGxpbmU6ICdub25lJyxcclxuICAgICAgICAgICAgICAgIG1hcmdpbjogJzIwcHggYXV0byAxMHB4JyxcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXHJcbiAgICAgICAgICAgICAgICBhY2NlbnRDb2xvcjogJyNlNzRjM2MnLFxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFzZWxlY3RlZFdlYXBvblR5cGV9IC8vIERpc2FibGUgdW50aWwgd2VhcG9uIHR5cGUgaXMgc2VsZWN0ZWRcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgIHsvKiBXZWFwb24gVHlwZSBTZWxlY3Rpb24gKi99XHJcblxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7d2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnMTAwJScsIGJvcmRlcjogJzNweCBzb2xpZCAjZTc0YzNjJywgYm9yZGVyUmFkaXVzOiAnOHB4J319PlxyXG4gICAgICAgICAgICA8c3ZnIHJlZj17c3ZnUmVmfT48L3N2Zz5cclxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e1xyXG4gICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgICAgICAgIGhlaWdodDogJzgwcHgnLFxyXG4gICAgICAgICAgICAgIHdpZHRoOiAnMjAwcHgnLFxyXG4gICAgICAgICAgICAgIHRvcDogJzEwMHB4JyxcclxuICAgICAgICAgICAgICBsZWZ0OiAnMjBweCcsXHJcbiAgICAgICAgICAgICAgYmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC45KScsXHJcbiAgICAgICAgICAgICAgcGFkZGluZzogJzEwcHgnLFxyXG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzhweCcsXHJcbiAgICAgICAgICAgICAgZm9udFNpemU6ICcxNnB4JyxcclxuICAgICAgICAgICAgICBjb2xvcjogJyNlMGUwZTAnLFxyXG4gICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JywgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXHJcbiAgICAgICAgICAgIH19PlxyXG4gICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwid2VhcG9uVHlwZVNlbGVjdFwiIHN0eWxlPXt7IGRpc3BsYXk6ICdibG9jaycsIG1hcmdpbkJvdHRvbTogJzEwcHgnLH19PlNlbGVjdCBXZWFwb24gVHlwZTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgPHNlbGVjdFxyXG4gICAgICAgICAgICAgICAgaWQ9XCJ3ZWFwb25UeXBlU2VsZWN0XCJcclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHNldFNlbGVjdGVkV2VhcG9uVHlwZShlLnRhcmdldC52YWx1ZSl9XHJcbiAgICAgICAgICAgICAgICB2YWx1ZT17c2VsZWN0ZWRXZWFwb25UeXBlfVxyXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIlNlbGVjdCBXZWFwb24gVHlwZVwiXHJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiAnNnB4IDEwcHgnLFxyXG4gICAgICAgICAgICAgICAgICB3aWR0aDogJzE4MHB4JyxcclxuICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZTBlMGUwJyxcclxuICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmxhY2snLFxyXG4gICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc4cHgnLFxyXG4gICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE2cHgnLFxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7d2VhcG9uVHlwZXMubWFwKHR5cGUgPT4gKFxyXG4gICAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17dHlwZX0gdmFsdWU9e3R5cGV9Pnt0eXBlfTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIDxkaXYgc3R5bGU9e3tcclxuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLCAvLyBDaGFuZ2UgdG8gYWJzb2x1dGUgdG8gcG9zaXRpb24gaXQgd2l0aGluIHRoZSBtYXAgY29udGFpbmVyXHJcbiAgICAgICAgICBib3R0b206ICcxMHB4JywgLy8gQWRqdXN0IGFzIG5lZWRlZCB0byBjcmVhdGUgc3BhY2UgZnJvbSB0aGUgYm90dG9tIGJvcmRlclxyXG4gICAgICAgICAgbGVmdDogJzEwcHgnLFxyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnJyxcclxuICAgICAgICAgIHdpZHRoOiAnMjI1cHgnLFxyXG4gICAgICAgICAgaGVpZ2h0OiAnMjAwcHgnLFxyXG4gICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxyXG4gICAgICAgIH19PlxyXG4gICAgICAgICAgPHN2ZyByZWY9e3BpZUNoYXJ0UmVmfSBzdHlsZT17eyB3aWR0aDogJzEwMCUnLCBoZWlnaHQ6ICcxMDAlJ319Pjwvc3ZnPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB7LyogVG9vbHRpcCAqL31cclxuICAgICAgICAgIHt0b29sdGlwLnZpc2libGUgJiYgKFxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgICAgICAgICAgICAgdG9wOiB0b29sdGlwLnksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0b29sdGlwLngsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuOCknLFxyXG4gICAgICAgICAgICAgICAgY29sb3I6ICcjZTBlMGUwJyxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcxMnB4JyxcclxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzhweCcsXHJcbiAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICcwIDRweCAxMnB4IHJnYmEoMCwgMCwgMCwgMC4zKScsXHJcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE2cHgnLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMC4zcyBlYXNlJyxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IHRvb2x0aXAudmlzaWJsZSA/IDEgOiAwLFxyXG4gICAgICAgICAgICAgICAgekluZGV4OiAxMCxcclxuICAgICAgICAgICAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgIGhlaWdodDogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7dG9vbHRpcC5jb250ZW50fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICl9XHJcblxyXG4gICAgICAgICAgey8qIE1vZGFsICovfVxyXG4gICAgICAgICAge21vZGFsRGF0YSAmJiAoXHJcbiAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtb2RhbFwiXHJcbiAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxyXG4gICAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwdncnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwdmgnLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjUpJyxcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gICAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gICAgICAgICAgICAgICAgekluZGV4OiAxMDAwLFxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgb25DbGljaz17Y2xvc2VNb2RhbH1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmZmYnLFxyXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMjBweCcsXHJcbiAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzhweCcsXHJcbiAgICAgICAgICAgICAgICAgIG1heFdpZHRoOiAnNjAwcHgnLFxyXG4gICAgICAgICAgICAgICAgICB3aWR0aDogJzkwJScsXHJcbiAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogJzgwJScsXHJcbiAgICAgICAgICAgICAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoZSkgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX0gLy8gUHJldmVudCBjbGljayBmcm9tIGNsb3NpbmcgbW9kYWwgd2hlbiBjbGlja2luZyBpbnNpZGVcclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2Nsb3NlTW9kYWx9XHJcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAnMTBweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6ICcxMHB4JyxcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxOHB4JyxcclxuICAgICAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJ2JsYWNrJywgLy8gRW5zdXJlIGNsb3NlIGJ1dHRvbiB0ZXh0IGlzIGJsYWNrXHJcbiAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJDbG9zZSBtb2RhbFwiXHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICZ0aW1lcztcclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8cCBzdHlsZT17eyBjb2xvcjogJ2JsYWNrJyB9fT48c3Ryb25nPkNvdW50cnk6PC9zdHJvbmc+IHttb2RhbERhdGEuY291bnRyeX08L3A+XHJcbiAgICAgICAgICAgICAgICA8cCBzdHlsZT17eyBjb2xvcjogJ2JsYWNrJyB9fT48c3Ryb25nPlllYXI6PC9zdHJvbmc+IHttb2RhbERhdGEueWVhcn08L3A+XHJcbiAgICAgICAgICAgICAgICB7c2VsZWN0ZWRXZWFwb25UeXBlID09PSBcIkFsbFwiID8gKFxyXG4gICAgICAgICAgICAgICAgICA8PiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScsIGJvcmRlckNvbGxhcHNlOiAnY29sbGFwc2UnLCBjb2xvcjogJ2JsYWNrJyB9fT5cclxuICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT17eyBib3JkZXI6ICcxcHggc29saWQgI2RkZCcsIHBhZGRpbmc6ICc4cHgnLCBjb2xvcjogJ2JsYWNrJyB9fT5XZWFwb24gVHlwZTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHN0eWxlPXt7IGJvcmRlcjogJzFweCBzb2xpZCAjZGRkJywgcGFkZGluZzogJzhweCcsIGNvbG9yOiAnYmxhY2snIH19PlN1cHBsaWVyPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc3R5bGU9e3sgYm9yZGVyOiAnMXB4IHNvbGlkICNkZGQnLCBwYWRkaW5nOiAnOHB4JywgY29sb3I6ICdibGFjaycgfX0+UXVhbnRpdHk8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT17eyBib3JkZXI6ICcxcHggc29saWQgI2RkZCcsIHBhZGRpbmc6ICc4cHgnLCBjb2xvcjogJ2JsYWNrJyB9fT5TdGF0dXM8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAgICAgICAgICAgICAge09iamVjdC5lbnRyaWVzKG1vZGFsRGF0YS5kYXRhKS5tYXAoKFt3dCwgZGF0YV0pID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIga2V5PXt3dH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9e3sgYm9yZGVyOiAnMXB4IHNvbGlkICNkZGQnLCBwYWRkaW5nOiAnOHB4JywgY29sb3I6ICdibGFjaycgfX0+e3d0fTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9e3sgYm9yZGVyOiAnMXB4IHNvbGlkICNkZGQnLCBwYWRkaW5nOiAnOHB4JywgY29sb3I6ICdibGFjaycgfX0+e2RhdGEuc3VwcGxpZXJzfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9e3sgYm9yZGVyOiAnMXB4IHNvbGlkICNkZGQnLCBwYWRkaW5nOiAnOHB4JywgY29sb3I6ICdibGFjaycgfX0+e2RhdGEucXVhbnRpdHl9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT17eyBib3JkZXI6ICcxcHggc29saWQgI2RkZCcsIHBhZGRpbmc6ICc4cHgnLCBjb2xvcjogJ2JsYWNrJyB9fT57ZGF0YS5zdGF0dXN9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICAgICAgICAgICAgPC8+XHJcbiAgICAgICAgICAgICAgICApIDogKFxyXG4gICAgICAgICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPXt7IGNvbG9yOiAnYmxhY2snIH19PjxzdHJvbmc+V2VhcG9uIFR5cGU6PC9zdHJvbmc+IHttb2RhbERhdGEud2VhcG9uVHlwZX08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9e3sgY29sb3I6ICdibGFjaycgfX0+PHN0cm9uZz5TdXBwbGllcjo8L3N0cm9uZz4ge21vZGFsRGF0YS5kYXRhLnN1cHBsaWVyc308L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9e3sgY29sb3I6ICdibGFjaycgfX0+PHN0cm9uZz5RdWFudGl0eTo8L3N0cm9uZz4ge21vZGFsRGF0YS5kYXRhLnF1YW50aXR5fSB1bml0czwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8cCBzdHlsZT17eyBjb2xvcjogJ2JsYWNrJyB9fT48c3Ryb25nPlN0YXR1czo8L3N0cm9uZz4ge21vZGFsRGF0YS5kYXRhLnN0YXR1c308L3A+XHJcbiAgICAgICAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvPlxyXG4gICAgICApfVxyXG5cclxuICAgICAgey8qIEVycm9yIEhhbmRsaW5nOiBJZiBubyBkYXRhIGZvciBkZWZhdWx0IHNlbGVjdGlvbnMgKi99XHJcbiAgICAgIHtlcnJvciAmJiAhbG9hZGluZyAmJiAoXHJcbiAgICAgICAgPGRpdiBzdHlsZT17eyB0ZXh0QWxpZ246ICdjZW50ZXInLCBtYXJnaW5Ub3A6ICc1MHB4JywgY29sb3I6ICdyZWQnIH19PlxyXG4gICAgICAgICAgPHA+e2Vycm9yfTwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKX1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDaG9yb3BsZXRoTWFwO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlUmVmLCB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XHJcblxyXG5jb25zdCBab29tYWJsZUNpcmNsZVBhY2tpbmcgPSAoKSA9PiB7XHJcbiAgY29uc3Qgc3ZnUmVmID0gdXNlUmVmKCk7XHJcbiAgY29uc3QgW3Rvb2x0aXAsIHNldFRvb2x0aXBdID0gdXNlU3RhdGUoeyB2aXNpYmxlOiBmYWxzZSwgeDogMCwgeTogMCwgY29udGVudDogbnVsbCB9KTtcclxuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZShudWxsKTtcclxuICBjb25zdCBbc2VsZWN0ZWRZZWFySW5kZXgsIHNldFNlbGVjdGVkWWVhckluZGV4XSA9IHVzZVN0YXRlKDApO1xyXG4gIGNvbnN0IFthdmFpbGFibGVZZWFycywgc2V0QXZhaWxhYmxlWWVhcnNdID0gdXNlU3RhdGUoW10pO1xyXG4gIGNvbnN0IFtlcnJvciwgc2V0RXJyb3JdID0gdXNlU3RhdGUobnVsbCk7XHJcblxyXG4gIGNvbnN0IHdpZHRoID0gMTAwMDtcclxuICBjb25zdCBoZWlnaHQgPSA2MDA7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBjb25zdCBmZXRjaERhdGEgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgICAgICAgICcvZGF0YS9wcm9jZXNzZWQvcHJvY2Vzc2VkX3dlYXBvbl90cmFuc2Zlcl9ieV9jYXRlZ29yeS5qc29uJ1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBTdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBqc29uRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICBzZXREYXRhKGpzb25EYXRhKTtcclxuXHJcbiAgICAgICAgLy8gRXh0cmFjdCB1bmlxdWUgeWVhcnMgYW5kIHNldCBhdmFpbGFibGVZZWFycyBzdGF0ZVxyXG4gICAgICAgIGNvbnN0IHllYXJzID0gQXJyYXkuZnJvbShcclxuICAgICAgICAgIG5ldyBTZXQoXHJcbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXMoanNvbkRhdGEuRXhwb3J0cykuZmxhdE1hcCgoY291bnRyeURhdGEpID0+XHJcbiAgICAgICAgICAgICAgY291bnRyeURhdGEuZmxhdE1hcCgoY2F0ZWdvcnkpID0+IE9iamVjdC5rZXlzKGNhdGVnb3J5KS5maWx0ZXIoa2V5ID0+ICFpc05hTihrZXkpKSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICkuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xyXG4gICAgICAgIHNldEF2YWlsYWJsZVllYXJzKHllYXJzKTsgLy8gRW5zdXJlIGF2YWlsYWJsZSB5ZWFycyBhcmUgc2V0IGZvciB0aGUgc2xpZGVyXHJcbiAgICAgICAgc2V0U2VsZWN0ZWRZZWFySW5kZXgoMCk7ICAvLyBSZXNldCBzZWxlY3RlZFllYXJJbmRleCB0byAwXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gU2V0IGRlZmF1bHQgeWVhciB0byB0aGUgbGF0ZXN0IHllYXJcclxuICAgICAgICBjb25zdCBkZWZhdWx0WWVhckluZGV4ID0geWVhcnMubGVuZ3RoIC0gMTsgLy8gQXNzdW1pbmcgdGhlIGxhdGVzdCB5ZWFyXHJcbiAgICAgICAgc2V0U2VsZWN0ZWRZZWFySW5kZXgoZGVmYXVsdFllYXJJbmRleCk7XHJcblxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIGRhdGE6JywgZXJyb3IpO1xyXG4gICAgICAgIHNldEVycm9yKCdGYWlsZWQgdG8gbG9hZCBkYXRhLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgZmV0Y2hEYXRhKCk7XHJcbiAgfSwgW10pO1xyXG5cclxuICAvLyBDb2xvciBzY2FsZSBmb3IgY291bnRyaWVzXHJcbiAgY29uc3QgY291bnRyeUNvbG9yU2NhbGUgPSB1c2VNZW1vKCgpID0+IHtcclxuICByZXR1cm4gZGF0YVxyXG4gICAgPyBkM1xyXG4gICAgICAgIC5zY2FsZU9yZGluYWwoKVxyXG4gICAgICAgIC5kb21haW4oWydVbml0ZWQgU3RhdGVzJywgJ1J1c3NpYScsICdDaGluYSddKVxyXG4gICAgICAgIC5yYW5nZShbJyM0NjgyQjQnLCAnI0RDMTQzQycsICcjRkZEQjU4J10pXHJcbiAgICAgICAgLnVua25vd24oJyNDQ0NDQ0MnKSAvLyBGYWxsYmFjayBjb2xvciBmb3Igb3RoZXIgY291bnRyaWVzXHJcbiAgICA6IG51bGw7XHJcbn0sIFtkYXRhXSk7XHJcblxyXG4gIC8vIFNlcGFyYXRlIGNvbG9yIHNjYWxlIGZvciB3ZWFwb24gY2F0ZWdvcmllc1xyXG4gIGNvbnN0IGNhdGVnb3J5Q29sb3JTY2FsZSA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgY29uc3QgYWxsQ2F0ZWdvcmllcyA9IGRhdGFcclxuICAgICAgPyBPYmplY3QudmFsdWVzKGRhdGEuRXhwb3J0cykuZmxhdE1hcCgoY291bnRyeURhdGEpID0+XHJcbiAgICAgICAgICBjb3VudHJ5RGF0YS5tYXAoKGNhdGVnb3J5KSA9PiBjYXRlZ29yeVsnVW5uYW1lZDogMSddKVxyXG4gICAgICAgIClcclxuICAgICAgOiBbXTtcclxuICAgIHJldHVybiBkMy5zY2FsZU9yZGluYWwoZDMuc2NoZW1lUGFpcmVkKS5kb21haW4oYWxsQ2F0ZWdvcmllcyk7XHJcbiAgfSwgW2RhdGFdKTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGlmICghZGF0YSB8fCBhdmFpbGFibGVZZWFycy5sZW5ndGggPT09IDAgfHwgIWNvdW50cnlDb2xvclNjYWxlIHx8ICFjYXRlZ29yeUNvbG9yU2NhbGUpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBzZWxlY3RlZFllYXIgPSBhdmFpbGFibGVZZWFyc1tzZWxlY3RlZFllYXJJbmRleF07XHJcblxyXG4gICAgY29uc3QgeWVhckRhdGEgPSB7XHJcbiAgICAgIG5hbWU6ICdXZWFwb24gVHJhbnNmZXJzIGJ5IENvdW50cnknLFxyXG4gICAgICBjaGlsZHJlbjogT2JqZWN0LmVudHJpZXMoZGF0YS5FeHBvcnRzKS5tYXAoKFtjb3VudHJ5LCBjYXRlZ29yaWVzXSkgPT4gKHtcclxuICAgICAgICBuYW1lOiBjb3VudHJ5LFxyXG4gICAgICAgIGNoaWxkcmVuOiBjYXRlZ29yaWVzXHJcbiAgICAgICAgICAubWFwKChjYXRlZ29yeSkgPT4gKHtcclxuICAgICAgICAgICAgbmFtZTogY2F0ZWdvcnlbJ1VubmFtZWQ6IDEnXSxcclxuICAgICAgICAgICAgdmFsdWU6IGNhdGVnb3J5W3NlbGVjdGVkWWVhcl0gfHwgMCxcclxuICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgLmZpbHRlcigoY2F0ZWdvcnkpID0+IGNhdGVnb3J5LnZhbHVlID4gMCksXHJcbiAgICAgIH0pKS5maWx0ZXIoY291bnRyeSA9PiBjb3VudHJ5LmNoaWxkcmVuLmxlbmd0aCA+IDApLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBzdmcgPSBkM1xyXG4gICAgICAuc2VsZWN0KHN2Z1JlZi5jdXJyZW50KVxyXG4gICAgICAuYXR0cigndmlld0JveCcsIGAwIDAgJHt3aWR0aH0gJHtoZWlnaHR9YClcclxuICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kJywgJ3RyYW5zcGFyZW50JylcclxuICAgICAgLnN0eWxlKCdjdXJzb3InLCAncG9pbnRlcicpO1xyXG5cclxuICAgIHN2Zy5zZWxlY3RBbGwoJyonKS5yZW1vdmUoKTtcclxuXHJcbiAgICBjb25zdCByb290ID0gZDNcclxuICAgICAgLmhpZXJhcmNoeSh5ZWFyRGF0YSlcclxuICAgICAgLnN1bSgoZCkgPT4gZC52YWx1ZSB8fCAwKVxyXG4gICAgICAuc29ydCgoYSwgYikgPT4gYi52YWx1ZSAtIGEudmFsdWUpO1xyXG5cclxuICAgIGNvbnN0IHBhY2sgPSBkMy5wYWNrKCkuc2l6ZShbd2lkdGggLSAxMCwgaGVpZ2h0IC0gMTBdKS5wYWRkaW5nKDEwKTtcclxuICAgIHBhY2socm9vdCk7XHJcblxyXG4gICAgbGV0IGZvY3VzID0gcm9vdDtcclxuICAgIGxldCB2aWV3O1xyXG5cclxuICAgIGNvbnN0IHpvb21UbyA9ICh2KSA9PiB7XHJcbiAgICAgIGNvbnN0IGsgPSB3aWR0aCAvIHZbMl07XHJcbiAgICAgIHZpZXcgPSB2O1xyXG4gICAgICBub2RlLmF0dHIoXHJcbiAgICAgICAgJ3RyYW5zZm9ybScsXHJcbiAgICAgICAgKGQpID0+XHJcbiAgICAgICAgICBgdHJhbnNsYXRlKCR7KGQueCAtIHZbMF0pICogayArIHdpZHRoIC8gMn0sICR7XHJcbiAgICAgICAgICAgIChkLnkgLSB2WzFdKSAqIGsgKyBoZWlnaHQgLyAyXHJcbiAgICAgICAgICB9KWBcclxuICAgICAgKTtcclxuICAgICAgbm9kZS5zZWxlY3QoJ2NpcmNsZScpLmF0dHIoJ3InLCAoZCkgPT4gZC5yICogayk7XHJcbiAgICAgIG5vZGUuc2VsZWN0QWxsKCd0ZXh0JylcclxuICAgICAgICAuYXR0cignZm9udFNpemUnLCAoZCkgPT4gTWF0aC5tYXgoMTAsIChkLnIgKiBrKSAvIDQpKTtcclxuICAgIH07XHJcblxyXG4gICAgY29uc3Qgem9vbSA9IChldmVudCwgZCkgPT4ge1xyXG4gICAgICBpZiAoIWQpIHJldHVybjtcclxuICAgICAgZm9jdXMgPSBkO1xyXG4gICAgICBjb25zdCB0cmFuc2l0aW9uID0gc3ZnXHJcbiAgICAgICAgLnRyYW5zaXRpb24oKVxyXG4gICAgICAgIC5kdXJhdGlvbig3NTApXHJcbiAgICAgICAgLnR3ZWVuKCd6b29tJywgKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgaSA9IGQzLmludGVycG9sYXRlWm9vbSh2aWV3LCBbZm9jdXMueCwgZm9jdXMueSwgZm9jdXMuciAqIDIuNzVdKTtcclxuICAgICAgICAgIHJldHVybiAodCkgPT4gem9vbVRvKGkodCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBub2RlID0gc3ZnXHJcbiAgICAgIC5hcHBlbmQoJ2cnKVxyXG4gICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCAtMjApXCIpXHJcbiAgICAgIC5zZWxlY3RBbGwoJ2cnKVxyXG4gICAgICAuZGF0YShyb290LmRlc2NlbmRhbnRzKCkpXHJcbiAgICAgIC5qb2luKCdnJylcclxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIChkKSA9PiBgdHJhbnNsYXRlKCR7ZC54fSwke2QueX0pYCk7XHJcblxyXG4gICAgICBub2RlXHJcbiAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXHJcbiAgICAgIC5hdHRyKCdmaWxsJywgKGQpID0+IHtcclxuICAgICAgICBpZiAoZC5kZXB0aCA9PT0gMSkgcmV0dXJuIGNvdW50cnlDb2xvclNjYWxlKGQuZGF0YS5uYW1lKTtcclxuICAgICAgICBpZiAoZC5kZXB0aCA9PT0gMikgcmV0dXJuIGNhdGVnb3J5Q29sb3JTY2FsZShkLmRhdGEubmFtZSk7XHJcbiAgICAgICAgcmV0dXJuICcjY2NjJztcclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoJ2ZpbGwtb3BhY2l0eScsIChkKSA9PiAoZC5kZXB0aCA9PT0gMSB8fCBkLmRlcHRoID09PSAyID8gMSA6IDAuMCkpXHJcbiAgICAgIC5hdHRyKCdzdHJva2UnLCAnbm9uZScpXHJcbiAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAoZCkgPT4gKGQuZGVwdGggPT09IDEgfHwgZC5kZXB0aCA9PT0gMiA/IDIgOiAwLjIpKVxyXG4gICAgICAuYXR0cigncicsIChkKSA9PiBkLnIpXHJcbiAgICAgIC5zdHlsZSgndHJhbnNpdGlvbicsICdhbGwgMC4ycyBlYXNlJylcclxuICAgICAgLm9uKCdtb3VzZW92ZXInLCAoZXZlbnQsIGQpID0+IHtcclxuICAgICAgICBpZiAoIWQgfHwgIWQuZGF0YSB8fCBkLmRlcHRoID09PSAwKSByZXR1cm47ICAvLyBJZ25vcmUgYmFja2dyb3VuZCBob3ZlclxyXG4gICAgICBcclxuICAgICAgICBjb25zdCBjb3VudHJ5ID0gZC5kZXB0aCA9PT0gMSA/IGQuZGF0YS5uYW1lIDogZC5wYXJlbnQgJiYgZC5wYXJlbnQuZGF0YSA/IGQucGFyZW50LmRhdGEubmFtZSA6ICdOL0EnO1xyXG4gICAgICAgIGNvbnN0IHdlYXBvblR5cGUgPSBkLmRlcHRoID09PSAyID8gZC5kYXRhLm5hbWUgOiAnTi9BJzsgIC8vIFNob3cgd2VhcG9uIHR5cGUgb25seSB3aGVuIGRlcHRoID0gMlxyXG4gICAgICAgIGNvbnN0IHF1YW50aXR5ID0gZC52YWx1ZSA/IGQudmFsdWUudG9Mb2NhbGVTdHJpbmcoKSA6ICdOL0EnO1xyXG4gICAgICBcclxuICAgICAgICBzZXRUb29sdGlwKHtcclxuICAgICAgICAgIHZpc2libGU6IHRydWUsXHJcbiAgICAgICAgICB4OiBldmVudC5jbGllbnRYICsgMTAsXHJcbiAgICAgICAgICB5OiBldmVudC5jbGllbnRZIC0gMTAsXHJcbiAgICAgICAgICBjb250ZW50OiAoXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgPHN0cm9uZz57Y291bnRyeX08L3N0cm9uZz5cclxuICAgICAgICAgICAgICB7ZC5kZXB0aCA9PT0gMiAmJiA8YnIgLz59ICB7LyogQWRkIGEgbGluZSBicmVhayBvbmx5IGlmIGRlcHRoID0gMiAqL31cclxuICAgICAgICAgICAgICB7ZC5kZXB0aCA9PT0gMiAmJiBgVHlwZTogJHt3ZWFwb25UeXBlfWB9XHJcbiAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgUXVhbnRpdHk6IHtxdWFudGl0eX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pICAgICAgXHJcbiAgICAgIC5vbignbW91c2Vtb3ZlJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgc2V0VG9vbHRpcChwcmV2ID0+ICh7IC4uLnByZXYsIHg6IGV2ZW50LmNsaWVudFggKyAxMCwgeTogZXZlbnQuY2xpZW50WSAtIDEwIH0pKTtcclxuICAgICAgfSlcclxuICAgICAgLm9uKCdtb3VzZW91dCcsICgpID0+IHNldFRvb2x0aXAoeyB2aXNpYmxlOiBmYWxzZSwgeDogMCwgeTogMCwgY29udGVudDogbnVsbCB9KSlcclxuICAgICAgLm9uKCdjbGljaycsIChldmVudCwgZCkgPT4ge1xyXG4gICAgICAgIGlmIChmb2N1cyAhPT0gZCkge1xyXG4gICAgICAgICAgem9vbShldmVudCwgZCk7XHJcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgbm9kZVxyXG4gIC5hcHBlbmQoJ2cnKSAgLy8gQ3JlYXRlIGEgZ3JvdXAgdG8gaG9sZCBib3RoIHJlY3QgYW5kIHRleHRcclxuICAuZWFjaChmdW5jdGlvbihkKSB7XHJcbiAgICBjb25zdCBnID0gZDMuc2VsZWN0KHRoaXMpO1xyXG5cclxuICAgIC8vIE9ubHkgcHJvY2VlZCBpZiB0aGUgdGV4dCBpcyBub3QgZW1wdHlcclxuICAgIGNvbnN0IHRleHRDb250ZW50ID0gZC5kZXB0aCA9PT0gMiA/IGQuZGF0YS5uYW1lIDogJyc7XHJcblxyXG4gICAgaWYgKHRleHRDb250ZW50KSB7ICAvLyBDaGVjayBpZiB0ZXh0Q29udGVudCBpcyBub24tZW1wdHlcclxuICAgICAgLy8gQWRkIHRoZSB0ZXh0IGZpcnN0IHNvIHdlIGNhbiBnZXQgaXRzIHNpemVcclxuICAgICAgY29uc3QgdGV4dEVsZW1lbnQgPSBnLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgLmF0dHIoJ3RleHRBbmNob3InLCAnbWlkZGxlJylcclxuICAgICAgICAuYXR0cignZHknLCAnLjNlbScpXHJcbiAgICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcclxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnI2UwZTBlMCcpICAvLyBDaGFuZ2UgdGhlIHRleHQgZmlsbCB0byBlMGUwZTBcclxuICAgICAgICAuc3R5bGUoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKVxyXG4gICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgKGQpID0+IGAke01hdGgubWF4KDEyLCBkLnIgLyA0KX1weGApXHJcbiAgICAgICAgLnRleHQodGV4dENvbnRlbnQpO1xyXG5cclxuICAgICAgLy8gR2V0IHRoZSBib3VuZGluZyBib3ggb2YgdGhlIHRleHQgdG8gY2FsY3VsYXRlIHRoZSByZXF1aXJlZCByZWN0IHNpemVcclxuICAgICAgY29uc3QgYmJveCA9IHRleHRFbGVtZW50Lm5vZGUoKS5nZXRCQm94KCk7XHJcblxyXG4gICAgICAvLyBBZGQgYSBiYWNrZ3JvdW5kIHJlY3RhbmdsZSB3aXRoIHJvdW5kZWQgY29ybmVyc1xyXG4gICAgICBnLmluc2VydCgncmVjdCcsICd0ZXh0JykgIC8vIEluc2VydCB0aGUgcmVjdCBiZWxvdyB0aGUgdGV4dFxyXG4gICAgICAgIC5hdHRyKCd4JywgYmJveC54IC0gNSkgIC8vIEFkZCBzb21lIHBhZGRpbmcgYXJvdW5kIHRoZSB0ZXh0XHJcbiAgICAgICAgLmF0dHIoJ3knLCBiYm94LnkgLSA1KVxyXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGJib3gud2lkdGggKyAxMCkgIC8vIEFkZCBwYWRkaW5nIHRvIHRoZSB3aWR0aCBhbmQgaGVpZ2h0XHJcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGJib3guaGVpZ2h0ICsgMTApXHJcbiAgICAgICAgLmF0dHIoJ3J4JywgNSkgIC8vIFJvdW5kZWQgY29ybmVyc1xyXG4gICAgICAgIC5hdHRyKCdyeScsIDUpXHJcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgJ3JnYmEoMCwgMCwgMCwgMC43KScpICAvLyBPcGFxdWUgYmxhY2sgYmFja2dyb3VuZFxyXG4gICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJ25vbmUnKSAgLy8gTm8gYm9yZGVyXHJcbiAgICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJyk7ICAvLyBQcmV2ZW50IHRoZSByZWN0IGZyb20gaW50ZXJhY3Rpbmcgd2l0aCBtb3VzZSBldmVudHNcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgICB6b29tVG8oW3Jvb3QueCwgcm9vdC55LCByb290LnIgKiAyLjc1XSk7XHJcblxyXG4gICAgc3ZnLm9uKCdjbGljaycsICgpID0+IHpvb20obnVsbCwgcm9vdCkpO1xyXG5cclxuICAgIHJldHVybiAoKSA9PiB7XHJcblxyXG4gICAgfTtcclxuICB9LCBbZGF0YSwgc2VsZWN0ZWRZZWFySW5kZXgsIGF2YWlsYWJsZVllYXJzLCBjb3VudHJ5Q29sb3JTY2FsZSwgY2F0ZWdvcnlDb2xvclNjYWxlXSk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZVNsaWRlckNoYW5nZSA9IChlKSA9PiB7XHJcbiAgICBzZXRTZWxlY3RlZFllYXJJbmRleChOdW1iZXIoZS50YXJnZXQudmFsdWUpKTtcclxuICB9O1xyXG5cclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgc3R5bGU9e3sgcG9zaXRpb246ICdyZWxhdGl2ZScsIHdpZHRoOiAnMTAwJScsIGhlaWdodDogJ2F1dG8nfX0+XHJcbiAgICAgIDxoMyBzdHlsZT17e1xyXG4gICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcclxuICAgICAgICAgIGZvbnRTaXplOiAnMjRweCcsXHJcbiAgICAgICAgICBjb2xvcjogJyNlNzRjM2MnLFxyXG4gICAgICAgICAgcGFkZGluZ1RvcDogJzIwcHgnLFxyXG4gICAgICAgIH19PlxyXG4gICAgICAgICAgV2VhcG9uIFRyYW5zZmVycyBieSBDYXRlZ29yeSB7YXZhaWxhYmxlWWVhcnNbc2VsZWN0ZWRZZWFySW5kZXhdfVxyXG4gICAgICAgIDwvaDM+XHJcbiAgICAgIHtlcnJvciAmJiA8cCBzdHlsZT17e2NvbG9yOiAnI2U3NGMzYycsIHRleHRBbGlnbjogJ2NlbnRlcicsfX0+e2Vycm9yfTwvcD59XHJcbiAgICAgIHshZXJyb3IgJiYgIWRhdGEgJiYgPHAgc3R5bGU9e3t0ZXh0QWxpZ246ICdjZW50ZXInLCBjb2xvcjogJyNlMGUwZTAnLH19PkxvYWRpbmcuLi48L3A+fVxyXG4gICAgICB7IWVycm9yICYmIGRhdGEgJiYgYXZhaWxhYmxlWWVhcnMubGVuZ3RoID4gMCAmJiAoXHJcbiAgICAgICAgPD5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIHR5cGU9XCJyYW5nZVwiXHJcbiAgICAgICAgICAgICAgaWQ9XCJ5ZWFyLXNsaWRlclwiXHJcbiAgICAgICAgICAgICAgbWluPVwiMFwiXHJcbiAgICAgICAgICAgICAgbWF4PXthdmFpbGFibGVZZWFycy5sZW5ndGggLSAxfVxyXG4gICAgICAgICAgICAgIHZhbHVlPXtzZWxlY3RlZFllYXJJbmRleH1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlU2xpZGVyQ2hhbmdlfVxyXG4gICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogJzgwJScsXHJcbiAgICAgICAgICAgICAgICBhcHBlYXJhbmNlOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICc4cHgnLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnZ3JheScsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1cHgnLFxyXG4gICAgICAgICAgICAgICAgb3V0bGluZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAnMjBweCBhdXRvIDEwcHgnLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcclxuICAgICAgICAgICAgICAgIGFjY2VudENvbG9yOiAnI2U3NGMzYycsXHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgLz5cclxuXHJcbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7d2lkdGg6ICcxMDAlJywgYm9yZGVyOiAnM3B4IHNvbGlkICNlNzRjM2MnLCBib3JkZXJSYWRpdXM6ICc4cHgnfX0+XHJcbiAgICAgICAgICAgIDxzdmcgcmVmPXtzdmdSZWZ9Pjwvc3ZnPlxyXG4gICAgICAgICAgICB7dG9vbHRpcC52aXNpYmxlICYmIChcclxuICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcclxuICAgICAgICAgICAgICAgIHRvcDogdG9vbHRpcC55LFxyXG4gICAgICAgICAgICAgICAgbGVmdDogdG9vbHRpcC54LFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjgpJyxcclxuICAgICAgICAgICAgICAgIGNvbG9yOiAnI2UwZTBlMCcsXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMTJweCcsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc4cHgnLFxyXG4gICAgICAgICAgICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC0xMDAlKScsXHJcbiAgICAgICAgICAgICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcclxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICcxLjYnLFxyXG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNnB4JyxcclxuICAgICAgICAgICAgICAgIHpJbmRleDogMTAwMFxyXG4gICAgICAgICAgICAgIH19PlxyXG4gICAgICAgICAgICAgICAge3Rvb2x0aXAuY29udGVudH1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvPlxyXG4gICAgICApfVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFpvb21hYmxlQ2lyY2xlUGFja2luZztcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQ2hvcm9wbGV0aE1hcCBmcm9tICcuL2dyYXBocy8wMDVfV2VhcG9uVHlwZUNob3JvcGxldGhNYXAnO1xyXG5pbXBvcnQgWm9vbWFibGVDaXJjbGVQYWNraW5nIGZyb20gJy4vZ3JhcGhzLzAwNV9XZWFwb25UeXBlWkNQJztcclxuXHJcbmNvbnN0IGVtZXJnaW5nVGhyZWF0cyA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPHNlY3Rpb24gaWQ9XCIwMDVcIj5cclxuICAgICAgPHAgY2xhc3NOYW1lPVwiY3VzdG9tLXRpdGxlXCIgc3R5bGU9e3sgY3NzVGV4dDogJ21hcmdpbi10b3A6IDAnIH19PlxyXG4gICAgICAgIFByZXBhcmluZyBBbGxpZXMgZm9yIEVtZXJnaW5nIFRocmVhdHNcclxuICAgICAgPC9wPlxyXG5cclxuICAgICAgPHAgY2xhc3NOYW1lPVwiY3VzdG9tLXBhcmFncmFwaFwiPlxyXG4gICAgICAgIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiAnIzQ2ODJCNCcsIGZvbnRXZWlnaHQ6ICdib2xkJyB9fT5UaGUgVW5pdGVkIFN0YXRlczwvc3Bhbj4gc3RyZW5ndGhlbnMgcmVnaW9uYWwgZGVmZW5zZSBieSBlbXBvd2VyaW5nIGFsbGllcywgcmVkdWNpbmcgdGhlIG5lZWQgZm9yIGFuIGV4dGVuc2l2ZSBVUyBtaWxpdGFyeSBwcmVzZW5jZS4gRXF1aXBwZWQgd2l0aCBhZHZhbmNlZCB3ZWFwb25yeSBmcm9tIHRoZSBVUywgYWxsaWVzIGxpa2UgPHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjRDJCNDhDJywgZm9udFdlaWdodDogJ2JvbGQnIH19PlRhaXdhbjwvc3Bhbj4sIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiAnI0QyQjQ4QycsIGZvbnRXZWlnaHQ6ICdib2xkJyB9fT5KYXBhbjwvc3Bhbj4sIDxzcGFuIHN0eWxlPXt7IGNvbG9yOiAnI0QyQjQ4QycsIGZvbnRXZWlnaHQ6ICdib2xkJyB9fT5Tb3V0aCBLb3JlYTwvc3Bhbj4sIGFuZCB0aGUgPHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjRDJCNDhDJywgZm9udFdlaWdodDogJ2JvbGQnIH19PlBoaWxpcHBpbmVzPC9zcGFuPiBib2xzdGVyIHRoZWlyIGNhcGFiaWxpdGllcyB0byBjb3VudGVyIHJlZ2lvbmFsIHRocmVhdHMgaW5kZXBlbmRlbnRseS4gVGhpcyA8ZW0gc3R5bGU9e3sgY29sb3I6ICdvcmFuZ2UnLCBmb250V2VpZ2h0OiAnYm9sZCcgfX0+QnVpbGRpbmcgUGFydG5lciBDYXBhY2l0eTwvZW0+IHN0cmF0ZWd5IGhhcyBiZWNvbWUgZXZlbiBtb3JlIHNpZ25pZmljYW50IGFtaWQgcmlzaW5nIFNvdXRoIENoaW5hIFNlYSB0ZW5zaW9ucywgd2hlcmUgVVMgc3VwcG9ydCB0byBjb3VudHJpZXMgbGlrZSB0aGUgPHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjRDJCNDhDJywgZm9udFdlaWdodDogJ2JvbGQnIH19PlBoaWxpcHBpbmVzPC9zcGFuPiwgPHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjRDJCNDhDJywgZm9udFdlaWdodDogJ2JvbGQnIH19Pk1hbGF5c2lhPC9zcGFuPiwgPHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjRDJCNDhDJywgZm9udFdlaWdodDogJ2JvbGQnIH19PkJydW5laTwvc3Bhbj4sIGFuZCA8c3BhbiBzdHlsZT17eyBjb2xvcjogJyNEMkI0OEMnLCBmb250V2VpZ2h0OiAnYm9sZCcgfX0+SW5kb25lc2lhPC9zcGFuPiBpcyBjcnVjaWFsIGluIGRldGVycmluZyBDaGluYSdzIHRlcnJpdG9yaWFsIGFtYml0aW9ucy5cclxuICAgICAgPC9wPlxyXG5cclxuICAgICAgPHAgY2xhc3NOYW1lPVwiY3VzdG9tLXRpdGxlXCI+XHJcbiAgICAgICAgRXhwbG9yaW5nIHRoZSBBcm1zIFRyYWRlIER5bmFtaWNcclxuICAgICAgPC9wPlxyXG5cclxuICAgICAgPHAgY2xhc3NOYW1lPVwiY3VzdG9tLXBhcmFncmFwaFwiPlxyXG4gICAgICAgIFRvIGV4cGxvcmUgdGhpcyBkeW5hbWljLCB1c2UgdGhlIENob3JvcGxldGggTWFwIGFuZCBQaWUgQ2hhcnQgdG8gZXhhbWluZSBrZXkgeWVhcnMgd2hlbiBTb3V0aCBDaGluYSBTZWEgdGVuc2lvbnMgZXNjYWxhdGVkLiBCeSBzZWxlY3RpbmcgeWVhcnMgbGlrZSA8ZW0gc3R5bGU9e3sgY29sb3I6ICdvcmFuZ2UnLCBmb250V2VpZ2h0OiAnYm9sZCcgfX0+MjAxMC0yMDIwPC9lbT4sIHlvdSBjYW4gb2JzZXJ2ZSBhIG5vdGljZWFibGUgcmlzZSBpbiBVUyBhcm1zIGltcG9ydHMgYnkgQXNpYW4gYWxsaWVzIGFuZCBhbiBpbmNyZWFzZSBpbiB0b3RhbCBhcm1zIHRyYWRlIGluIHRoZSBBc2lhLU9jZWFuaWEgcmVnaW9uLiBUaGlzIGludGVyYWN0aXZlIHZpZXcgcmV2ZWFscyB0aGUgY29ycmVsYXRpb24gYmV0d2VlbiBoZWlnaHRlbmVkIHJlZ2lvbmFsIGRpc3B1dGVzIGFuZCB0aGUgc3RyYXRlZ2ljIGFybXMgc3VwcG9ydCBwcm92aWRlZCBieSB0aGUgPHNwYW4gc3R5bGU9e3sgY29sb3I6ICcjNDY4MkI0JywgZm9udFdlaWdodDogJ2JvbGQnIH19PlVTPC9zcGFuPlxyXG4gICAgICA8L3A+XHJcblxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNoYXJ0LWNvbnRhaW5lclwiIHN0eWxlPXt7IHdpZHRoOiAnODAlJyB9fT5cclxuICAgICAgICA8Q2hvcm9wbGV0aE1hcCAvPlxyXG4gICAgICA8L2Rpdj5cclxuXHJcbiAgICAgIDxwIGNsYXNzTmFtZT1cImN1c3RvbS10aXRsZVwiPlxyXG4gICAgICAgIEJyZWFrZG93biBvZiBXZWFwb24gVHJhbnNmZXJzIGJ5IENhdGVnb3J5IFxyXG4gICAgICA8L3A+XHJcblxyXG4gICAgICA8cCBjbGFzc05hbWU9XCJjdXN0b20tcGFyYWdyYXBoXCI+XHJcbiAgICAgICAgTWlzc2lsZXMsIGFpcmNyYWZ0LCBhbmQgb3RoZXIgYWR2YW5jZWQgd2VhcG9ucnkgZG9taW5hdGUgVVMgZXhwb3J0cywgcmVmbGVjdGluZyByZWdpb25hbCBwcmlvcml0aWVzIGFuZCB0aHJlYXRzLiBUaGlzIGJyZWFrZG93biBzaG93cyBob3cgYXJtcyB0cmFuc2ZlcnMgYWxpZ24gd2l0aCBnZW9wb2xpdGljYWwgb2JqZWN0aXZlcy5cclxuICAgICAgPC9wPlxyXG4gICAgICBcclxuICAgICAgPHVsPlxyXG4gICAgICAgIDxsaT5UaGUgPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiIzQ2ODJCNFwiIH19PlVuaXRlZCBTdGF0ZXM8L3NwYW4+IHN1cHBvcnRzIGNvdW50cmllcyBpbiA8c3BhbiBzdHlsZT17eyBmb250U3R5bGU6IFwiaXRhbGljXCIgfX0+RXVyb3BlLCB0aGUgTWlkZGxlIEVhc3QsIGFuZCBBc2lhLVBhY2lmaWM8L3NwYW4+LCByZWluZm9yY2luZyBhIGRlZmVuc2UgbGluZSBhZ2FpbnN0IHJpdmFscy48L2xpPjxici8+XHJcbiAgICAgICAgPGxpPjxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiNEQzE0M0NcIiB9fT5SdXNzaWEgPC9zcGFuPiBzdXBwbGllcyBuYXRpb25zIGluIDxzcGFuIHN0eWxlPXt7IGZvbnRTdHlsZTogXCJpdGFsaWNcIiB9fT5FYXN0ZXJuIEV1cm9wZSBhbmQgQ2VudHJhbCBBc2lhPC9zcGFuPiB0byBjb3VudGVyIE5BVE8ncyByZWFjaC48L2xpPjxici8+XHJcbiAgICAgICAgPGxpPjxzcGFuIHN0eWxlPXt7IGNvbG9yOiBcIiNGRkQ3MDBcIiB9fT5DaGluYTwvc3Bhbj4gYXJtcyBjb3VudHJpZXMgaW4gPHNwYW4gc3R5bGU9e3sgZm9udFN0eWxlOiBcIml0YWxpY1wiIH19PlNvdXRoZWFzdCBBc2lhLCBBZnJpY2EsIGFuZCBTb3V0aCBBc2lhPC9zcGFuPiwgZXhwYW5kaW5nIGl0cyBmb290aG9sZCBpbiByZXNvdXJjZS1yaWNoIGFyZWFzLjwvbGk+PGJyLz5cclxuICAgICAgICA8bGk+Q291bnRyaWVzIGxpa2UgPHNwYW4gc3R5bGU9e3sgY29sb3I6IFwiI0QyQjQ4Q1wiIH19PkluZGlhPC9zcGFuPiBpbGx1c3RyYXRlIGEgbXVsdGlsYXRlcmFsIGFwcHJvYWNoLCBiYWxhbmNpbmcgcmVsYXRpb25zaGlwcyB3aXRoIHRoZSBVUywgUnVzc2lhLCBhbmQgb3RoZXJzLjwvbGk+PGJyLz5cclxuICAgICAgPC91bD4gXHJcblxyXG4gICAgICA8cCBjbGFzc05hbWU9XCJjdXN0b20tcGFyYWdyYXBoXCI+XHJcbiAgICAgICAgVGhyb3VnaCB0aGlzIG5ldHdvcmssIGFybXMgdHJhbnNmZXJzIHJldmVhbCBpbnRlcmRlcGVuZGVudCBhbGxpYW5jZXMsIGJvbHN0ZXJlZCBpbmZsdWVuY2UsIGFuZCBlZmZvcnRzIHRvIGNvbnRhaW4gcml2YWxzLlxyXG4gICAgICA8L3A+XHJcblxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNoYXJ0LWNvbnRhaW5lclwiIHN0eWxlPXt7IHdpZHRoOiAnODAlJyB9fT5cclxuICAgICAgICA8Wm9vbWFibGVDaXJjbGVQYWNraW5nIC8+XHJcbiAgICAgIDwvZGl2PlxyXG5cclxuICAgIDwvc2VjdGlvbj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZW1lcmdpbmdUaHJlYXRzO1xyXG4iXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VSZWYiLCJ1c2VFZmZlY3QiLCJ1c2VTdGF0ZSIsImQzIiwidG9wb2pzb24iLCJDaG9yb3BsZXRoTWFwIiwic3ZnUmVmIiwicGllQ2hhcnRSZWYiLCJfdXNlU3RhdGUiLCJ2aXNpYmxlIiwieCIsInkiLCJjb250ZW50IiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5IiwidG9vbHRpcCIsInNldFRvb2x0aXAiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsIm1vZGFsRGF0YSIsInNldE1vZGFsRGF0YSIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2IiwiY291bnRyeURhdGEiLCJzZXRDb3VudHJ5RGF0YSIsIl91c2VTdGF0ZTciLCJfdXNlU3RhdGU4IiwiY291bnRyaWVzIiwic2V0Q291bnRyaWVzIiwiX3VzZVN0YXRlOSIsIl91c2VTdGF0ZTEwIiwic2VsZWN0ZWRZZWFyIiwic2V0U2VsZWN0ZWRZZWFyIiwiX3VzZVN0YXRlMTEiLCJfdXNlU3RhdGUxMiIsInNlbGVjdGVkV2VhcG9uVHlwZSIsInNldFNlbGVjdGVkV2VhcG9uVHlwZSIsIl91c2VTdGF0ZTEzIiwiX3VzZVN0YXRlMTQiLCJ3ZWFwb25UeXBlcyIsInNldFdlYXBvblR5cGVzIiwiX3VzZVN0YXRlMTUiLCJfdXNlU3RhdGUxNiIsIm1heFF1YW50aXRpZXMiLCJzZXRNYXhRdWFudGl0aWVzIiwiX3VzZVN0YXRlMTciLCJfdXNlU3RhdGUxOCIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwiX3VzZVN0YXRlMTkiLCJfdXNlU3RhdGUyMCIsImVycm9yIiwic2V0RXJyb3IiLCJfdXNlU3RhdGUyMSIsIl91c2VTdGF0ZTIyIiwibWluWWVhciIsInNldE1pblllYXIiLCJfdXNlU3RhdGUyMyIsIl91c2VTdGF0ZTI0IiwibWF4WWVhciIsInNldE1heFllYXIiLCJfdXNlU3RhdGUyNSIsIl91c2VTdGF0ZTI2IiwidG90YWxBcm1zVHJhZGUiLCJzZXRUb3RhbEFybXNUcmFkZSIsImRhdGFVcmwiLCJwaWVDaGFydFVybCIsImNvdW50cnlOYW1lTWFwcGluZyIsIlByb21pc2UiLCJhbGwiLCJqc29uIiwiY3N2IiwiZCIsInllYXIiLCJxdWFudGl0eSIsImlzTmFOIiwicmVjaXBpZW50cyIsInN1cHBsaWVycyIsIk1hdGgiLCJyb3VuZCIsIndlYXBvbkRlc2NyaXB0aW9uIiwic3RhdHVzIiwidGhlbiIsIl9yZWYiLCJfcmVmMiIsIndvcmxkRGF0YVJhdyIsImFybXNEYXRhUmF3IiwiZmlsdGVyIiwicm93IiwiY291bnRyaWVzRGF0YSIsImZlYXR1cmUiLCJvYmplY3RzIiwiZmVhdHVyZXMiLCJwcm9jZXNzZWREYXRhIiwidW5pcXVlV2VhcG9uVHlwZXMiLCJTZXQiLCJ0ZW1wTWF4UXVhbnRpdGllcyIsImZvckVhY2giLCJjb3VudHJ5Iiwid2VhcG9uVHlwZSIsInRyaW0iLCJhZGQiLCJ3ZWFwb25UeXBlc0FycmF5IiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiQXJyYXkiLCJmcm9tIiwid3QiLCJ1bmRlZmluZWQiLCJzb3J0IiwiYXZhaWxhYmxlWWVhcnMiLCJtYXAiLCJhIiwiYiIsImxlbmd0aCIsImluY2x1ZGVzIiwiY29uc29sZSIsIk9iamVjdCIsImtleXMiLCJkcmF3TWFwIiwid2lkdGgiLCJoZWlnaHQiLCJyYWRpdXMiLCJtaW4iLCJzdmciLCJzZWxlY3QiLCJjdXJyZW50IiwiYXR0ciIsInNlbGVjdEFsbCIsInJlbW92ZSIsImRhdGEiLCJjdXN0b21PcmRlciIsImZpbHRlcmVkRGF0YSIsInJlZ2lvbkFybXNEYXRhIiwiZ3JvdXAiLCJfcmVmMyIsIl9yZWY0IiwicmVnaW9uIiwidmFsdWVzIiwiYXJtc1RyYWRlIiwiaW5kZXhPZiIsInN1bSIsImFwcGVuZCIsInRleHQiLCJjb2xvck1hcCIsImNvbG9yU2NhbGUiLCJzY2FsZU9yZGluYWwiLCJkb21haW4iLCJyYW5nZSIsInBpZSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsIlBJIiwidmFsdWUiLCJhcmMiLCJvdXRlclJhZGl1cyIsImlubmVyUmFkaXVzIiwibGFiZWxBcmMiLCJlbnRlciIsIm9uIiwiZXZlbnQiLCJyZWdpb25QZXJjZW50YWdlIiwidG9GaXhlZCIsImNvbnRhaW5lciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm9mZnNldFgiLCJjbGllbnRYIiwibGVmdCIsIm9mZnNldFkiLCJjbGllbnRZIiwidG9wIiwiY3JlYXRlRWxlbWVudCIsInRvTG9jYWxlU3RyaW5nIiwicHJldiIsIl9vYmplY3RTcHJlYWQiLCJjdXJyZW50VGFyZ2V0IiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwiX2xhYmVsQXJjJGNlbnRyb2lkIiwiY2VudHJvaWQiLCJfbGFiZWxBcmMkY2VudHJvaWQyIiwiYW5nbGUiLCJyb3RhdGlvbiIsImFyY0xlbmd0aCIsImFyY0xlbmd0aERlZyIsInN0eWxlIiwiYXJtc0RhdGEiLCJwcm9qZWN0aW9uIiwiZ2VvTWVyY2F0b3IiLCJjZW50ZXIiLCJzY2FsZSIsInRyYW5zbGF0ZSIsInBhdGgiLCJnZW9QYXRoIiwibWF4UXVhbnRpdHkiLCJzaXplU2NhbGUiLCJtYXgiLCJfYXJtc0RhdGEkY291bnRyeSIsInByb3BlcnRpZXMiLCJuYW1lIiwieWVhckRhdGEiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyIiwic2NhbGVTZXF1ZW50aWFsIiwiaW50ZXJwb2xhdGVSZWRzIiwibG9nIiwic2NhbGVTcXJ0IiwiX2FybXNEYXRhJGQkcHJvcGVydGllIiwiY2FsbCIsInpvb20iLCJzY2FsZUV4dGVudCIsImciLCJ0cmFuc2Zvcm0iLCJlbXB0eSIsImhhbmRsZVRvb2x0aXBDb250ZW50IiwidG90YWxRdWFudGl0eSIsImxpbmVIZWlnaHQiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJjb2xvciIsImxvZ0NvbG9yU2NhbGUiLCJfYXJtc0RhdGEkY291bnRyeTIiLCJfYXJtc0RhdGEkY291bnRyeTMiLCJfYXJtc0RhdGEkY291bnRyeTQiLCJfYXJtc0RhdGEkY291bnRyeTUiLCJfYXJtc0RhdGEkY291bnRyeTYiLCJfYXJtc0RhdGEkY291bnRyeTciLCJnZW9DZW50cm9pZCIsIl9hcm1zRGF0YSRjb3VudHJ5OCIsIl9hcm1zRGF0YSRjb3VudHJ5OSIsIl9hcm1zRGF0YSRjb3VudHJ5MTAiLCJfYXJtc0RhdGEkY291bnRyeTExIiwiX2FybXNEYXRhJGNvdW50cnkxMiIsIl9hcm1zRGF0YSRjb3VudHJ5MTMiLCJjbG9zZU1vZGFsIiwicG9zaXRpb24iLCJ0ZXh0QWxpZ24iLCJwYWRkaW5nVG9wIiwiY2xhc3NOYW1lIiwiRnJhZ21lbnQiLCJ0eXBlIiwiaWQiLCJzdGVwIiwib25DaGFuZ2UiLCJlIiwicGFyc2VJbnQiLCJ0YXJnZXQiLCJhcHBlYXJhbmNlIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyUmFkaXVzIiwib3V0bGluZSIsIm1hcmdpbiIsImRpc3BsYXkiLCJhY2NlbnRDb2xvciIsImRpc2FibGVkIiwiYm9yZGVyIiwicmVmIiwiYmFja2dyb3VuZCIsInBhZGRpbmciLCJmbGV4RGlyZWN0aW9uIiwiaHRtbEZvciIsIm1hcmdpbkJvdHRvbSIsImtleSIsImJvdHRvbSIsIm92ZXJmbG93IiwiYm94U2hhZG93IiwicG9pbnRlckV2ZW50cyIsIm9wYWNpdHkiLCJ6SW5kZXgiLCJ3aGl0ZVNwYWNlIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50Iiwib25DbGljayIsIm1heFdpZHRoIiwibWF4SGVpZ2h0Iiwib3ZlcmZsb3dZIiwic3RvcFByb3BhZ2F0aW9uIiwicmlnaHQiLCJjdXJzb3IiLCJib3JkZXJDb2xsYXBzZSIsImVudHJpZXMiLCJfcmVmNSIsIl9yZWY2IiwibWFyZ2luVG9wIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsInQiLCJyIiwicHJvdG90eXBlIiwibiIsImhhc093blByb3BlcnR5IiwibyIsImRlZmluZVByb3BlcnR5IiwiaSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsImFyZyIsImgiLCJsIiwiZiIsInMiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImdldFByb3RvdHlwZU9mIiwidiIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJFcnJvciIsImRvbmUiLCJtZXRob2QiLCJkZWxlZ2F0ZSIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsIlR5cGVFcnJvciIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInB1c2hUcnlFbnRyeSIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJyZXNldFRyeUVudHJ5IiwiY29tcGxldGlvbiIsInJlc2V0IiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsImFzeW5jIiwicmV2ZXJzZSIsInBvcCIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJ2YWwiLCJoYW5kbGUiLCJjb21wbGV0ZSIsImZpbmlzaCIsIl9jYXRjaCIsImRlbGVnYXRlWWllbGQiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJfYXN5bmNUb0dlbmVyYXRvciIsImFyZ3VtZW50cyIsImFwcGx5IiwiX25leHQiLCJfdGhyb3ciLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJ0b1N0cmluZyIsInRlc3QiLCJpc0FycmF5IiwidXNlTWVtbyIsIlpvb21hYmxlQ2lyY2xlUGFja2luZyIsInNldERhdGEiLCJzZWxlY3RlZFllYXJJbmRleCIsInNldFNlbGVjdGVkWWVhckluZGV4Iiwic2V0QXZhaWxhYmxlWWVhcnMiLCJmZXRjaERhdGEiLCJfY2FsbGVlIiwicmVzcG9uc2UiLCJqc29uRGF0YSIsInllYXJzIiwiZGVmYXVsdFllYXJJbmRleCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJmZXRjaCIsIm9rIiwiRXhwb3J0cyIsImZsYXRNYXAiLCJjYXRlZ29yeSIsInQwIiwiY291bnRyeUNvbG9yU2NhbGUiLCJ1bmtub3duIiwiY2F0ZWdvcnlDb2xvclNjYWxlIiwiYWxsQ2F0ZWdvcmllcyIsInNjaGVtZVBhaXJlZCIsImNoaWxkcmVuIiwiY2F0ZWdvcmllcyIsInJvb3QiLCJoaWVyYXJjaHkiLCJwYWNrIiwic2l6ZSIsImZvY3VzIiwidmlldyIsInpvb21UbyIsImsiLCJub2RlIiwidHdlZW4iLCJpbnRlcnBvbGF0ZVpvb20iLCJkZXNjZW5kYW50cyIsImpvaW4iLCJkZXB0aCIsInBhcmVudCIsImVhY2giLCJ0ZXh0Q29udGVudCIsInRleHRFbGVtZW50IiwiYmJveCIsImdldEJCb3giLCJpbnNlcnQiLCJoYW5kbGVTbGlkZXJDaGFuZ2UiLCJOdW1iZXIiLCJlbWVyZ2luZ1RocmVhdHMiLCJjc3NUZXh0IiwiZm9udFN0eWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3320\n')},1796:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ feature)\n});\n\n// UNUSED EXPORTS: object\n\n;// ./node_modules/topojson-client/src/reverse.js\n/* harmony default export */ function reverse(array, n) {\n  var t, j = array.length, i = j - n;\n  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;\n}\n\n;// ./node_modules/topojson-client/src/identity.js\n/* harmony default export */ function identity(x) {\n  return x;\n}\n\n;// ./node_modules/topojson-client/src/transform.js\n\n\n/* harmony default export */ function transform(transform) {\n  if (transform == null) return identity;\n  var x0,\n      y0,\n      kx = transform.scale[0],\n      ky = transform.scale[1],\n      dx = transform.translate[0],\n      dy = transform.translate[1];\n  return function(input, i) {\n    if (!i) x0 = y0 = 0;\n    var j = 2, n = input.length, output = new Array(n);\n    output[0] = (x0 += input[0]) * kx + dx;\n    output[1] = (y0 += input[1]) * ky + dy;\n    while (j < n) output[j] = input[j], ++j;\n    return output;\n  };\n}\n\n;// ./node_modules/topojson-client/src/feature.js\n\n\n\n/* harmony default export */ function feature(topology, o) {\n  if (typeof o === "string") o = topology.objects[o];\n  return o.type === "GeometryCollection"\n      ? {type: "FeatureCollection", features: o.geometries.map(function(o) { return feature_feature(topology, o); })}\n      : feature_feature(topology, o);\n}\n\nfunction feature_feature(topology, o) {\n  var id = o.id,\n      bbox = o.bbox,\n      properties = o.properties == null ? {} : o.properties,\n      geometry = object(topology, o);\n  return id == null && bbox == null ? {type: "Feature", properties: properties, geometry: geometry}\n      : bbox == null ? {type: "Feature", id: id, properties: properties, geometry: geometry}\n      : {type: "Feature", id: id, bbox: bbox, properties: properties, geometry: geometry};\n}\n\nfunction object(topology, o) {\n  var transformPoint = transform(topology.transform),\n      arcs = topology.arcs;\n\n  function arc(i, points) {\n    if (points.length) points.pop();\n    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {\n      points.push(transformPoint(a[k], k));\n    }\n    if (i < 0) reverse(points, n);\n  }\n\n  function point(p) {\n    return transformPoint(p);\n  }\n\n  function line(arcs) {\n    var points = [];\n    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);\n    if (points.length < 2) points.push(points[0]); // This should never happen per the specification.\n    return points;\n  }\n\n  function ring(arcs) {\n    var points = line(arcs);\n    while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.\n    return points;\n  }\n\n  function polygon(arcs) {\n    return arcs.map(ring);\n  }\n\n  function geometry(o) {\n    var type = o.type, coordinates;\n    switch (type) {\n      case "GeometryCollection": return {type: type, geometries: o.geometries.map(geometry)};\n      case "Point": coordinates = point(o.coordinates); break;\n      case "MultiPoint": coordinates = o.coordinates.map(point); break;\n      case "LineString": coordinates = line(o.arcs); break;\n      case "MultiLineString": coordinates = o.arcs.map(line); break;\n      case "Polygon": coordinates = polygon(o.arcs); break;\n      case "MultiPolygon": coordinates = o.arcs.map(polygon); break;\n      default: return null;\n    }\n    return {type: type, coordinates: coordinates};\n  }\n\n  return geometry(o);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5Ni5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw2QkFBZSxpQkFBUztBQUN4QjtBQUNBO0FBQ0E7OztBQ0hBLDZCQUFlLGtCQUFTO0FBQ3hCO0FBQ0E7OztBQ0ZxQzs7QUFFckMsNkJBQWUsbUJBQVM7QUFDeEIsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNsQm1DO0FBQ0k7O0FBRXZDLDZCQUFlLGlCQUFTO0FBQ3hCO0FBQ0E7QUFDQSxTQUFTLG9FQUFvRSxPQUFPLGVBQU8sZ0JBQWdCO0FBQzNHLFFBQVEsZUFBTztBQUNmOztBQUVBLFNBQVMsZUFBTztBQUNoQjtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsdUNBQXVDO0FBQ3ZDLHdCQUF3QjtBQUN4QixTQUFTO0FBQ1Q7O0FBRU87QUFDUCx1QkFBdUIsU0FBUztBQUNoQzs7QUFFQTtBQUNBO0FBQ0EsNERBQTRELE9BQU87QUFDbkU7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFDQUFxQyxPQUFPO0FBQzVDLG1EQUFtRDtBQUNuRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLHdEQUF3RDtBQUN4RCxpRUFBaUU7QUFDakUscURBQXFEO0FBQ3JELDhEQUE4RDtBQUM5RCxxREFBcUQ7QUFDckQsOERBQThEO0FBQzlEO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Byb2plY3RfdGVhbV9zbXVyZl9kZXBsb3kvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9yZXZlcnNlLmpzPzYwYTciLCJ3ZWJwYWNrOi8vcHJvamVjdF90ZWFtX3NtdXJmX2RlcGxveS8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL2lkZW50aXR5LmpzPzM5OTUiLCJ3ZWJwYWNrOi8vcHJvamVjdF90ZWFtX3NtdXJmX2RlcGxveS8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL3RyYW5zZm9ybS5qcz83ZmQ0Iiwid2VicGFjazovL3Byb2plY3RfdGVhbV9zbXVyZl9kZXBsb3kvLi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy9mZWF0dXJlLmpzP2ZiMTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIG4pIHtcbiAgdmFyIHQsIGogPSBhcnJheS5sZW5ndGgsIGkgPSBqIC0gbjtcbiAgd2hpbGUgKGkgPCAtLWopIHQgPSBhcnJheVtpXSwgYXJyYXlbaSsrXSA9IGFycmF5W2pdLCBhcnJheVtqXSA9IHQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zZm9ybSkge1xuICBpZiAodHJhbnNmb3JtID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgdmFyIHgwLFxuICAgICAgeTAsXG4gICAgICBreCA9IHRyYW5zZm9ybS5zY2FsZVswXSxcbiAgICAgIGt5ID0gdHJhbnNmb3JtLnNjYWxlWzFdLFxuICAgICAgZHggPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzBdLFxuICAgICAgZHkgPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzFdO1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGkpIHtcbiAgICBpZiAoIWkpIHgwID0geTAgPSAwO1xuICAgIHZhciBqID0gMiwgbiA9IGlucHV0Lmxlbmd0aCwgb3V0cHV0ID0gbmV3IEFycmF5KG4pO1xuICAgIG91dHB1dFswXSA9ICh4MCArPSBpbnB1dFswXSkgKiBreCArIGR4O1xuICAgIG91dHB1dFsxXSA9ICh5MCArPSBpbnB1dFsxXSkgKiBreSArIGR5O1xuICAgIHdoaWxlIChqIDwgbikgb3V0cHV0W2pdID0gaW5wdXRbal0sICsrajtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xufVxuIiwiaW1wb3J0IHJldmVyc2UgZnJvbSBcIi4vcmV2ZXJzZS5qc1wiO1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odG9wb2xvZ3ksIG8pIHtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSBvID0gdG9wb2xvZ3kub2JqZWN0c1tvXTtcbiAgcmV0dXJuIG8udHlwZSA9PT0gXCJHZW9tZXRyeUNvbGxlY3Rpb25cIlxuICAgICAgPyB7dHlwZTogXCJGZWF0dXJlQ29sbGVjdGlvblwiLCBmZWF0dXJlczogby5nZW9tZXRyaWVzLm1hcChmdW5jdGlvbihvKSB7IHJldHVybiBmZWF0dXJlKHRvcG9sb2d5LCBvKTsgfSl9XG4gICAgICA6IGZlYXR1cmUodG9wb2xvZ3ksIG8pO1xufVxuXG5mdW5jdGlvbiBmZWF0dXJlKHRvcG9sb2d5LCBvKSB7XG4gIHZhciBpZCA9IG8uaWQsXG4gICAgICBiYm94ID0gby5iYm94LFxuICAgICAgcHJvcGVydGllcyA9IG8ucHJvcGVydGllcyA9PSBudWxsID8ge30gOiBvLnByb3BlcnRpZXMsXG4gICAgICBnZW9tZXRyeSA9IG9iamVjdCh0b3BvbG9neSwgbyk7XG4gIHJldHVybiBpZCA9PSBudWxsICYmIGJib3ggPT0gbnVsbCA/IHt0eXBlOiBcIkZlYXR1cmVcIiwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiBiYm94ID09IG51bGwgPyB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgYmJveDogYmJveCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9iamVjdCh0b3BvbG9neSwgbykge1xuICB2YXIgdHJhbnNmb3JtUG9pbnQgPSB0cmFuc2Zvcm0odG9wb2xvZ3kudHJhbnNmb3JtKSxcbiAgICAgIGFyY3MgPSB0b3BvbG9neS5hcmNzO1xuXG4gIGZ1bmN0aW9uIGFyYyhpLCBwb2ludHMpIHtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCkgcG9pbnRzLnBvcCgpO1xuICAgIGZvciAodmFyIGEgPSBhcmNzW2kgPCAwID8gfmkgOiBpXSwgayA9IDAsIG4gPSBhLmxlbmd0aDsgayA8IG47ICsraykge1xuICAgICAgcG9pbnRzLnB1c2godHJhbnNmb3JtUG9pbnQoYVtrXSwgaykpO1xuICAgIH1cbiAgICBpZiAoaSA8IDApIHJldmVyc2UocG9pbnRzLCBuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50KHApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUG9pbnQocCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmNzLmxlbmd0aDsgaSA8IG47ICsraSkgYXJjKGFyY3NbaV0sIHBvaW50cyk7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAyKSBwb2ludHMucHVzaChwb2ludHNbMF0pOyAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gcGVyIHRoZSBzcGVjaWZpY2F0aW9uLlxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICBmdW5jdGlvbiByaW5nKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gbGluZShhcmNzKTtcbiAgICB3aGlsZSAocG9pbnRzLmxlbmd0aCA8IDQpIHBvaW50cy5wdXNoKHBvaW50c1swXSk7IC8vIFRoaXMgbWF5IGhhcHBlbiBpZiBhbiBhcmMgaGFzIG9ubHkgdHdvIHBvaW50cy5cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seWdvbihhcmNzKSB7XG4gICAgcmV0dXJuIGFyY3MubWFwKHJpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VvbWV0cnkobykge1xuICAgIHZhciB0eXBlID0gby50eXBlLCBjb29yZGluYXRlcztcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJHZW9tZXRyeUNvbGxlY3Rpb25cIjogcmV0dXJuIHt0eXBlOiB0eXBlLCBnZW9tZXRyaWVzOiBvLmdlb21ldHJpZXMubWFwKGdlb21ldHJ5KX07XG4gICAgICBjYXNlIFwiUG9pbnRcIjogY29vcmRpbmF0ZXMgPSBwb2ludChvLmNvb3JkaW5hdGVzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2ludFwiOiBjb29yZGluYXRlcyA9IG8uY29vcmRpbmF0ZXMubWFwKHBvaW50KTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTGluZVN0cmluZ1wiOiBjb29yZGluYXRlcyA9IGxpbmUoby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlMaW5lU3RyaW5nXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChsaW5lKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiUG9seWdvblwiOiBjb29yZGluYXRlcyA9IHBvbHlnb24oby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChwb2x5Z29uKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xuICB9XG5cbiAgcmV0dXJuIGdlb21ldHJ5KG8pO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1796\n')}}]);