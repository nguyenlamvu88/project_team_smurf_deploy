{"version":3,"file":"660.bundle.js","mappings":"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","sources":["webpack://project_team_smurf_deploy/./src/components/graphs/006_ManufacturerTreemap.js","webpack://project_team_smurf_deploy/./src/components/006_manufacturers.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst ManufacturerTreeMap = () => {\r\n  const svgRef = useRef();\r\n  const [tooltip, setTooltip] = useState({ visible: false, x: 0, y: 0, content: '' });\r\n  const [legendData, setLegendData] = useState([]);\r\n  const [totalRevenue, setTotalRevenue] = useState(0);\r\n  const [selectedYear, setSelectedYear] = useState(2022);\r\n\r\n  const dataUrl = \"/data/processed/processed_top_100_arms_companies_consolidated.csv\";\r\n\r\n  const width = 950;\r\n  const height = 750;\r\n  \r\n  const colorMap = {\r\n    \"United States\": \"#4682B4\",\r\n    \"Russia\": \"#DC143C\",\r\n    \"China\": \"#FFDB58\",\r\n    \"United Kingdom\": \"lightblue\",\r\n    \"Italy\": \"#008C45\",\r\n    \"France\": \"#B57EDC\",\r\n    \"Trans-European\": \"#EDC9AF\",\r\n    \"Japan\": \"pink\"\r\n  };\r\n\r\n  const defaultColor = \"#CCCCCC\";\r\n\r\n  useEffect(() => {\r\n    \r\n\r\n    const svg = d3.select(svgRef.current)\r\n                  .attr('width', width)\r\n                  .attr('height', height)\r\n                  .style('position', 'relative');\r\n    svg.selectAll('*').remove();\r\n\r\n    svg.append('text')\r\n      .attr('x', width / 2)\r\n      .attr('y', 20)\r\n      .attr('text-anchor', 'middle')\r\n      .attr('font-size', '20px')\r\n      .attr('font-weight', 'bold')\r\n      .attr('fill', '#0db4de')\r\n      .text(``);\r\n\r\n    const tooltip = d3.select(\"body\").append(\"div\")\r\n      .attr(\"class\", \"tooltip\")\r\n      .style(\"position\", \"absolute\")\r\n      .style(\"background\", \"rgba(0, 0, 0, 0.8)\")\r\n      .style(\"color\", \"e0e0e0\")\r\n      .style(\"padding\", \"12px\")\r\n      .style(\"border-radius\", \"8px\")\r\n      .style(\"pointer-events\", \"none\")\r\n      .style(\"font-size\", \"16px\")\r\n      .style(\"display\", \"none\");\r\n\r\n    d3.csv(dataUrl).then(data => {\r\n      const revenueColumn = `Arms Revenue ${selectedYear}`;\r\n      if (!data.columns.includes(revenueColumn)) {\r\n        svg.append('text')\r\n          .attr('x', width / 2)\r\n          .attr('y', height / 2)\r\n          .attr('text-anchor', 'middle')\r\n          .text(`No data available for the year ${selectedYear}`);\r\n        return;\r\n      }\r\n\r\n      const dataWithRevenue = data.map(d => ({\r\n        ...d,\r\n        totalRevenue: +d[revenueColumn] || 0\r\n      })).filter(d => d.totalRevenue > 0);\r\n\r\n      const top20Data = dataWithRevenue\r\n        .sort((a, b) => b.totalRevenue - a.totalRevenue)\r\n        .slice(0, 20);\r\n\r\n      const totalRev = d3.sum(top20Data, d => d.totalRevenue);\r\n      setTotalRevenue(totalRev);\r\n\r\n      const groupedData = d3.group(top20Data, d => d.Country);\r\n\r\n      const colorScale = d3.scaleOrdinal(d3.schemeCategory10);\r\n      const legendInfo = Array.from(groupedData, ([country, companies]) => {\r\n        const countryRevenue = d3.sum(companies, company => company.totalRevenue);\r\n        return {\r\n          country,\r\n          color: colorScale(country),\r\n          percentage: (countryRevenue / totalRev) * 100,\r\n        };\r\n      });\r\n      legendInfo.sort((a, b) => b.percentage - a.percentage);\r\n\r\n      setLegendData(legendInfo);\r\n\r\n      const root = d3.hierarchy({ children: top20Data })\r\n                     .sum(d => d.totalRevenue)\r\n                     .sort((a, b) => b.value - a.value);\r\n\r\n      d3.treemap()\r\n        .size([width, height - 20])\r\n        .padding(2)\r\n        (root);\r\n\r\n      const treemapGroup = svg.append('g')\r\n                              .attr('transform', `translate(0, 20)`);\r\n\r\n      treemapGroup.selectAll('rect')\r\n        .data(root.leaves())\r\n        .enter()\r\n        .append('rect')\r\n        .attr('x', d => d.x0)\r\n        .attr('y', d => d.y0)\r\n        .attr('width', d => d.x1 - d.x0 - 4)\r\n        .attr('height', d => d.y1 - d.y0 - 4)\r\n        .attr('fill', d => colorMap[d.data.Country] || defaultColor)\r\n        .attr('opacity', 0.9)\r\n        .attr('rx', 4) // Set corner radius for rounded corners\r\n        .attr('ry', 4) // Optional, can be the same or different from rx\r\n        .on('mouseover', (event, d) => {\r\n          const revenuePercentage = ((d.data.totalRevenue / totalRev) * 100).toFixed(1);\r\n          tooltip\r\n            .style(\"display\", \"block\")\r\n            .html(`\r\n              <strong>${d.data.Company}</strong>: $${d.data.totalRevenue.toLocaleString()}M (${revenuePercentage}%)\r\n            `);\r\n           /* \r\n          setTooltip({\r\n            visible: true,\r\n            x: event.pageX - 100,\r\n            y: event.pageY - 100,\r\n            content: `${d.data.Company}\\nRevenue: $${d.data.totalRevenue.toLocaleString()} (${revenuePercentage}%)`,\r\n          });\r\n              */\r\n          d3.select(event.currentTarget)\r\n            .transition()\r\n            .duration(200)\r\n            .attr('x', d.x0 - 5)\r\n            .attr('y', d.y0 - 5)\r\n            .attr('width', (d.x1 - d.x0) + 20)\r\n            .attr('height', (d.y1 - d.y0) + 20)\r\n            .attr('fill', '#FF5733')\r\n        })\r\n        .on('mousemove', (event) => {\r\n          tooltip\r\n            .style(\"left\", `${event.pageX + 10}px`)\r\n            .style(\"top\", `${event.pageY + 10}px`);\r\n        })\r\n        .on('mouseout', (event, d) => {\r\n          tooltip.style(\"display\", \"none\");\r\n\r\n          d3.select(event.currentTarget)\r\n            .transition()\r\n            .duration(200)\r\n            .attr('x', d.x0)\r\n            .attr('y', d.y0)\r\n            .attr('width', d.x1 - d.x0 - 4)\r\n            .attr('height', d.y1 - d.y0 - 4)\r\n            .attr('fill', d => colorMap[d.data.Country] || defaultColor)\r\n            .attr('opacity', 0.9);\r\n        });\r\n\r\n        treemapGroup.selectAll('text')\r\n          .data(root.leaves())\r\n          .enter()\r\n          .append('text')\r\n          .attr('x', d => d.x0 + 10) // Padding for text\r\n          .attr('y', d => d.y0 + 20) // Padding for text\r\n          .attr('font-size', '16px')\r\n          .attr('font-weight', 'bold')\r\n          .attr('fill', '#444444')\r\n          .style('pointer-events', 'none')\r\n          .text(d => d.data.Company); // Append the company name as a single line\r\n    }).catch(error => {\r\n      console.error(\"Error loading data:\", error);\r\n      svg.append('text')\r\n        .attr('x', width / 2)\r\n        .attr('y', height / 2)\r\n        .attr('text-anchor', 'middle')\r\n        .text('Failed to load data');\r\n    });\r\n  }, [selectedYear]);\r\n\r\n  return (\r\n    <div >\r\n    \r\n    <h3 style={{textAlign: 'center', fontSize: '24px', color: '#e74c3c', paddingTop: '20px',}}>\r\n          Top 20 Arms Companies by Revenue {selectedYear}\r\n         </h3>\r\n\r\n      <div style={{marginTop: '20px', textAlign: 'center' }}>\r\n          <input\r\n            type=\"range\"\r\n            id=\"yearRange\"\r\n            min={2003}\r\n            max={2022}\r\n            step=\"1\"\r\n            value={selectedYear}\r\n            onChange={(e) => setSelectedYear(parseInt(e.target.value))}\r\n            style={{\r\n            width: '80%',\r\n            appearance: 'none',\r\n            height: '8px',\r\n            backgroundColor: 'gray',\r\n            borderRadius: '5px',\r\n            outline: 'none',\r\n            margin: '20px auto 10px',\r\n            display: 'block',\r\n            accentColor: '#e74c3c',\r\n          }}\r\n          />\r\n        </div>\r\n    <div style={{ display: 'flex', alignItems: 'flex-start', border: '3px solid #e74c3c', borderRadius: '8px', padding: '20px'}}>\r\n      <div style={{ flex:'1' }}>\r\n        <svg ref={svgRef} width={width} height={height}></svg>\r\n        {tooltip.visible && (\r\n          <div\r\n            style={{\r\n              position: 'absolute',\r\n              top: tooltip.y + 5,\r\n              left: tooltip.x + 5,\r\n              whiteSpace: 'pre-line',\r\n              backgroundColor: 'rgba(255, 255, 255, 0.9)',\r\n              padding: '8px',\r\n              borderRadius: '5px',\r\n              boxShadow: '0px 4px 8px rgba(0, 0, 0, 0.3)',\r\n              fontSize: '12px',\r\n              color: '#333',\r\n              pointerEvents: 'none',\r\n              maxWidth: '200px',\r\n            }}\r\n          >\r\n            {tooltip.content}\r\n          </div>\r\n        )}\r\n\r\n        \r\n      </div>\r\n\r\n      <div style={{\r\n        marginLeft: '20px',\r\n        display:'flex',\r\n        flexDirection:'column',\r\n        marginTop: '20px',\r\n        padding: '20px', // Increase padding for larger box size\r\n        background: 'rgba(0, 0, 0, 0.9)',\r\n        borderRadius: '8px',\r\n        fontSize: '14px',\r\n        color: '#e0e0e0',\r\n        width: '250px', // Increase width for larger legend box\r\n      }}>\r\n        <p style={{ fontSize: '16px', marginBottom: '20px', fontWeight: 'bold', color: '#e74c3c' }}>\r\n          Total Revenue: ${(totalRevenue / 1000).toLocaleString()}B\r\n        </p>\r\n        \r\n\r\n        {legendData.map((entry, index) => (\r\n          <div \r\n            key={index} \r\n            style={{ \r\n              display: 'flex', \r\n              alignItems: 'center', \r\n              marginBottom: '8px',\r\n            }}\r\n          >\r\n            <div \r\n              style={{ \r\n                display: 'flex', \r\n                alignItems: 'center', \r\n                flex: 1 \r\n              }}\r\n            >\r\n              <div\r\n                style={{\r\n                  width: '20px',\r\n                  height: '20px',\r\n                  borderRadius: '4px',\r\n                  backgroundColor: colorMap[entry.country] || defaultColor, // Use colormap or fallback\r\n                  marginRight: '15px',\r\n                }}\r\n              ></div>\r\n              <span style={{ fontWeight: 'bold', fontSize: '16px', marginRight: '5px' }}>\r\n                {entry.country}\r\n              </span>\r\n            </div>\r\n            <span style={{ fontSize: '16px', textAlign: 'right', whiteSpace: 'nowrap' }}>\r\n              {entry.percentage.toFixed(1)}%\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManufacturerTreeMap;\r\n","import React, { useState, useRef } from 'react';\r\nimport ManufacturerTreeMap from './graphs/006_ManufacturerTreemap';\r\n\r\n\r\nconst manufacturers = () => {\r\n  const [selectedYear, setSelectedYear] = useState(2023);\r\n  return (\r\n    <section id=\"006\">\r\n      <p className=\"custom-title\" style={{cssText: 'margin-top: 0'}}>\r\n        From Tensions to Strategic Economic Engines\r\n      </p>\r\n\r\n      <p className=\"custom-paragraph\">\r\n        Since the Cold War, the arms trade has evolved into a multipolar competition. While the <span style={{ color: \"#4682B4\" }}>US</span> remains dominant, \r\n        its share has decreased from 69.45% in 2010 to 55.95% in 2022, as <span style={{ color: \"#FFDB58\" }}>China</span> rapidly expanded to capture 24.74% of the market. \r\n        European and Russian shares have declined, reflecting China’s rising influence and ambition to challenge Western defense markets.\r\n      </p>\r\n\r\n      <p className=\"custom-paragraph\">\r\n        Defense industries benefit immensely, with geopolitical conflicts boosting demand for advanced systems, driving innovation, and fueling growth. \r\n        Thus, the global arms trade serves both economic and strategic purposes, enabling superpowers to advance interests, stabilize allies, and counter rivals through targeted arms exports.\r\n      </p>\r\n\r\n      <div className=\"chart-container\" style={{width: '80%'}}>\r\n        <ManufacturerTreeMap selectedYear={selectedYear} setSelectedYear={setSelectedYear} />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default manufacturers;\r\n"],"names":["svgRef","useRef","_useState2","_slicedToArray","useState","visible","x","y","content","tooltip","_useState4","legendData","setLegendData","_useState6","totalRevenue","setTotalRevenue","_useState8","selectedYear","setSelectedYear","colorMap","defaultColor","useEffect","svg","d3","current","attr","style","selectAll","remove","append","width","text","then","data","revenueColumn","concat","columns","includes","top20Data","map","d","_objectSpread","filter","sort","a","b","slice","totalRev","groupedData","Country","colorScale","legendInfo","Array","from","_ref","_ref2","country","companies","countryRevenue","company","color","percentage","root","children","sum","value","size","height","padding","treemapGroup","leaves","enter","x0","y0","x1","y1","on","event","revenuePercentage","toFixed","html","Company","toLocaleString","currentTarget","transition","duration","pageX","pageY","error","console","React","textAlign","fontSize","paddingTop","marginTop","type","id","min","max","step","onChange","e","parseInt","target","appearance","backgroundColor","borderRadius","outline","margin","display","accentColor","alignItems","border","flex","ref","position","top","left","whiteSpace","boxShadow","pointerEvents","maxWidth","marginLeft","flexDirection","background","marginBottom","fontWeight","entry","index","key","marginRight","className","cssText","ManufacturerTreeMap"],"sourceRoot":""}